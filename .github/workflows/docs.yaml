name: "Release Docs"

on:
  workflow_run:
    workflows: ["CI"]
    branches: [master]
    types: 
      - completed

jobs:
  build-test:
    name: "Build & test using cabal"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - package: plutus-cbor
          - package: plutus-merkle-tree
          - package: hydra-tui
          - package: hydra-node
          - package: hydra-cluster
    steps:

    - name: Get tag name
      id: latest_tag
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: 📥 Checkout repository
      uses: actions/checkout@v3
      with:
        repository: ffakenz/hydra-poc
        token: ${{ secrets.MY_TOKEN || github.token }}
        ref: ${{ steps.latest_tag.outputs.VERSION }}

    - name: ❄ Prepare nix
      uses: cachix/install-nix-action@v20
      with:
        extra_nix_config: |
          accept-flake-config = true

    - name: ❄ Cachix cache of nix derivations
      uses: cachix/cachix-action@v12
      with:
        name: hydra-node
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    - name: 🔁 Github cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      uses: actions/cache@v3
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: |
          cabal-${{ runner.os }}-${{ hashFiles('cabal.project', 'default.nix', 'shell.nix') }}-${{ matrix.package }}
        restore-keys: |
          cabal-${{ runner.os }}-${{ hashFiles('cabal.project', 'default.nix', 'shell.nix') }}

    - name: 🧰 Prepare tools
      run: |
        nix develop .#ci --command bash -c 'cabal update'

    - name: 🔨 Build
      run: |
        nix develop .#ci --command bash -c 'cabal build ${{ matrix.package }}'

    - name: ❓ Test
      if: ${{ matrix.package != 'hydra-tui' }}
      run: |
        nix develop .#ci --command bash -c 'cabal test ${{ matrix.package }}'

    - name: ❓ Test (TUI)
      id: test_tui
      if: ${{ matrix.package == 'hydra-tui' }}
      # https://giters.com/gfx/example-github-actions-with-tty
      # The default shell does not allocate a TTY which breaks some tests
      shell: 'script -q -e -c "bash {0}"'
      env:
        TERM: "xterm"
      # TUI specs are flaky. They are failing because of SIGSEGV. 
      # There is an open issue to tackle this problem. https://github.com/ffakenz/hydra/issues/590-poc
      continue-on-error: true
      run: |
        nix develop .#ci --command bash -c 'cabal test ${{ matrix.package }}'

    - name: 💾 Upload build & test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-results-released
        path: |
          ./**/test-results.xml
          ./**/hspec-results.md

# checkout to latest release branch/tag

# build & publish test-results, haddock and benchmark-results

# generate docs

# download docs artifact from CI (unstable)

# merge docs

# upload artifact (debug locally) => then publish docs

  publish-test-results:
    name: Publish test results
    needs: [build-test]
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v3
      with:
        repository: ffakenz/hydra-poc
        token: ${{ secrets.MY_TOKEN || github.token }}
        ref: ${{ steps.latest_tag.outputs.VERSION }}

    - name: 📥 Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results-released

    - name: ✏ Publish test results to PR
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        junit_files: ./**/test-results.xml

  haddock-benchmarks:
    name: "Haddock & benchmarks"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - bench: tx-cost
            options: '--output-directory $(pwd)/docs/benchmarks'
          - bench: hydra-cluster
            options: '--scaling-factor 1'
          - bench: plutus-merkle-tree
            options: '$(pwd)/docs/benchmarks'
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v3
      with:
        repository: ffakenz/hydra-poc
        token: ${{ secrets.MY_TOKEN || github.token }}
        ref: ${{ steps.latest_tag.outputs.VERSION }}

    - name: ❄ Prepare nix
      uses: cachix/install-nix-action@v20
      with:
        extra_nix_config: |
          accept-flake-config = true

    - name: ❄ Cachix cache of nix derivations
      uses: cachix/cachix-action@v12
      with:
        name: hydra-node
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    - name: 🔁 Github cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      uses: actions/cache@v3
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: |
          cabal-${{ runner.os }}-${{ hashFiles('cabal.project', 'default.nix', 'shell.nix') }}

    - name: 🧰 Prepare tools
      run: |
        nix develop .#ci --command bash -c 'cabal update'

    - name: 📈 Benchmark
      run: |
        nix develop .#ci --command bash -c 'cabal bench ${{ matrix.bench }} --benchmark-options "${{ matrix.options }}"'

    - name: 📚 Documentation (Haddock)
      run: |
        nix develop .#ci --command bash -c '.github/workflows/ci-haddock.sh'

    - name: 💾 Upload build & test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: benchmarks-and-haddocks-released
        path: ./docs

  publish-benchmark-results:
    name: Publish benchmark results
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    # TODO: this is actually only requires the tx-cost benchmark results
    needs: [haddock-benchmarks]
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v3
      with:
        repository: ffakenz/hydra-poc
        token: ${{ secrets.MY_TOKEN || github.token }}
        ref: ${{ steps.latest_tag.outputs.VERSION }}

    - name: 📥 Download generated documentation
      uses: actions/download-artifact@v3
      with:
        name: benchmarks-and-haddocks-released
        path: artifact

    - name: ⚙ Prepare comment body
      id: comment-body
      run: |
        # Drop first 5 header lines and demote headlines one level
        body="$(cat artifact/benchmarks/transaction-cost.md | sed '1,5d;s/^#/##/')"
        body="${body//'%'/'%25'}"
        body="${body//$'\n'/'%0A'}"
        body="${body//$'\r'/'%0D'}"
        echo "::set-output name=body::$body"

    - name: 🔎 Find Comment
      uses: peter-evans/find-comment@v2
      id: find-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Transactions Costs

    - name: ✏ Create or update comment
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        edit-mode: replace
        issue-number: ${{ github.event.pull_request.number }}
        body: ${{ steps.comment-body.outputs.body }}
        reactions: rocket

  documentation:
    name: Documentation
    needs: [haddock-benchmarks,build-test]
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v3
      with:
        repository: ffakenz/hydra-poc
        token: ${{ secrets.MY_TOKEN || github.token }}
        ref: ${{ steps.latest_tag.outputs.VERSION }}

    - name: 🚧 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
        cache-dependency-path: docs/yarn.lock

    - name: 📥 Download generated documentation
      uses: actions/download-artifact@v3
      with:
        name: benchmarks-and-haddocks-released
        path: docs

    - name: 📥 Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results-released
        path: docs/benchmarks/tests

    - name: 📚 Documentation (Docusaurus)
      working-directory: docs
      run: |
        yarn && yarn build
        yarn validate
        mkdir -p released/
        mv build/* released/
        echo "hydra.family" > public/CNAME
        echo '<!DOCTYPE html><html><head><meta http-equiv="Refresh" content="0; URL=https://hydra.family/head-protocol"></head></html>' > public/index.html

    # - name: 🚢 Publish Documentation
    #   if: github.event_name == 'push'
    #   uses: peaceiris/actions-gh-pages@v3
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN || github.token }}
    #     publish_dir: docs/public
    #     enable_jekyll: true
    #     force_orphan: true
    - name: 💾 Upload unstable docs as an artifact
      uses: actions/upload-artifact@v3
      with:
        name: released
        path: ./released
