name: "Network fault tolerance"

on:
  pull_request:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
      percent:
        type: number
        description: 'Percentage for the loss in the netem Pumba command'
        required: false
        default: 4
      scaling_factor:
        type: number
        description: 'Scaling factor for the benchmarks'
        required: false
        default: 10
      wait_peer_disconnected:
        type: boolean
        description: 'Check other peers see the target peer is disconnected before running benchmark.'
        required: false
        default: false
      target_peer:
        description: 'Select the peer to target with netem package loss'
        required: true
        type: choice
        options:
          - alice
          - bob
          - carol
        default: alice

jobs:
  network-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: ‚ùÑ Prepare nix
      uses: cachix/install-nix-action@V27
      with:
        extra_nix_config: |
          accept-flake-config = true
          log-lines = 1000

    - name: ‚ùÑ Cachix cache of nix derivations
      uses: cachix/cachix-action@v15
      with:
        name: cardano-scaling
        authToken: '${{ secrets.CACHIX_CARDANO_SCALING_AUTH_TOKEN }}'

    - name: Build docker images for netem specifically
      run: |
        nix build .#docker-hydra-node-for-netem
        ./result | docker load

    - name: Setup containers for network testing
      run: |
        cd demo
        ./prepare-devnet.sh
        docker compose up -d cardano-node
        sleep 5
        # :tear: socket permissions.
        sudo chown runner:docker devnet/node.socket
        ./export-tx-id-and-pparams.sh
        # Specify two docker compose yamls; the second one overrides the
        # images to use the netem ones specifically
        docker compose -f docker-compose.yaml -f docker-compose-netem.yaml up -d hydra-node-{1,2,3}
        sleep 3
        docker ps

    - name: Build required nix and docker derivations
      run: |
        nix build .#legacyPackages.x86_64-linux.hydra-cluster.components.benchmarks.bench-e2e
        nix build github:noonio/pumba/noon/add-flake

    # Use tmate to get a shell onto the runner to do some temporary hacking
    #
    # <https://github.com/mxschmitt/action-tmate>
    #
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
      with:
        limit-access-to-actor: true

    - name: Install yq
      run: sudo snap install yq

    - name: Run pumba and the benchmarks
      run: |
        # Extract inputs with defaults for non-workflow_dispatch events
        percent="${{ github.event.inputs.percent || '4' }}"
        scaling_factor="${{ github.event.inputs.scaling_factor || '10' }}"
        target_peer="${{ github.event.inputs.target_peer || 'alice' }}"

        peers_info_json=$(
          .github/workflows/network/peers_info_json.sh demo/docker-compose.yaml
        )

        .github/workflows/network/run_pumba.sh $target_peer $percent $peers_info_json

        wait_peer_disconnected="${{ github.event.inputs.wait_peer_disconnected || false }}"

        if [[ "$wait_peer_disconnected" == "true" ]]; then
          .github/workflows/network/watch_logs.sh $target_peer $peers_info_json
        fi

        # Run benchmark on demo
        nix run .#legacyPackages.x86_64-linux.hydra-cluster.components.benchmarks.bench-e2e -- \
          demo \
          --output-directory=$(pwd)/benchmarks \
          --scaling-factor="$scaling_factor" \
          --timeout=1000s \
          --testnet-magic 42 \
          --node-socket=demo/devnet/node.socket \
          --hydra-client=localhost:4001 \
          --hydra-client=localhost:4002 \
          --hydra-client=localhost:4003

    - name: Acquire logs
      if: always()
      run: |
        cd demo
        docker compose logs > docker-logs

    - name: üíæ Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-logs
        path: demo/docker-logs
        if-no-files-found: ignore
