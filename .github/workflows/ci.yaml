name: "CI"

# Limit concurrent runs of this workflow within a single PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
    - master
    - release
  pull_request:
  schedule:
    # Everyday at 4:00 AM
    - cron: "0 4 * * *"

env:
  # Modify this value to "invalidate" the secp cache.
  SECP_CACHE_VERSION: "2023-06-06"
  SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a
  LD_LIBRARY_PATH: /usr/local/lib

jobs:

  build-all:
    name: "Build all"
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v3
      with:
        repository: input-output-hk/hydra
        token: ${{ secrets.MY_TOKEN || github.token }}
        # On pull_request events, we want to check out the latest commit of the
        # PR, which is different to github.ref (the default, which would point
        # to a "fake merge" commit). On push events, the default is fine as it
        # refers to the pushed commit.
        ref: ${{ github.event.pull_request.head.sha || github.ref }}
        # Also ensure we have all history with all tags
        fetch-depth: 0

    - name: üîÅ Github cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      uses: actions/cache@v3
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
          /usr/local/.ghcup/
        key: |
          cabal-${{ runner.os }}-${{ github.ref_name }}
        restore-keys: |
          cabal-${{ runner.os }}-master

    - name: "LINUX: Install build environment (apt-get)"
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: Install secp256k1
      uses: input-output-hk/setup-secp256k1@v1
      with:
        git-ref: ${{ env.SECP256K1_REF }}
        cache-version: ${{ env.SECP_CACHE_VERSION }}

    - name: check install
      run: |
        echo $LD_LIBRARY_PATH
        ls -l /usr/local/lib
        set

    - name: prepare tools
      run: |
        ghcup install ghc 8.10.7
        ghcup set ghc 8.10.7
        cabal update

    - name: Build
      run: |
        cabal build all

  build-test:
    name: "Build & test"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - package: plutus-cbor
          - package: plutus-merkle-tree
          - package: hydra-plutus
          - package: hydra-tui
          - package: hydra-node
          - package: hydra-cluster
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v3
      with:
        repository: input-output-hk/hydra
        token: ${{ secrets.MY_TOKEN || github.token }}
        # On pull_request events, we want to check out the latest commit of the
        # PR, which is different to github.ref (the default, which would point
        # to a "fake merge" commit). On push events, the default is fine as it
        # refers to the pushed commit.
        ref: ${{ github.event.pull_request.head.sha || github.ref }}
        # Also ensure we have all history with all tags
        fetch-depth: 0

    - name: ‚ùÑ Prepare nix
      uses: cachix/install-nix-action@v21
      with:
        extra_nix_config: |
          accept-flake-config = true
          log-lines = 1000

    - name: ‚ùÑ Cachix cache of nix derivations
      uses: cachix/cachix-action@v12
      with:
        name: cardano-scaling
        authToken: '${{ secrets.CACHIX_CARDANO_SCALING_AUTH_TOKEN }}'

    - name: üîÅ Github cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      uses: actions/cache@v3
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: |
          cabal-${{ runner.os }}-${{ hashFiles('cabal.project', 'default.nix', 'shell.nix') }}-${{ matrix.package }}
        restore-keys: |
          cabal-${{ runner.os }}-${{ hashFiles('cabal.project', 'default.nix', 'shell.nix') }}

    - name: ‚ùì Test
      if: ${{ matrix.package != 'hydra-tui' }}
      run: |
        cd ${{ matrix.package }}
        nix develop .?submodules=1#tests.${{ matrix.package }} --command tests

    - name: ‚ùì Test (TUI)
      id: test_tui
      if: ${{ matrix.package == 'hydra-tui' }}
      # https://giters.com/gfx/example-github-actions-with-tty
      # The default shell does not allocate a TTY which breaks some tests
      shell: 'script -q -e -c "bash {0}"'
      env:
        TERM: "xterm"
      # TUI specs are flaky. They are failing because of SIGSEGV.
      # There is an open issue to tackle this problem. https://github.com/input-output-hk/hydra/issues/590
      continue-on-error: true
      run: |
        cd ${{ matrix.package  }}
        nix develop .?submodules=1#tests.${{ matrix.package }} --command tests

    - name: üíæ Upload build & test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          ./**/test-results.xml
          ./**/hspec-results.md


    # NOTE: This depends on the path used in hydra-cluster e2e tests
    - name: üíæ Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: hydra-cluster-e2e-test-logs
        path: /tmp/nix-shell.*/hydra-cluster-e2e-*/logs/*

  build-executables:
    name: "Build static executables"
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v3
      with:
        repository: input-output-hk/hydra
        token: ${{ secrets.MY_TOKEN || github.token }}
        # On pull_request events, we want to check out the latest commit of the
        # PR, which is different to github.ref (the default, which would point
        # to a "fake merge" commit). On push events, the default is fine as it
        # refers to the pushed commit.
        ref: ${{ github.event.pull_request.head.sha || github.ref }}
        # Also ensure we have all history with all tags
        fetch-depth: 0

    - name: ‚ùÑ Prepare nix
      uses: cachix/install-nix-action@v21
      with:
        extra_nix_config: |
          accept-flake-config = true
          log-lines = 1000

    - name: ‚ùÑ Cachix cache of nix derivations
      uses: cachix/cachix-action@v12
      with:
        name: cardano-scaling
        authToken: '${{ secrets.CACHIX_CARDANO_SCALING_AUTH_TOKEN }}'

    - name: ‚ùÑ Build static executables
      run: |
        mkdir -p bin/
        nix build .#hydra-node-static && cp result/bin/* bin/
        nix build .#hydra-tools-static && cp result/bin/* bin/
        nix build .#hydra-tui-static && cp result/bin/* bin/

    - name: üíæ Upload executables
      uses: actions/upload-artifact@v3
      with:
        name: hydra-x86_64-unknown-linux-musl
        path: |
          ./bin

  publish-test-results:
    name: Publish test results
    needs: [build-test]
    runs-on: ubuntu-latest
    steps:
    - name: üì• Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results

    - name: ‚úè Publish test results to PR
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        junit_files: ./**/test-results.xml

  haddock:
    name: "Haddock"
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v3
      with:
        repository: input-output-hk/hydra
        token: ${{ secrets.MY_TOKEN || github.token }}

    - name: ‚ùÑ Prepare nix
      uses: cachix/install-nix-action@v21
      with:
        extra_nix_config: |
          accept-flake-config = true
          log-lines = 1000

    - name: ‚ùÑ Cachix cache of nix derivations
      uses: cachix/cachix-action@v12
      with:
        name: cardano-scaling
        authToken: '${{ secrets.CACHIX_CARDANO_SCALING_AUTH_TOKEN }}'

    - name: üîÅ Github cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      uses: actions/cache@v3
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: |
          cabal-${{ runner.os }}-${{ hashFiles('cabal.project', 'default.nix', 'shell.nix') }}

    - name: üß∞ Prepare tools
      run: |
        nix develop .#ci --command bash -c 'cabal update'

    - name: üìö Documentation (Haddock)
      run: |
        nix develop .#ci --command bash -c '.github/workflows/ci-haddock.sh'

    - name: üíæ Upload build & test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: haddocks
        path: ./docs/static/haddock

  benchmarks:
    name: "Benchmarks"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - package: hydra-node
            bench: tx-cost
            options: '--output-directory $(pwd)/../docs/benchmarks'
          - package: hydra-node
            bench: micro
            options: '-o $(pwd)/../docs/static/ledger-bench.html'
          - package: hydra-cluster
            bench: bench-e2e
            options: '--scaling-factor 1'
          - package: plutus-merkle-tree
            bench: on-chain-cost
            options: '--output-directory $(pwd)/../docs/benchmarks'
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v3
      with:
        repository: input-output-hk/hydra
        token: ${{ secrets.MY_TOKEN || github.token }}

    - name: ‚ùÑ Prepare nix
      uses: cachix/install-nix-action@v21
      with:
        extra_nix_config: |
          accept-flake-config = true
          log-lines = 1000

    - name: ‚ùÑ Cachix cache of nix derivations
      uses: cachix/cachix-action@v12
      with:
        name: cardano-scaling
        authToken: '${{ secrets.CACHIX_CARDANO_SCALING_AUTH_TOKEN }}'

    - name: üîÅ Github cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      uses: actions/cache@v3
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: |
          cabal-${{ runner.os }}-${{ hashFiles('cabal.project', 'default.nix', 'shell.nix') }}

    - name: üìà Benchmark
      run: |
        cd ${{ matrix.package }}
        nix develop .?submodules=1#benchs.${{ matrix.package }} --command ${{ matrix.bench }} ${{ matrix.options }}

    - name: üíæ Upload build & test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: benchmarks
        path: ./docs/benchmarks

  publish-benchmark-results:
    name: Publish benchmark results
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    # TODO: this is actually only requires the tx-cost benchmark results
    needs: [benchmarks]
    runs-on: ubuntu-latest
    steps:
    - name: üì• Download generated documentation
      uses: actions/download-artifact@v3
      with:
        name: benchmarks
        path: artifact

    - name: ‚öô Prepare comment body
      id: comment-body
      run: |
        # Drop first 5 header lines and demote headlines one level
        body="$(cat artifact/transaction-cost.md | sed '1,5d;s/^#/##/')"
        body="${body//'%'/'%25'}"
        body="${body//$'\n'/'%0A'}"
        body="${body//$'\r'/'%0D'}"
        echo "::set-output name=body::$body"

    - name: üîé Find Comment
      uses: peter-evans/find-comment@v2
      id: find-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Transactions Costs

    - name: ‚úè Create or update comment
      uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        edit-mode: replace
        issue-number: ${{ github.event.pull_request.number }}
        body: ${{ steps.comment-body.outputs.body }}
        reactions: rocket

  build-specification:
    name: "Build specification using nix"
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v3
      with:
        repository: input-output-hk/hydra

    - name: ‚ùÑ Prepare nix
      uses: cachix/install-nix-action@v21
      with:
        extra_nix_config: |
          accept-flake-config = true
          log-lines = 1000

    - name: ‚ùÑ Cachix cache of nix derivations
      uses: cachix/cachix-action@v12
      with:
        name: cardano-scaling
        authToken: '${{ secrets.CACHIX_CARDANO_SCALING_AUTH_TOKEN }}'

    - name: ‚ùÑ Build specification PDF
      run: |
        nix build .#spec && cp result/*.pdf spec/

    - name: üíæ Upload specification
      uses: actions/upload-artifact@v3
      with:
        name: hydra-spec
        path: |
          ./spec/*.pdf

  documentation:
    name: Documentation
    needs: [haddock,benchmarks,build-test,build-specification]
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v3
      with:
        repository: input-output-hk/hydra
        token: ${{ secrets.MY_TOKEN || github.token }}
        # Ensure we have all history with all commits
        fetch-depth: 0

    - name: üöß Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
        cache-dependency-path: docs/yarn.lock

    - name: ‚ùì Test API reference
      working-directory: docs
      run: |
        yarn
        yarn validate

    - name: üì• Download benchmark results
      uses: actions/download-artifact@v3
      with:
        name: benchmarks
        path: docs/benchmarks

    - name: üì• Download haddock documentation
      uses: actions/download-artifact@v3
      with:
        name: haddocks
        path: docs/static/haddock

    - name: üì• Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: docs/benchmarks/tests

    - name: üì• Download specification PDF
      uses: actions/download-artifact@v3
      with:
        name: hydra-spec
        path: docs/static/

    - name: üìö Documentation sanity check
      if: github.ref_name != 'master' && github.ref_name != 'release'
      working-directory: docs
      run: |
        yarn && yarn build-dev


    - name: üìö Documentation
      if: github.ref_name == 'master' || github.ref_name == 'release'
      working-directory: docs
      run: |
        yarn && yarn build
        rm -rf public
        mkdir public
        mv build/* public

    - name: üíæ Upload docs artifact
      if: github.ref_name == 'master' || github.ref_name == 'release'
      uses: actions/upload-artifact@v3
      with:
        name: docs
        path: docs/public

    - name: üìö Prepare /unstable Documentation
      if: github.ref_name == 'master'
      working-directory: docs
      run: |
        sed -i 's|head-protocol|head-protocol/unstable|' docusaurus.config.js

    - name: üìö /unstable Documentation
      if: github.ref_name == 'master'
      working-directory: docs
      run: |
        yarn && yarn build
        rm -rf public
        mkdir public
        mv build/* public

    - name: üíæ Upload /unstable docs artifact
      if: github.ref_name == 'master'
      uses: actions/upload-artifact@v3
      with:
        name: docs-unstable
        path: docs/public

