-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Hydra transaction library
@package hydra-tx
@version 1.0.0

module Hydra.Tx.ContestationPeriodSpec
spec :: Spec


-- | Mutation-based script validator tests for the abort transaction where
--   a <a>healthyAbortTx</a> gets mutated by an arbitrary
--   <a>AbortMutation</a>.
module Hydra.Tx.Contract.Abort
healthyAbortTx :: HasCallStack => (Tx, UTxO)
healthyHeadInput :: TxIn
healthyHeadParameters :: HeadParameters
healthyInitials :: [(TxIn, TxOut CtxUTxO)]
healthyCommits :: [(TxIn, TxOut CtxUTxO, UTxO)]
healthyParties :: [Party]
propHasInitial :: (Tx, UTxO) -> Property
propHasCommit :: (Tx, UTxO) -> Property
data AbortMutation

-- | Add one more party to the hydra keys. This is essentially the same as
--   not collecting all inputs.
MutateParties :: AbortMutation

-- | Not collect one committed UTxO by removing the input and not burn the
--   corresponding PT.
DropCollectedInput :: AbortMutation

-- | Not reimburse one of the parties.
DropOneCommitOutput :: AbortMutation

-- | Burning one PT more. This should be an impossible situation, but it is
--   tested nonetheless.
BurnOneTokenMore :: AbortMutation

-- | Meant to test that the minting policy is burning all PTs present in tx
MutateThreadTokenQuantity :: AbortMutation

-- | Check an arbitrary key cannot authenticate abort.
MutateRequiredSigner :: AbortMutation

-- | Use a different head output to abort.
MutateUseDifferentHeadToAbort :: AbortMutation

-- | Spend some abortable output from a different Head e.g. replace a
--   commit by another commit from a different Head.
UseInputFromOtherHead :: AbortMutation

-- | Re-ordering outputs would not be a big deal, but it is still
--   prevented.
ReorderCommitOutputs :: AbortMutation

-- | Only burning should be allowed in abort (by the minting policy).
MintOnAbort :: AbortMutation

-- | Not spend from v_head and also not burn anything to extract value.
ExtractValue :: AbortMutation

-- | State token is not burned
DoNotBurnST :: AbortMutation

-- | Here we want to check that the initial validator also fails on abort.
DoNotBurnSTInitial :: AbortMutation
genAbortMutation :: (Tx, UTxO) -> Gen SomeMutation
genAbortableOutputs :: [Party] -> Gen ([(TxIn, TxOut CtxUTxO)], [(TxIn, TxOut CtxUTxO, UTxO)])

-- | Generate a UTXO representing <i>commit</i> outputs for a given list of
--   <a>Party</a>. NOTE: Uses <a>testPolicyId</a> for the datum. NOTE: We
--   don't generate empty commits and it is used only at one place so
--   perhaps move it? FIXME: This function is very complicated and it's
--   hard to understand it after a while
generateCommitUTxOs :: [Party] -> Gen (Map TxIn (TxOut CtxUTxO, UTxO))
assetNameFromVerificationKey :: VerificationKey PaymentKey -> AssetName
instance GHC.Enum.Bounded Hydra.Tx.Contract.Abort.AbortMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Abort.AbortMutation
instance GHC.Show.Show Hydra.Tx.Contract.Abort.AbortMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Abort.AbortMutation

module Hydra.Tx.Contract.Close.Healthy
healthySeed :: Int
healthyUTxO :: UTxO
healthySplitUTxOInHead :: UTxO
healthySplitUTxOToDecommit :: UTxO
healthyCloseLowerBoundSlot :: SlotNo
healthyCloseUpperBoundPointInTime :: PointInTime
healthyOpenHeadTxIn :: TxIn
healthyOpenHeadTxOut :: TxOutDatum CtxUTxO -> TxOut CtxUTxO
healthyContestationPeriodSeconds :: Integer
healthyContestationPeriod :: ContestationPeriod
healthyContestationDeadline :: UTCTime
healthyCloseUTxOHash :: BuiltinByteString
healthyParticipants :: [VerificationKey PaymentKey]
somePartyCardanoVerificationKey :: VerificationKey PaymentKey
healthySigningKeys :: [SigningKey HydraKey]
healthyParties :: [Party]
healthyOnChainParties :: [Party]
healthySignature :: Snapshot Tx -> MultiSignature (Snapshot Tx)
healthyConfirmedSnapshot :: Snapshot Tx -> ConfirmedSnapshot Tx

module Hydra.Tx.Contract.Close.CloseInitial
data CloseInitialMutation
MutateCloseContestationDeadline' :: CloseInitialMutation
healthyCloseSnapshotVersion :: SnapshotVersion

-- | Healthy close transaction for the specific case were we close a head
--   with the initial UtxO, that is, no snapshot have been agreed upon and
--   signed by the head members yet.
healthyCloseInitialTx :: (Tx, UTxO)
healthyInitialOpenDatum :: State
genCloseInitialMutation :: (Tx, UTxO) -> Gen SomeMutation

-- | Generate not acceptable, but interesting deadlines.
genMutatedDeadline :: Gen POSIXTime
instance GHC.Enum.Bounded Hydra.Tx.Contract.Close.CloseInitial.CloseInitialMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Close.CloseInitial.CloseInitialMutation
instance GHC.Show.Show Hydra.Tx.Contract.Close.CloseInitial.CloseInitialMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Close.CloseInitial.CloseInitialMutation


-- | Mutation-based script validator tests for the commit transaction where
--   a <a>healthyCommitTx</a> gets mutated by an arbitrary
--   <a>CommitMutation</a>.
module Hydra.Tx.Contract.Commit
healthyCommitTx :: (Tx, UTxO)
commitSigningKey :: SigningKey PaymentKey
commitVerificationKey :: VerificationKey PaymentKey
healthyInitialTxIn :: TxIn
healthyInitialTxOut :: TxOut CtxTx
healthyCommittedUTxO :: UTxO
data CommitMutation

-- | The headId in the output datum must match the one from the input
--   datum.
NonContinuousHeadId :: CommitMutation

-- | Invalidates the transaction by changing the committed output value.
MutateCommitOutputValue :: CommitMutation

-- | Invalidates the transaction by changing the value of the committed
--   utxo on the input side of the transaction.
MutateCommittedValue :: CommitMutation

-- | Ensures the datum recording the commit is consistent with the UTxO
--   being committed.
MutateCommittedAddress :: CommitMutation

-- | Ensures a commit cannot be left out when "declared" in the commit
--   transaction output datum.
RecordAllCommittedUTxO :: CommitMutation

-- | Ensures commit is authenticated by a Head party by changing the signer
--   used on the transaction to be the one in the PT.
MutateRequiredSigner :: CommitMutation

-- | Change the head policy id to simulate commit using a PT and signer
--   from a different head. The signer shows a correct signature but from a
--   different head. This will cause the signer to not be present in the
--   participation tokens.
UsePTFromDifferentHead :: CommitMutation

-- | Minting or burning of the tokens should not be possible in commit.
MutateTokenMintingOrBurning :: CommitMutation
genCommitMutation :: (Tx, UTxO) -> Gen SomeMutation

-- | Generates value such that: - alters between policy id we use in test
--   fixtures with a random one. - mixing arbitrary token names with
--   <a>hydraHeadV1</a> - excluding 0 for quantity to mimic minting/burning
genMintedOrBurnedValue :: Gen Value
instance GHC.Enum.Bounded Hydra.Tx.Contract.Commit.CommitMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Commit.CommitMutation
instance GHC.Show.Show Hydra.Tx.Contract.Commit.CommitMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Commit.CommitMutation

module Hydra.Tx.Contract.CollectCom
healthyCollectComTx :: (Tx, UTxO)
healthyParticipants :: [VerificationKey PaymentKey]
healthyCommits :: Map TxIn HealthyCommit
healthyContestationPeriod :: ContestationPeriod
healthyHeadTxIn :: TxIn
healthyHeadTxOut :: TxOut CtxUTxO
healthyCollectComInitialDatum :: State
healthyOnChainParties :: [Party]
healthyParties :: [Party]
data HealthyCommit
HealthyCommit :: OnChainId -> TxOut CtxUTxO -> UTxO -> HealthyCommit
[$sel:participant:HealthyCommit] :: HealthyCommit -> OnChainId
[$sel:txOut:HealthyCommit] :: HealthyCommit -> TxOut CtxUTxO
[$sel:committed:HealthyCommit] :: HealthyCommit -> UTxO
healthyCommitOutput :: OnChainId -> Party -> UTxO -> (TxIn, HealthyCommit)
data CollectComMutation

-- | Ensures collectCom does not allow any output address but νHead.
NotContinueContract :: CollectComMutation

-- | Needs to prevent that not all value is collected into the head output.
ExtractSomeValue :: CollectComMutation
MutateOpenUTxOHash :: CollectComMutation
MutateOpenVersion :: CollectComMutation

-- | Ensures collectCom cannot collect from an initial UTxO.
MutateCommitToInitial :: CollectComMutation

-- | Every party should have committed and been taken into account for the
--   collectCom transaction to be valid. Here we increase the number of
--   parties in input and output but keep the commits unchanged. This
--   simulates the situation where one participant would not have committed
--   already or whose commit would have been ignored by the collectCom
--   transaction.
MutateNumberOfParties :: CollectComMutation
MutateHeadId :: CollectComMutation
MutateRequiredSigner :: CollectComMutation

-- | Minting or burning of tokens should not be possible in collectCom.
MutateTokenMintingOrBurning :: CollectComMutation

-- | νCommit validator checks the ST is in the output
RemoveSTFromOutput :: CollectComMutation
genCollectComMutation :: (Tx, UTxO) -> Gen SomeMutation

-- | Remove a random asset and quantity from headOutput by adding another
--   output that "extracts" that value.
extractHeadOutputValue :: TxOut CtxTx -> PolicyId -> Gen Mutation
instance GHC.Show.Show Hydra.Tx.Contract.CollectCom.HealthyCommit
instance GHC.Enum.Bounded Hydra.Tx.Contract.CollectCom.CollectComMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.CollectCom.CollectComMutation
instance GHC.Show.Show Hydra.Tx.Contract.CollectCom.CollectComMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.CollectCom.CollectComMutation

module Hydra.Tx.Contract.Close.CloseUsed
healthyOutdatedSnapshotNumber :: SnapshotNumber
healthyOutdatedSnapshotVersion :: SnapshotVersion

-- | Decommit snapshot which refers to the previous open state version.
--   That is, <a>healthyOpenStateVersion</a> - 1.
healthyOutdatedSnapshot :: Snapshot Tx
healthyOutdatedOpenDatum :: State

-- | In the outdated case, the used snapshot version is exactly one lower
--   than the open state version.
healthyOpenStateVersion :: SnapshotVersion
healthyOutdatedConfirmedClosingSnapshot :: ConfirmedSnapshot Tx
healthyCloseOutdatedTx :: (Tx, UTxO)
data CloseMutation

-- | Ensures collectCom does not allow any output address but νHead.
NotContinueContract :: CloseMutation

-- | Ensures the snapshot signature is multisigned by all valid Head
--   participants.
--   
--   Invalidates the tx by changing the redeemer signature but not the
--   snapshot number in output head datum.
MutateSignatureButNotSnapshotNumber :: CloseMutation

-- | Ensures the snapshot number is consistent with the signature.
--   
--   Invalidates the tx by changing the snapshot number in resulting head
--   output but not the redeemer signature.
MutateSnapshotNumberButNotSignature :: CloseMutation

-- | Check the snapshot version is preserved from last open state.
MutateSnapshotVersion :: CloseMutation

-- | Ensures the close snapshot is multisigned by all Head participants by
--   changing the parties in the input head datum. If they do not align the
--   multisignature will not be valid anymore.
SnapshotNotSignedByAllParties :: CloseMutation

-- | Ensures close is authenticated by a one of the Head members by
--   changing the signer used on the tx to not be one of PTs.
MutateRequiredSigner :: CloseMutation

-- | Ensures close is authenticated by a one of the Head members by
--   changing the signer used on the tx to be empty.
MutateNoRequiredSigner :: CloseMutation

-- | Ensures close is authenticated by a one of the Head members by
--   changing the signer used on the tx to have multiple signers (including
--   the signer to not fail for SignerIsNotAParticipant).
MutateMultipleRequiredSigner :: CloseMutation

-- | Invalidates the tx by changing the utxo hash in resulting head output.
--   
--   Ensures the output state is consistent with the redeemer.
MutateCloseUTxOHash :: CloseMutation

-- | Invalidates the tx by changing the utxo to decommit hash in resulting
--   head output.
--   
--   Ensures the output state is consistent with the redeemer.
MutateCloseUTxOToDecommitHash :: CloseMutation

-- | Invalidates the tx by changing claimed closing type. i.e. claim the
--   snapshot is current but provide signatures from an previous version
MutateCloseType :: CloseMutation

-- | Invalidates the tx by changing the signatures in redeemer.
--   
--   Ensures the output state is consistent with the redeemer.
MutateCloseSignatures :: CloseMutation

-- | Ensures parties do not change between head input datum and head output
--   datum.
MutatePartiesInOutput :: CloseMutation

-- | Ensures headId do not change between head input datum and head output
--   datum.
MutateHeadIdInOutput :: CloseMutation

-- | Invalidates the tx by changing the lower bound to be non finite.
MutateInfiniteLowerBound :: CloseMutation

-- | Invalidates the tx by changing the upper bound to be non finite.
MutateInfiniteUpperBound :: CloseMutation

-- | Invalidates the tx by changing the contestation deadline to not
--   satisfy `contestationDeadline = upperBound + contestationPeriod`.
MutateContestationDeadline :: CloseMutation

-- | Invalidates the tx by changing the lower and upper bound to be not
--   bounded as per spec `upperBound - lowerBound &lt;=
--   contestationPeriod`.
--   
--   This also changes the resulting `head output` contestation deadline to
--   be valid, so it satisfy `contestationDeadline = upperBound +
--   contestationPeriod`.
MutateValidityInterval :: CloseMutation

-- | Ensure the Head cannot be closed with correct authentication from a
--   different Head. We simulate this by changing the head policy id of the
--   ST and PTs to be of a different head - a real attack would be to add
--   inputs with those tokens on top of spending the head output, a bit
--   like a double satisfaction attack. Note that the token name stays the
--   same and consistent with the signer. This will cause authentication
--   failure because the signer's PT, although with a consistent name, is
--   not from the right head (has a different policy id than in the datum).
CloseFromDifferentHead :: CloseMutation

-- | Minting or burning of tokens should not be possible in close.
MutateTokenMintingOrBurning :: CloseMutation

-- | Invalidates the tx by changing the contesters to be non empty.
MutateContesters :: CloseMutation

-- | Invalidates the tx by changing output values arbitrarily to be
--   different (not preserved) from the head.
--   
--   Ensures values are preserved between head input and output.
MutateValueInOutput :: CloseMutation

-- | Invalidate the tx by changing the contestation period.
MutateContestationPeriod :: CloseMutation
genCloseOutdatedMutation :: (Tx, UTxO) -> Gen SomeMutation

-- | Generate not acceptable, but interesting deadlines.
genMutatedDeadline :: Gen POSIXTime
instance GHC.Enum.Bounded Hydra.Tx.Contract.Close.CloseUsed.CloseMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Close.CloseUsed.CloseMutation
instance GHC.Show.Show Hydra.Tx.Contract.Close.CloseUsed.CloseMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Close.CloseUsed.CloseMutation

module Hydra.Tx.Contract.Close.CloseUnused
healthyCurrentSnapshotNumber :: SnapshotNumber
healthyCurrentSnapshotVersion :: SnapshotVersion

-- | Healthy close transaction for the generic case were we close a head
--   after one or more snapshot have been agreed upon between the members.
healthyCloseCurrentTx :: (Tx, UTxO)
healthyCurrentSnapshot :: Snapshot Tx
healthyCurrentOpenDatum :: State
data CloseMutation

-- | Ensures collectCom does not allow any output address but νHead.
NotContinueContract :: CloseMutation

-- | Ensures the snapshot signature is multisigned by all valid Head
--   participants.
--   
--   Invalidates the tx by changing the redeemer signature but not the
--   snapshot number in output head datum.
MutateSignatureButNotSnapshotNumber :: CloseMutation

-- | Ensures the snapshot number is consistent with the signature.
--   
--   Invalidates the tx by changing the snapshot number in resulting head
--   output but not the redeemer signature.
MutateSnapshotNumberButNotSignature :: CloseMutation

-- | Check the snapshot version is preserved from last open state.
MutateSnapshotVersion :: CloseMutation

-- | Ensures the close snapshot is multisigned by all Head participants by
--   changing the parties in the input head datum. If they do not align the
--   multisignature will not be valid anymore.
SnapshotNotSignedByAllParties :: CloseMutation

-- | Ensures close is authenticated by a one of the Head members by
--   changing the signer used on the tx to not be one of PTs.
MutateRequiredSigner :: CloseMutation

-- | Ensures close is authenticated by a one of the Head members by
--   changing the signer used on the tx to be empty.
MutateNoRequiredSigner :: CloseMutation

-- | Ensures close is authenticated by a one of the Head members by
--   changing the signer used on the tx to have multiple signers (including
--   the signer to not fail for SignerIsNotAParticipant).
MutateMultipleRequiredSigner :: CloseMutation

-- | Invalidates the tx by changing the utxo hash in resulting head output.
--   
--   Ensures the output state is consistent with the redeemer.
MutateCloseUTxOHash :: CloseMutation

-- | Invalidates the tx by changing the utxo to decommit hash in resulting
--   head output.
--   
--   Ensures the output state is consistent with the redeemer.
MutateCloseUTxOToDecommitHash :: CloseMutation

-- | Ensures parties do not change between head input datum and head output
--   datum.
MutatePartiesInOutput :: CloseMutation

-- | Ensures headId do not change between head input datum and head output
--   datum.
MutateHeadIdInOutput :: CloseMutation

-- | Invalidates the tx by changing the lower bound to be non finite.
MutateInfiniteLowerBound :: CloseMutation

-- | Invalidates the tx by changing the upper bound to be non finite.
MutateInfiniteUpperBound :: CloseMutation

-- | Invalidates the tx by changing the contestation deadline to not
--   satisfy `contestationDeadline = upperBound + contestationPeriod`.
MutateContestationDeadline :: CloseMutation

-- | Invalidates the tx by changing the lower and upper bound to be not
--   bounded as per spec `upperBound - lowerBound &lt;=
--   contestationPeriod`.
--   
--   This also changes the resulting `head output` contestation deadline to
--   be valid, so it satisfy `contestationDeadline = upperBound +
--   contestationPeriod`.
MutateValidityInterval :: CloseMutation

-- | Ensure the Head cannot be closed with correct authentication from a
--   different Head. We simulate this by changing the head policy id of the
--   ST and PTs to be of a different head - a real attack would be to add
--   inputs with those tokens on top of spending the head output, a bit
--   like a double satisfaction attack. Note that the token name stays the
--   same and consistent with the signer. This will cause authentication
--   failure because the signer's PT, although with a consistent name, is
--   not from the right head (has a different policy id than in the datum).
CloseFromDifferentHead :: CloseMutation

-- | Minting or burning of tokens should not be possible in close.
MutateTokenMintingOrBurning :: CloseMutation

-- | Invalidates the tx by changing the contesters to be non empty.
MutateContesters :: CloseMutation

-- | Invalidates the tx by changing output values arbitrarily to be
--   different (not preserved) from the head.
--   
--   Ensures values are preserved between head input and output.
MutateValueInOutput :: CloseMutation

-- | Invalidate the tx by changing the contestation period.
MutateContestationPeriod :: CloseMutation
genCloseCurrentMutation :: (Tx, UTxO) -> Gen SomeMutation

-- | Generate not acceptable, but interesting deadlines.
genMutatedDeadline :: Gen POSIXTime
instance GHC.Enum.Bounded Hydra.Tx.Contract.Close.CloseUnused.CloseMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Close.CloseUnused.CloseMutation
instance GHC.Show.Show Hydra.Tx.Contract.Close.CloseUnused.CloseMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Close.CloseUnused.CloseMutation

module Hydra.Tx.Contract.Contest.Healthy

-- | Healthy contest tx where the contester is the first one to contest and
--   correctly pushing out the deadline by the contestation period.
healthyContestTx :: (Tx, UTxO)
healthyContestSnapshotNumber :: SnapshotNumber
healthyCloseSnapshotVersion :: SnapshotVersion
healthyClosedUTxO :: UTxO
healthyContestUTxO :: UTxO
splitContestUTxO :: (UTxO, UTxO)
splitUTxOInHead :: UTxO
splitUTxOToDecommit :: UTxO
healthyContestSnapshot :: Snapshot Tx
healthyClosedState :: State
healthyContestUTxOHash :: BuiltinByteString
healthyContestUTxOToDecommitHash :: BuiltinByteString
healthyClosedUTxOHash :: BuiltinByteString
healthyClosedSnapshotNumber :: SnapshotNumber
healthySlotNo :: SlotNo
healthyClosedHeadTxIn :: TxIn
healthyClosedHeadTxOut :: TxOut CtxUTxO
healthyOnChainContestationPeriod :: ContestationPeriod
healthyContestationPeriod :: ContestationPeriod
healthyContestationPeriodSeconds :: Integer
healthyParticipants :: [VerificationKey PaymentKey]
healthyContesterVerificationKey :: VerificationKey PaymentKey
healthySigningKeys :: [SigningKey HydraKey]
healthyParties :: [Party]
healthyOnChainParties :: [Party]
healthySignature :: SnapshotNumber -> MultiSignature (Snapshot Tx)
healthyContestationDeadline :: UTCTime

module Hydra.Tx.Contract.Contest.ContestDec
data ContestDecMutation
ContestUsedDecAlterRedeemerDecommitHash :: ContestDecMutation
ContestUnusedDecAlterRedeemerDecommitHash :: ContestDecMutation
ContestUsedDecAlterDatumomegaUTxOHash :: ContestDecMutation
ContestUnusedDecAlterDatumomegaUTxOHash :: ContestDecMutation
ContestUsedDecMutateSnapshotVersion :: ContestDecMutation
ContestUnusedDecMutateSnapshotVersion :: ContestDecMutation
genContestDecMutation :: (Tx, UTxO) -> Gen SomeMutation
instance GHC.Enum.Bounded Hydra.Tx.Contract.Contest.ContestDec.ContestDecMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Contest.ContestDec.ContestDecMutation
instance GHC.Show.Show Hydra.Tx.Contract.Contest.ContestDec.ContestDecMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Contest.ContestDec.ContestDecMutation

module Hydra.Tx.Contract.Contest.ContestCurrent
data ContestMutation

-- | Ensures collectCom does not allow any output address but νHead.
NotContinueContract :: ContestMutation

-- | Invalidates the tx by changing the redeemer signature but not the
--   snapshot number in resulting head output.
--   
--   Ensures the snapshot signature is multisigned by all valid Head
--   participants.
MutateSignatureButNotSnapshotNumber :: ContestMutation

-- | Invalidates the tx by changing the snapshot number in resulting head
--   output but not the redeemer signature.
--   
--   Ensures the snapshot signature is aligned with snapshot number.
MutateSnapshotNumberButNotSignature :: ContestMutation

-- | Check the snapshot version is preserved from last open state.
MutateSnapshotVersion :: ContestMutation

-- | Invalidates the tx by changing the contest snapshot number too old.
--   
--   This is achieved by updating the head input datum to be older, so the
--   healthy snapshot number becomes too old.
MutateToNonNewerSnapshot :: ContestMutation

-- | Ensures close is authenticated by one of the Head members by changing
--   the signer used on the tx to be not one of PTs.
MutateRequiredSigner :: ContestMutation

-- | Ensures close is authenticated by one of the Head members by changing
--   the signer used on the tx to be empty.
MutateNoRequiredSigner :: ContestMutation

-- | Ensures close is authenticated by one of the Head members by changing
--   the signer used on the tx to have multiple signers (including the
--   signer to not fail for SignerIsNotAParticipant).
MutateMultipleRequiredSigner :: ContestMutation

-- | Invalidates the tx by changing the utxo hash in resulting head output.
--   
--   Ensures the output state is consistent with the redeemer.
MutateContestUTxOHash :: ContestMutation

-- | Ensures the contest snapshot is multisigned by all Head participants
--   by changing the parties in the input head datum. If they do not align
--   the multisignature will not be valid anymore.
SnapshotNotSignedByAllParties :: ContestMutation

-- | Invalidates the tx by changing the upper bound to be beyond
--   contestation deadline from head input (stored state).
MutateValidityPastDeadline :: ContestMutation

-- | Change the head policy id to simulate contestation using a ST and
--   signer from a different head. The signer shows a correct signature but
--   from a different head. This will cause the signer to not be present in
--   the participation tokens.
ContestFromDifferentHead :: ContestMutation

-- | Minting or burning of tokens should not be possible in contest.
MutateTokenMintingOrBurning :: ContestMutation

-- | Ensures a participant can only contest once by changing the head input
--   datum to already include the signer.
MutateInputContesters :: ContestMutation

-- | Ensures a the signer needs to be added to the head output datum.
MutateContesters :: ContestMutation

-- | Invalidates the tx by changing the output values arbitrarily to be
--   different (not preserved) from the head.
--   
--   Ensures values are preserved between head input and output.
MutateValueInOutput :: ContestMutation

-- | Not pushing the contestation deadline in head output datum should not
--   be allowed.
NotUpdateDeadlineAlthoughItShould :: ContestMutation

-- | Pushes the deadline although this is the last contest. Instead of
--   creating another healthy case and mutate that one, this mutation just
--   changes the starting situation so that everyone else already
--   contested. Remember the <tt>healthyContestTx</tt> is already pushing
--   out the deadline.
PushDeadlineAlthoughItShouldNot :: ContestMutation

-- | Ensures contestation period does not change between head input datum
--   and head output datum.
MutateOutputContestationPeriod :: ContestMutation

-- | Ensures parties do not change between head input datum and head output
--   datum.
MutatePartiesInOutput :: ContestMutation

-- | Ensures headId do not change between head input datum and head output
--   datum.
MutateHeadIdInOutput :: ContestMutation
genContestMutation :: (Tx, UTxO) -> Gen SomeMutation
instance GHC.Enum.Bounded Hydra.Tx.Contract.Contest.ContestCurrent.ContestMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Contest.ContestCurrent.ContestMutation
instance GHC.Show.Show Hydra.Tx.Contract.Contest.ContestCurrent.ContestMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Contest.ContestCurrent.ContestMutation

module Hydra.Tx.Contract.Decrement
healthyDecrementTx :: (Tx, UTxO)
somePartyCardanoVerificationKey :: VerificationKey PaymentKey
healthySigningKeys :: [SigningKey HydraKey]
healthyParticipants :: [VerificationKey PaymentKey]
healthyParties :: [Party]
healthyOnChainParties :: [Party]
healthySignature :: MultiSignature (Snapshot Tx)
healthySnapshotNumber :: SnapshotNumber
healthySnapshotVersion :: SnapshotVersion
healthySnapshot :: Snapshot Tx
splitDecommitUTxO :: UTxO -> (UTxO, UTxO)
healthyContestationPeriod :: ContestationPeriod
healthyUTxO :: UTxO
healthyDatum :: State
data DecrementMutation

-- | Ensures parties do not change between head input datum and head output
--   datum.
ChangePartiesInOutput :: DecrementMutation

-- | Produce invalid signature by changing signers in the redeemer
ProduceInvalidSignatures :: DecrementMutation

-- | Ensures decrement is authenticated by one of the Head members by
--   changing the signer used on the tx to not be one of PTs.
AlterRequiredSigner :: DecrementMutation

-- | Mutate the output value to produce different <a>UTxO'</a> hash to the
--   one in the signed <a>Snapshot</a>.
ChangeDecrementedValue :: DecrementMutation

-- | Invalidates the tx by changing the output values arbitrarily to be
--   different (not preserved) from the head.
--   
--   Ensures values are preserved between head input and output.
ChangeHeadValue :: DecrementMutation

-- | Drop one of the decommit outputs from the tx. This should trigger
--   snapshot signature validation to fail.
DropDecommitOutput :: DecrementMutation
ExtractSomeValue :: DecrementMutation

-- | Invalidates the tx by changing the snapshot version in resulting head
--   output.
UseDifferentSnapshotVersion :: DecrementMutation
genDecrementMutation :: (Tx, UTxO) -> Gen SomeMutation
instance GHC.Enum.Bounded Hydra.Tx.Contract.Decrement.DecrementMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Decrement.DecrementMutation
instance GHC.Show.Show Hydra.Tx.Contract.Decrement.DecrementMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Decrement.DecrementMutation


-- | Healthy deposit transactions and mutations As no Hydra script is run
--   in these transactions, the mutations here should make the deposit
--   transaction not observed as a valid deposi.
module Hydra.Tx.Contract.Deposit
genHealthyDepositTx :: Gen (Tx, UTxO)
healthyDeadline :: UTCTime
healthyDeadlineSlot :: SlotNo
data DepositMutation

-- | Change the output value to a subset of the deposited value. This
--   simulates an attack where someone claims to have deposited more than
--   they actually did.
MutateDepositOutputValue :: DepositMutation
genDepositMutation :: (Tx, UTxO) -> Gen SomeMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Deposit.DepositMutation
instance GHC.Enum.Bounded Hydra.Tx.Contract.Deposit.DepositMutation
instance GHC.Show.Show Hydra.Tx.Contract.Deposit.DepositMutation

module Hydra.Tx.Contract.FanOut
healthyFanoutTx :: (Tx, UTxO)
healthyFanoutUTxO :: UTxO
healthySlotNo :: SlotNo
healthyContestationDeadline :: UTCTime
healthyFanoutSnapshotUTxO :: (UTxO, UTxO)
healthyFanoutDatum :: State
healthyParties :: [Party]
data FanoutMutation
MutateValidityBeforeDeadline :: FanoutMutation

-- | Meant to test that the minting policy is burning all PTs and ST
--   present in tx
MutateThreadTokenQuantity :: FanoutMutation
MutateAddUnexpectedOutput :: FanoutMutation
MutateFanoutOutputValue :: FanoutMutation
MutateDecommitOutputValue :: FanoutMutation
genFanoutMutation :: (Tx, UTxO) -> Gen SomeMutation
instance GHC.Enum.Bounded Hydra.Tx.Contract.FanOut.FanoutMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.FanOut.FanoutMutation
instance GHC.Show.Show Hydra.Tx.Contract.FanOut.FanoutMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.FanOut.FanoutMutation

module Hydra.Tx.Contract.Increment
healthyIncrementTx :: (Tx, UTxO)
healthyDepositInput :: TxIn
healthyDeposited :: UTxO
somePartyCardanoVerificationKey :: VerificationKey PaymentKey
healthySigningKeys :: [SigningKey HydraKey]
healthyParticipants :: [VerificationKey PaymentKey]
healthyParties :: [Party]
healthyOnChainParties :: [Party]
healthySignature :: MultiSignature (Snapshot Tx)
healthySnapshotNumber :: SnapshotNumber
healthySnapshotVersion :: SnapshotVersion
healthySnapshot :: Snapshot Tx
healthyContestationPeriod :: ContestationPeriod
healthyUTxO :: UTxO
healthyDatum :: State
data IncrementMutation

-- | Move the deadline from the deposit datum back in time so that the
--   increment upper bound is after the deadline
DepositMutateDepositPeriod :: IncrementMutation

-- | Alter the head id
DepositMutateHeadId :: IncrementMutation

-- | Change parties in increment output datum
IncrementMutateParties :: IncrementMutation

-- | New version is incremented correctly
IncrementUseDifferentSnapshotVersion :: IncrementMutation

-- | Produce invalid signatures
ProduceInvalidSignatures :: IncrementMutation

-- | Change the head value
ChangeHeadValue :: IncrementMutation

-- | Change the required signers
AlterRequiredSigner :: IncrementMutation

-- | Alter the Claim redeemer <tt>TxOutRef</tt>
IncrementDifferentClaimRedeemer :: IncrementMutation
genIncrementMutation :: (Tx, UTxO) -> Gen SomeMutation
instance GHC.Enum.Bounded Hydra.Tx.Contract.Increment.IncrementMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Increment.IncrementMutation
instance GHC.Show.Show Hydra.Tx.Contract.Increment.IncrementMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Increment.IncrementMutation


-- | Mutation-based script validator tests for the init transaction where a
--   <a>healthyInitTx</a> gets mutated by an arbitrary <a>InitMutation</a>.
module Hydra.Tx.Contract.Init
healthyInitTx :: (Tx, UTxO)
healthyHeadParameters :: HeadParameters
healthySeedInput :: TxIn
healthyParties :: [Party]
healthyParticipants :: [OnChainId]
healthyLookupUTxO :: UTxO
data InitMutation

-- | Mint more than one ST and PTs.
MintTooManyTokens :: InitMutation
MutateAddAnotherPT :: InitMutation
MutateDropInitialOutput :: InitMutation
MutateDropSeedInput :: InitMutation
MutateInitialOutputValue :: InitMutation
MutateHeadIdInDatum :: InitMutation
MutateHeadIdInInitialDatum :: InitMutation
MutateSeedInDatum :: InitMutation
data ObserveInitMutation
MutateSomePT :: ObserveInitMutation
genInitMutation :: (Tx, UTxO) -> Gen SomeMutation
instance GHC.Enum.Bounded Hydra.Tx.Contract.Init.InitMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Init.InitMutation
instance GHC.Show.Show Hydra.Tx.Contract.Init.InitMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Init.InitMutation
instance GHC.Enum.Bounded Hydra.Tx.Contract.Init.ObserveInitMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Init.ObserveInitMutation
instance GHC.Show.Show Hydra.Tx.Contract.Init.ObserveInitMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Init.ObserveInitMutation

module Hydra.Tx.Contract.Recover
healthyRecoverTx :: (Tx, UTxO)
recoverSlotNo :: SlotNo
depositDeadline :: UTCTime
data RecoverMutation

-- | Move the deposit deadline further so that the recover lower bound is
--   not after the deadline
MutateDepositPeriod :: RecoverMutation

-- | Change the recover output so that the datum commit hash does not match
MutateRecoverOutput :: RecoverMutation

-- | Remove the lower bound from the recover transaction
RemoveTxValidityLowerBound :: RecoverMutation
genRecoverMutation :: (Tx, UTxO) -> Gen SomeMutation
instance GHC.Enum.Bounded Hydra.Tx.Contract.Recover.RecoverMutation
instance GHC.Enum.Enum Hydra.Tx.Contract.Recover.RecoverMutation
instance GHC.Show.Show Hydra.Tx.Contract.Recover.RecoverMutation
instance GHC.Generics.Generic Hydra.Tx.Contract.Recover.RecoverMutation

module Hydra.Tx.Contract.ContractSpec
spec :: Spec
prop_serializingCommitRoundtrip :: Property
prop_consistentOnAndOffChainHashOfTxOuts :: Property
prop_consistentHashPreSerializedCommits :: Property
prop_hashingCaresAboutOrderingOfTxOuts :: Property
prop_verifySnapshotSignatures :: Property

module Hydra.Tx.HeadIdSpec
spec :: Spec

module Hydra.Tx.IsTxSpec
spec :: Spec
genConwayCompatibleBabbageTx :: Gen (Tx BabbageEra)
roundtripFromAndToApi :: UTxO -> Property
roundtripTxId :: Tx -> Property
roundtripTxId' :: Tx -> Property
roundtripLedger :: Tx -> Property
roundtripCBOR :: (Eq a, Show a, ToCBOR a, FromCBOR a) => a -> Property

module Spec
main :: IO ()
spec :: Spec

module Main
main :: IO ()
