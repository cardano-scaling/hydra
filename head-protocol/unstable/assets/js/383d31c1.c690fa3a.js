"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[7395],{21588:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"tutorial/index","title":"Open a head on testnet","description":"This tutorial demonstrates how to use hydra-node on Cardano\'s preprod testing environment to open a layer 2 state channel between two participants using the Hydra Head protocol. We\'ll also use Mithril for fast node bootstrapping.","source":"@site/docs/tutorial/index.md","sourceDirName":"tutorial","slug":"/tutorial/","permalink":"/head-protocol/unstable/docs/tutorial/","draft":false,"unlisted":false,"editUrl":"https://github.com/cardano-scaling/hydra/tree/master/docs/docs/tutorial/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userDocumentation","previous":{"title":"... without Docker","permalink":"/head-protocol/unstable/docs/getting-started-without-docker"},"next":{"title":"Installation","permalink":"/head-protocol/unstable/docs/installation"}}');var s=a(74848),i=a(28453),r=a(95658),o=a(27654);const d={},l="Open a head on testnet",c={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 0. Installation",id:"step-0-installation",level:2},{value:"Step 1. Connect to Cardano",id:"step-1-connect-to-cardano",level:2},{value:"Step 2. Prepare keys and funding",id:"step-2-prepare-keys-and-funding",level:2},{value:"Step 3. Start the Hydra node",id:"step-3-start-the-hydra-node",level:2},{value:"Step 4. Open a Hydra head",id:"step-4-open-a-hydra-head",level:2},{value:"Step 5. Use the Hydra head",id:"step-5-use-the-hydra-head",level:2},{value:"Step 6. Closing the Hydra head",id:"step-6-closing-the-hydra-head",level:2},{value:"Bonus. Be a good citizen",id:"bonus-be-a-good-citizen",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"open-a-head-on-testnet",children:"Open a head on testnet"})}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial demonstrates how to use ",(0,s.jsx)(n.code,{children:"hydra-node"})," on Cardano's ",(0,s.jsx)(n.code,{children:"preprod"})," testing environment to open a layer 2 state channel between two participants using the Hydra Head protocol. We'll also use ",(0,s.jsx)(n.a,{href:"https://mithril.network",children:"Mithril"})," for fast node bootstrapping."]}),"\n",(0,s.jsxs)(n.p,{children:["This setup follows the ",(0,s.jsx)(n.a,{href:"/topologies/basic",children:"basic Hydra head"})," topology, establishing the 'green' Hydra head between ",(0,s.jsx)(n.code,{children:"X"})," and ",(0,s.jsx)(n.code,{children:"Y"})," as shown below:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:a(8116).A+"",width:"1677",height:"931"})}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Terminal access to a machine which is reachable from the internet (forwarded ports)"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Either:","\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Another participant following this tutorial (recommended), or"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Access to two such machines"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","100 test ada per participant in a wallet on the ",(0,s.jsx)(n.code,{children:"preprod"})," network."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"step-0-installation",children:"Step 0. Installation"}),"\n",(0,s.jsx)(n.p,{children:"This tutorial assumes the following tools are available on your system:"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.code,{children:"curl"})]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.code,{children:"tar"})]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.a,{href:"https://jqlang.github.io/jq/",children:(0,s.jsx)(n.code,{children:"jq"})})]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.a,{href:"https://github.com/vi/websocat",children:(0,s.jsx)(n.code,{children:"websocat"})}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["After ensuring the tools above are available, begin by downloading pre-built binaries of the involved Cardano software components and placing them in a ",(0,s.jsx)(n.code,{children:"bin/"})," directory:"]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["Older versions of ",(0,s.jsx)(n.code,{children:"jq"})," (",(0,s.jsx)(n.code,{children:"<= 1.6"}),") have a bug where they do not successfully\nround-trip large integers, ",(0,s.jsx)(n.a,{href:"https://github.com/cardano-scaling/hydra/issues/1679",children:"which can cause\nissues"})," you can verify\nthat you have a good version of jq with this command:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'[[ $(jq -n \'9223372036854775807\') == "9223372036854775807" ]] \\\n  && echo "jq ok" \\\n  || echo "bad: please upgrade jq"\n'})})]}),"\n",(0,s.jsxs)(r.A,{queryString:"system",children:[(0,s.jsxs)(o.A,{value:"linux",label:"Linux x86-64",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir -p bin\n\nhydra_version=1.1.0\ncurl -L -O https://github.com/cardano-scaling/hydra/releases/download/${hydra_version}/hydra-x86_64-linux-${hydra_version}.zip\nunzip -d bin hydra-x86_64-linux-${hydra_version}.zip\n\ncardano_node_version=10.4.1\ncurl -L -O https://github.com/IntersectMBO/cardano-node/releases/download/${cardano_node_version}/cardano-node-${cardano_node_version}-linux.tar.gz\ntar xf cardano-node-${cardano_node_version}-linux.tar.gz ./bin/cardano-node ./bin/cardano-cli\ntar xf cardano-node-${cardano_node_version}-linux.tar.gz ./share/preprod --strip-components=3\n\ncurl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/input-output-hk/mithril/refs/heads/main/mithril-install.sh | sh -s -- -c mithril-client -d latest -p bin\n\netcd_version=v3.5.21\ncurl -L https://github.com/etcd-io/etcd/releases/download/${etcd_version}/etcd-${etcd_version}-linux-amd64.tar.gz \\\n  | tar xz -C bin --strip-components=1\n\nchmod +x bin/*\n"})}),(0,s.jsxs)(n.p,{children:["Finally, verify your node installation by running ",(0,s.jsx)(n.code,{children:"./bin/hydra-node --help"})]})]}),(0,s.jsxs)(o.A,{value:"macos",label:"Mac OS aarch64",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir -p bin\n\nhydra_version=1.1.0\ncurl -L -O https://github.com/cardano-scaling/hydra/releases/download/${hydra_version}/hydra-aarch64-darwin-${hydra_version}.zip\nunzip -d bin hydra-aarch64-darwin-${hydra_version}.zip\n\ncardano_node_version=10.4.1\ncurl -L -O https://github.com/IntersectMBO/cardano-node/releases/download/${cardano_node_version}/cardano-node-${cardano_node_version}-macos.tar.gz\ntar xf cardano-node-${cardano_node_version}-macos.tar.gz ./bin/cardano-node ./bin/cardano-cli './bin/*.dylib'\ntar xf cardano-node-${cardano_node_version}-macos.tar.gz --strip-components=3 ./share/preprod/\n\ncurl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/input-output-hk/mithril/refs/heads/main/mithril-install.sh | sh -s -- -c mithril-client -d latest -p bin\n\netcd_version=v3.5.21\ncurl -L -O https://github.com/etcd-io/etcd/releases/download/${etcd_version}/etcd-${etcd_version}-darwin-arm64.zip\nunzip -d bin etcd-${etcd_version}-darwin-arm64.zip\nmv bin/etcd-${etcd_version}-darwin-arm64/* bin\n\nchmod +x bin/*\n"})}),(0,s.jsxs)(n.p,{children:["Finally, verify your node installation by running ",(0,s.jsx)(n.code,{children:"./bin/hydra-node --help"})]}),(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"Recent versions of MacOS block unverified binaries to protect your system."}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:'Apple cannot verify that "hydra-node" is free of malware that may harm your Mac or compromise your privacy.'})}),"\n"]}),(0,s.jsxs)(n.p,{children:["To proceed, you\u2019ll need to allow it manually in the ",(0,s.jsx)(n.strong,{children:"Privacy & Security"})," section of your system settings."]})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Next, set various environment variables to simplify command execution. Ensure each terminal you open to run these commands has these environment variables defined."}),"\n",(0,s.jsxs)(r.A,{queryString:"system",children:[(0,s.jsx)(o.A,{value:"linux",label:"Linux x86-64",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"export PATH=$(pwd)/bin:$PATH\nexport GENESIS_VERIFICATION_KEY=$(curl https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/release-preprod/genesis.vkey 2> /dev/null)\nexport ANCILLARY_VERIFICATION_KEY=$(curl https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/release-preprod/ancillary.vkey 2> /dev/null)\nexport AGGREGATOR_ENDPOINT=https://aggregator.release-preprod.api.mithril.network/aggregator\nexport CARDANO_NODE_SOCKET_PATH=$(pwd)/node.socket\nexport CARDANO_NODE_NETWORK_ID=1\n"})})}),(0,s.jsx)(o.A,{value:"macos",label:"Mac OS aarch64",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"export PATH=$(pwd)/bin:$PATH\nexport GENESIS_VERIFICATION_KEY=$(curl https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/release-preprod/genesis.vkey 2> /dev/null)\nexport ANCILLARY_VERIFICATION_KEY=$(curl https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/release-preprod/ancillary.vkey 2> /dev/null)\nexport AGGREGATOR_ENDPOINT=https://aggregator.release-preprod.api.mithril.network/aggregator\nexport CARDANO_NODE_SOCKET_PATH=$(pwd)/node.socket\nexport CARDANO_NODE_NETWORK_ID=1\nexport DYLD_FALLBACK_LIBRARY_PATH=$(pwd)/bin\n"})})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Other installation options"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Docker containers are published regularly"}),"\n",(0,s.jsx)(n.li,{children:"Some projects provide system-level packages for installation and/or pre-built binaries for various platforms"}),"\n",(0,s.jsx)(n.li,{children:"Building from source is always an option"}),"\n",(0,s.jsx)(n.li,{children:"Some projects provide system-level packages for installation and/or pre-built binaries for various platforms"}),"\n",(0,s.jsx)(n.li,{children:"Building from source is always an option."}),"\n"]}),(0,s.jsx)(n.p,{children:"Please check out each project's GitHub pages for more options."})]}),"\n",(0,s.jsx)(n.h2,{id:"step-1-connect-to-cardano",children:"Step 1. Connect to Cardano"}),"\n",(0,s.jsxs)(n.p,{children:["The Hydra Head protocol requires a connection to Cardano layer 1 to verify and post protocol transactions in a trustless way. Start by setting up a ",(0,s.jsx)(n.code,{children:"cardano-node"})," on the public testnet. With Mithril, you can skip synchronizing the whole history and get started quickly."]}),"\n",(0,s.jsxs)(n.p,{children:["Download the latest blockchain snapshot using ",(0,s.jsx)(n.code,{children:"mithril-client"})," configured for the ",(0,s.jsx)(n.code,{children:"preprod"})," network:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mithril-client --origin-tag HYDRA cardano-db download latest --include-ancillary\n"})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"NixOS workaround"}),(0,s.jsxs)(n.p,{children:["The dynamically linked ",(0,s.jsx)(n.code,{children:"mithril-client"})," binary may not function out-of-the-box on NixOS.\nYou can workaround this by emulating a common Linux FHS environment:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'alias mithril-client="steam-run mithril-client"\n'})}),(0,s.jsx)(n.p,{children:"If you have a better solution or want to contribute static binaries to the\nmithril CI, PRs are welcome!"})]}),"\n",(0,s.jsxs)(n.p,{children:["Next, run a ",(0,s.jsx)(n.code,{children:"cardano-node"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cardano-node run \\\n  --config config.json \\\n  --topology topology.json \\\n  --socket-path ./node.socket \\\n  --database-path db\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Once all the blocks have been replayed, you can monitor the synchronization\nstatus using ",(0,s.jsx)(n.code,{children:"cardano-cli"})," in a separate terminal window while the node\nruns:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cardano-cli query tip\n"})}),"\n",(0,s.jsx)(n.p,{children:"This should show something like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "block": 1275938,\n  "epoch": 88,\n  "era": "Babbage",\n  "hash": "7d22ae918f3ffd35e18c5a7859af27dbcbd29fe08f274b76c284c00042044a2e",\n  "slot": 36501000,\n  "slotInEpoch": 126600,\n  "slotsToEpochEnd": 305400,\n  "syncProgress": "100.00"\n}\n'})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Bash auto-completion"}),(0,s.jsxs)(n.p,{children:["Enhance your ",(0,s.jsx)(n.code,{children:"bash"})," experience with auto-completion for ",(0,s.jsx)(n.code,{children:"cardano-cli"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"source <(cardano-cli --bash-completion-script cardano-cli)\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"step-2-prepare-keys-and-funding",children:"Step 2. Prepare keys and funding"}),"\n",(0,s.jsxs)(n.p,{children:["First, generate Cardano key pairs and addresses for both participants to identify the ",(0,s.jsx)(n.code,{children:"hydra-node"})," and manage funds on layer 1:"]}),"\n","\n",(0,s.jsxs)(r.A,{queryString:"role",children:[(0,s.jsx)(o.A,{value:"alice",label:"Alice",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir -p credentials\n\ncardano-cli address key-gen \\\n  --verification-key-file credentials/alice-node.vk \\\n  --signing-key-file credentials/alice-node.sk\n\ncardano-cli address build \\\n  --verification-key-file credentials/alice-node.vk \\\n  --out-file credentials/alice-node.addr\n\ncardano-cli address key-gen \\\n  --verification-key-file credentials/alice-funds.vk \\\n  --signing-key-file credentials/alice-funds.sk\n\ncardano-cli address build \\\n  --verification-key-file credentials/alice-funds.vk \\\n  --out-file credentials/alice-funds.addr\n"})})}),(0,s.jsx)(o.A,{value:"bob",label:"Bob",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir -p credentials\n\ncardano-cli address key-gen \\\n  --verification-key-file credentials/bob-node.vk \\\n  --signing-key-file credentials/bob-node.sk\n\ncardano-cli address build \\\n  --verification-key-file credentials/bob-node.vk \\\n  --out-file credentials/bob-node.addr\n\ncardano-cli address key-gen \\\n  --verification-key-file credentials/bob-funds.vk \\\n  --signing-key-file credentials/bob-funds.sk\n\ncardano-cli address build \\\n  --verification-key-file credentials/bob-funds.vk \\\n  --out-file credentials/bob-funds.addr\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["Next, fund these addresses. If you have test ada on the ",(0,s.jsx)(n.code,{children:"preprod"})," network, distribute it to the newly created addresses:"]}),"\n",(0,s.jsxs)(r.A,{queryString:"role",children:[(0,s.jsx)(o.A,{value:"alice",label:"Alice",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'echo "Send at least 30 tADA to alice-node:"\necho $(cat credentials/alice-node.addr)"\\n"\n\necho "Send any amount of tADA or assets to alice-funds:"\necho $(cat credentials/alice-funds.addr)"\\n"\n'})})}),(0,s.jsx)(o.A,{value:"bob",label:"Bob",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'echo "Send at least 30 tADA to bob-node:"\necho $(cat credentials/bob-node.addr)"\\n"\n\necho "Send any amount of tADA or assets to bob-funds:"\necho $(cat credentials/bob-funds.addr)"\\n"\n'})})})]}),"\n",(0,s.jsxs)(n.admonition,{title:"Where to get funds",type:"info",children:[(0,s.jsxs)(n.p,{children:["In case you don't have test ada on ",(0,s.jsx)(n.code,{children:"preprod"}),", you can use the ",(0,s.jsx)(n.a,{href:"https://docs.cardano.org/cardano-testnets/tools/faucet/",children:"testnet faucet"})," to fund your wallet or the addresses above. Note that due to rate limiting, it's better to request large sums for efficiency and distribute as needed."]}),(0,s.jsxs)(n.p,{children:["Something like the following (if you used the faucet to give funds only to ",(0,s.jsx)(n.code,{children:"alice-funds.addr"}),"):"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'# Get alices UTxO state\ncardano-cli query utxo \\\n    --address $(cat credentials/alice-funds.addr) \\\n    --out-file alice-funds-utxo.json\n\n# Build a Tx to send funds from `alice-funds` to the others who need them: bob\n# funds and nodes.\ncardano-cli latest transaction build \\\n    $(cat alice-funds-utxo.json | jq -j \'to_entries[].key | "--tx-in ", ., " "\') \\\n    --change-address $(cat credentials/alice-funds.addr) \\\n    --tx-out $(cat credentials/bob-funds.addr)+1000000000 \\\n    --tx-out $(cat credentials/bob-node.addr)+1000000000 \\\n    --tx-out $(cat credentials/alice-node.addr)+1000000000 \\\n    --out-file tx.json\n\ncardano-cli latest transaction sign \\\n  --tx-file tx.json \\\n  --signing-key-file credentials/alice-funds.sk \\\n  --out-file tx-signed.json\n\ncardano-cli latest transaction submit --tx-file tx-signed.json\n'})})]}),"\n",(0,s.jsx)(n.p,{children:"You can check the balance of your addresses via:"}),"\n",(0,s.jsxs)(r.A,{queryString:"role",children:[(0,s.jsx)(o.A,{value:"alice",label:"Alice",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'echo "# UTxO of alice-node"\ncardano-cli query utxo --address $(cat credentials/alice-node.addr) --out-file /dev/stdout | jq\n\necho "# UTxO of alice-funds"\ncardano-cli query utxo --address $(cat credentials/alice-funds.addr) --out-file /dev/stdout | jq\n'})})}),(0,s.jsx)(o.A,{value:"bob",label:"Bob",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'echo "# UTxO of bob-node"\ncardano-cli query utxo --address $(cat credentials/bob-node.addr) --out-file /dev/stdout | jq\n\necho "# UTxO of bob-funds"\ncardano-cli query utxo --address $(cat credentials/bob-funds.addr) --out-file /dev/stdout | jq\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"Next, generate Hydra key pairs for use on layer 2. Use the"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"hydra-tools"})," to generate the keys for ",(0,s.jsx)(n.code,{children:"alice"})," and/or ",(0,s.jsx)(n.code,{children:"bob"})," respectively:"]}),"\n",(0,s.jsxs)(r.A,{queryString:"role",children:[(0,s.jsx)(o.A,{value:"alice",label:"Alice",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"hydra-node gen-hydra-key --output-file credentials/alice-hydra\n"})})}),(0,s.jsx)(o.A,{value:"bob",label:"Bob",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"hydra-node gen-hydra-key --output-file credentials/bob-hydra\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["If you are collaborating with another individual, exchange the verification (public) keys: ",(0,s.jsx)(n.code,{children:"{alice,bob}-node.vk"})," and ",(0,s.jsx)(n.code,{children:"{alice,bob}-hydra.vk"})," to ensure secure communication."]}),"\n",(0,s.jsxs)(n.p,{children:["Before launching the ",(0,s.jsx)(n.code,{children:"hydra-node"}),", it's crucial to establish and communicate each participant's network connectivity details. This includes the IP addresses and ports where ",(0,s.jsx)(n.code,{children:"Alice"})," and ",(0,s.jsx)(n.code,{children:"Bob's"})," nodes will be reachable for layer 2 network interactions. For this tutorial, we're using placeholder IP addresses and ports, which should be replaced with your actual network details:"]}),"\n",(0,s.jsxs)(n.p,{children:["Alice: ",(0,s.jsx)("code",{children:"127.0.0.1:5001"})]}),"\n",(0,s.jsxs)(n.p,{children:["Bob: ",(0,s.jsx)("code",{children:"127.0.0.1:5001"})]}),"\n",(0,s.jsx)(n.p,{children:"The next step involves configuring the protocol parameters for the ledger within our Hydra head. For the purposes of this tutorial, we'll modify the default Cardano layer 1 parameters to eliminate transaction fees, simplifying test interactions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"cardano-cli query protocol-parameters \\\n  | jq '.txFeeFixed = 0 |.txFeePerByte = 0 | .executionUnitPrices.priceMemory = 0 | .executionUnitPrices.priceSteps = 0' \\\n  > protocol-parameters.json\n"})}),"\n",(0,s.jsx)(n.p,{children:"This command adjusts the fees and pricing mechanisms to zero, ensuring that transactions within the Hydra head incur no costs."}),"\n",(0,s.jsx)(n.p,{children:"In summary, the Hydra head participants exchanged and agreed on:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["IP addresses and the port on which their ",(0,s.jsx)(n.code,{children:"hydra-node"})," will run"]}),"\n",(0,s.jsx)(n.li,{children:"A Hydra verification key to identify them in the head"}),"\n",(0,s.jsx)(n.li,{children:"A Cardano verification key to identify them on the blockchain"}),"\n",(0,s.jsx)(n.li,{children:"Protocol parameters to use in the Hydra head."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"step-3-start-the-hydra-node",children:"Step 3. Start the Hydra node"}),"\n",(0,s.jsxs)(n.p,{children:["Scripts are pre-published for all ",(0,s.jsx)(n.a,{href:"https://github.com/cardano-scaling/hydra/releases",children:"released"})," ",(0,s.jsx)(n.code,{children:"HYDRA_VERSION"}),"s of the ",(0,s.jsx)(n.code,{children:"hydra-node"})," and common Cardano networks. Consult the ",(0,s.jsx)(n.a,{href:"../docs/configuration#reference-scripts",children:"user manual"})," for guidance on publishing your own scripts."]}),"\n",(0,s.jsxs)(n.p,{children:["Start the ",(0,s.jsx)(n.code,{children:"hydra-node"})," using these parameters:"]}),"\n",(0,s.jsxs)(r.A,{queryString:"role",children:[(0,s.jsx)(o.A,{value:"alice",label:"Alice",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'hydra_version=1.1.0\nhydra-node \\\n  --node-id "alice-node" \\\n  --persistence-dir persistence-alice \\\n  --cardano-signing-key credentials/alice-node.sk \\\n  --hydra-signing-key credentials/alice-hydra.sk \\\n  --hydra-scripts-tx-id $(curl https://raw.githubusercontent.com/cardano-scaling/hydra/master/hydra-node/networks.json | jq -r ".preprod.\\"${hydra_version}\\"") \\\n  --ledger-protocol-parameters protocol-parameters.json \\\n  --testnet-magic 1 \\\n  --node-socket node.socket \\\n  --api-port 4001 \\\n  --listen 0.0.0.0:5001 \\\n  --api-host 0.0.0.0 \\\n  --peer 127.0.0.1:5002 \\\n  --hydra-verification-key credentials/bob-hydra.vk \\\n  --cardano-verification-key credentials/bob-node.vk\n'})})}),(0,s.jsx)(o.A,{value:"bob",label:"Bob",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'hydra_version=1.1.0\nhydra-node \\\n  --node-id "bob-node" \\\n  --persistence-dir persistence-bob \\\n  --cardano-signing-key credentials/bob-node.sk \\\n  --hydra-signing-key credentials/bob-hydra.sk \\\n  --hydra-scripts-tx-id $(curl https://raw.githubusercontent.com/cardano-scaling/hydra/master/hydra-node/networks.json | jq -r ".preprod.\\"${hydra_version}\\"") \\\n  --ledger-protocol-parameters protocol-parameters.json \\\n  --testnet-magic 1 \\\n  --node-socket node.socket \\\n  --api-port 4002 \\\n  --listen 0.0.0.0:5002 \\\n  --api-host 0.0.0.0 \\\n  --peer 127.0.0.1:5001 \\\n  --hydra-verification-key credentials/alice-hydra.vk \\\n  --cardano-verification-key credentials/alice-node.vk\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"Verify that the node is operational by establishing a WebSocket connection to the API port:"}),"\n",(0,s.jsxs)(r.A,{queryString:"role",children:[(0,s.jsx)(o.A,{value:"alice",label:"Alice",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"websocat ws://127.0.0.1:4001 | jq\n"})})}),(0,s.jsx)(o.A,{value:"bob",label:"Bob",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"websocat ws://127.0.0.1:4002 | jq\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"This opens a duplex connection, and you should see messages indicating successful connections like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "peer": "bob-node",\n  "seq": 0,\n  "tag": "PeerConnected",\n  "timestamp": "2023-08-17T18:25:02.903974459Z"\n}\n{\n  "headStatus": "Idle",\n  "hydraNodeVersion": "0.12.0-54db2265c257c755df98773c64754c9854d879e8",\n  "me": {\n    "vkey": "ab159b29b87b498fa060f6045cccf84ecd20cf623f7820ed130ffc849633a120"\n  },\n  "seq": 1,\n  "tag": "Greetings",\n  "timestamp": "2023-08-17T18:32:29.092329511Z"\n}\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"hydra-tui"})," to view the state of the node and perform actions\nas well. For example, to run the TUI for Alice:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"hydra-tui -k credentials/alice-funds.sk\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"step-4-open-a-hydra-head",children:"Step 4. Open a Hydra head"}),"\n",(0,s.jsxs)(n.p,{children:["Using the ",(0,s.jsx)(n.code,{children:"jq"})," enhanced ",(0,s.jsx)(n.code,{children:"websocat"})," session, we can now communicate with the ",(0,s.jsx)(n.code,{children:"hydra-node"})," through its WebSocket API on the terminal. This is a duplex connection and we can just insert commands directly."]}),"\n",(0,s.jsx)(n.p,{children:"Send this command to initialize a head through the WebSocket connection:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="Websocket API"',children:'{ "tag": "Init" }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The initiation process might take some time as it includes submitting a transaction on-chain. Upon successful initiation, both Hydra nodes and their clients will display a ",(0,s.jsx)(n.code,{children:"HeadIsInitializing"})," message, listing the parties required to commit."]}),"\n",(0,s.jsxs)(n.p,{children:["To commit funds to the head, choose which UTXO you would like to make available on layer 2. Use the HTTP API of ",(0,s.jsx)(n.code,{children:"hydra-node"})," to commit all funds given to ",(0,s.jsx)(n.code,{children:"{alice,bob}-funds.vk"})," beforehand:"]}),"\n",(0,s.jsxs)(r.A,{queryString:"role",children:[(0,s.jsx)(o.A,{value:"alice",label:"Alice",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cardano-cli query utxo \\\n  --address $(cat credentials/alice-funds.addr) \\\n  --out-file alice-commit-utxo.json\n\ncurl -X POST 127.0.0.1:4001/commit \\\n  --data @alice-commit-utxo.json \\\n  > alice-commit-tx.json\n\ncardano-cli latest transaction sign \\\n  --tx-file alice-commit-tx.json \\\n  --signing-key-file credentials/alice-funds.sk \\\n  --out-file alice-commit-tx-signed.json\n\ncardano-cli latest transaction submit --tx-file alice-commit-tx-signed.json\n"})})}),(0,s.jsx)(o.A,{value:"bob",label:"Bob",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cardano-cli query utxo \\\n  --address $(cat credentials/bob-funds.addr) \\\n  --out-file bob-commit-utxo.json\n\ncurl -X POST 127.0.0.1:4002/commit \\\n  --data @bob-commit-utxo.json \\\n  > bob-commit-tx.json\n\ncardano-cli latest transaction sign \\\n  --tx-file bob-commit-tx.json \\\n  --signing-key-file credentials/bob-funds.sk \\\n  --out-file bob-commit-tx-signed.json\n\ncardano-cli latest transaction submit --tx-file bob-commit-tx-signed.json\n"})})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Alternative: Don't commit anything"}),(0,s.jsxs)(n.p,{children:["If you don't want to commit any funds and only want to receive on layer 2, you can request an empty commit transaction as shown below (example for ",(0,s.jsx)(n.code,{children:"bob"}),"):"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'curl -X POST 127.0.0.1:4002/commit --data "{}" > bob-commit-tx.json\ncardano-cli latest transaction submit --tx-file bob-commit-tx.json\n'})})]}),"\n",(0,s.jsxs)(n.p,{children:["After you've prepared your transactions, the ",(0,s.jsx)(n.code,{children:"hydra-node"})," will find all UTXOs associated with the funds key and create a draft of the commit transaction. You'll then sign this transaction using the funds key and submit it to the Cardano layer 1 network."]}),"\n",(0,s.jsxs)(n.p,{children:["Once the ",(0,s.jsx)(n.code,{children:"hydra-node"})," sees this transaction, you should see a ",(0,s.jsx)(n.code,{children:"Committed"})," status displayed on your WebSocket connection."]}),"\n",(0,s.jsxs)(n.p,{children:["When both parties, ",(0,s.jsx)(n.code,{children:"alice"})," and ",(0,s.jsx)(n.code,{children:"bob"}),", have committed, the Hydra head will open automatically. You'll see a ",(0,s.jsx)(n.code,{children:"HeadIsOpen"})," message appear in the WebSocket session, confirming the activation of the head. This message will include details such as the starting balance and UTXO entries. Notably, these entries will match exactly those committed to the head, including transaction hashes and indices, ensuring transparency and consistency."]}),"\n",(0,s.jsx)(n.p,{children:"The head is now operational and ready for further activities."}),"\n",(0,s.jsx)(n.h2,{id:"step-5-use-the-hydra-head",children:"Step 5. Use the Hydra head"}),"\n",(0,s.jsxs)(n.p,{children:["In this step, we'll demonstrate a basic transaction between ",(0,s.jsx)(n.code,{children:"alice"})," and ",(0,s.jsx)(n.code,{children:"bob"})," using the Hydra head. Hydra Head operates as an isomorphic protocol, meaning that functionalities available on the Cardano layer 1 network are also available on the layer 2 network. This compatibility allows us to use familiar tools like ",(0,s.jsx)(n.code,{children:"cardano-cli"})," for transaction creation within the head."]}),"\n",(0,s.jsx)(n.p,{children:"In this example, we will transfer 10 ada from Alice to Bob. Adjust the transaction amount based on the balances previously committed to the head."}),"\n",(0,s.jsxs)(n.p,{children:["First, we need to select a UTXO to spend. We can find a UTXO by referring to the ",(0,s.jsx)(n.code,{children:"utxo"})," field in the most recent ",(0,s.jsx)(n.code,{children:"HeadIsOpen"})," or ",(0,s.jsx)(n.code,{children:"SnapshotConfirmed"})," messages. Alternatively, we can query the current UTXO set directly from the API:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"curl -s 127.0.0.1:4001/snapshot/utxo | jq\n"})}),"\n",(0,s.jsxs)(n.p,{children:["From the response, we would need to select a UTXO that is owned by ",(0,s.jsx)(n.code,{children:"alice"})," to\nspend:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'curl -s 127.0.0.1:4001/snapshot/utxo \\\n  | jq "with_entries(select(.value.address == \\"$(cat credentials/alice-funds.addr)\\"))" \\\n  > utxo.json\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Next, similar to the Cardano layer 1, build a transaction using the ",(0,s.jsx)(n.code,{children:"cardano-cli"})," that spends this UTXO and sends it to an address. If you haven't done so already, obtain the address of your partner to send the funds to (in this case, ",(0,s.jsx)(n.code,{children:"credentials/bob-funds.addr"}),", which ",(0,s.jsx)(n.code,{children:"alice"})," would not have automatically)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"LOVELACE=1000000\ncardano-cli latest transaction build-raw \\\n  --tx-in $(jq -r 'to_entries[0].key' < utxo.json) \\\n  --tx-out $(cat credentials/bob-funds.addr)+${LOVELACE} \\\n  --tx-out $(cat credentials/alice-funds.addr)+$(jq \"to_entries[0].value.value.lovelace - ${LOVELACE}\" < utxo.json) \\\n  --fee 0 \\\n  --out-file tx.json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that we need to use the ",(0,s.jsx)(n.code,{children:"build-raw"})," version because the client cannot (yet?) index the Hydra head directly and would not find the UTxO to spend. This means we also need to create a change output with the correct amount. Additionally, since we have set the protocol parameters of the head to have zero fees, we can use the ",(0,s.jsx)(n.code,{children:"--fee 0"})," option."]}),"\n",(0,s.jsxs)(n.p,{children:["Before submission, we need to sign the transaction to authorize spending ",(0,s.jsx)(n.code,{children:"alice"}),"'s funds:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cardano-cli latest transaction sign \\\n  --tx-body-file tx.json \\\n  --signing-key-file credentials/alice-funds.sk \\\n  --out-file tx-signed.json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Submit the transaction through the already open WebSocket connection. Generate the ",(0,s.jsx)(n.code,{children:"NewTx"})," command for WebSocket submission:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cat tx-signed.json | jq -c '{tag: \"NewTx\", transaction: .}'\n"})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Alternative: use the HTTP API endpoint"}),(0,s.jsx)(n.p,{children:"Alternatively, you can submit the transaction using the HTTP API endpoint:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"curl -X POST 127.0.0.1:4001/transaction \\\n  --data @tx-signed.json\n"})}),(0,s.jsx)(n.p,{children:"The HTTP endpoint provides a synchronous response with different status codes:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"200 OK"}),": Transaction was included in a confirmed snapshot (includes ",(0,s.jsx)(n.code,{children:"snapshotNumber"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"202 Accepted"}),": Transaction was accepted but not yet confirmed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"400 Bad Request"}),": Transaction was rejected due to validation errors (includes ",(0,s.jsx)(n.code,{children:"validationError"}),")"]}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["The transaction will be validated by both ",(0,s.jsx)(n.code,{children:"hydra-node"}),"s and either result in a\n",(0,s.jsx)(n.code,{children:"TxInvalid"})," message with a reason, or a ",(0,s.jsx)(n.code,{children:"TxValid"})," message and a\n",(0,s.jsx)(n.code,{children:"SnapshotConfirmed"})," with the new UTXO available in the head shortly after."]}),"\n",(0,s.jsx)(n.p,{children:"\ud83c\udf89 Congratulations, you just processed your first Cardano transaction off-chain\nin a Hydra head!"}),"\n",(0,s.jsx)(n.h2,{id:"step-6-closing-the-hydra-head",children:"Step 6. Closing the Hydra head"}),"\n",(0,s.jsx)(n.p,{children:"Any participant can initiate closing the Hydra head. Use the WebSocket API to submit the closing command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="Websocket API"',children:'{ "tag": "Close" }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"hydra-node"})," will then submit a protocol transaction with the last known snapshot to the Cardano network. A smart contract on layer 1 will check the snapshot signatures and confirm the head is closed. The WebSocket API sends a ",(0,s.jsx)(n.code,{children:"HeadIsClosed"})," message when this' Close' transaction is observed. Note that this can also happen if any other ",(0,s.jsx)(n.code,{children:"hydra-node"})," closes the head."]}),"\n",(0,s.jsxs)(n.admonition,{title:"Known bug",type:"caution",children:[(0,s.jsxs)(n.p,{children:["If the head does not close within approximately 30 seconds, you might need to submit the ",(0,s.jsx)(n.code,{children:"Close"})," command multiple times."]}),(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://github.com/cardano-scaling/hydra/issues/1039",children:"#1039"})," for details."]})]}),"\n",(0,s.jsxs)(n.p,{children:["The message will include a ",(0,s.jsx)(n.code,{children:"contestationDeadline"}),", set using the configurable ",(0,s.jsx)(n.code,{children:"--contestation-period"}),". Until this deadline, the closing snapshot can be contested with a more recent, multi-signed snapshot. Your ",(0,s.jsx)(n.code,{children:"hydra-node"})," will automatically contest for you if the closed snapshot is not the last known one."]}),"\n",(0,s.jsxs)(n.p,{children:["We need to wait now until the deadline has passed, which will be notified by the\n",(0,s.jsx)(n.code,{children:"hydra-node"})," through the WebSocket API with a ",(0,s.jsx)(n.code,{children:"ReadyToFanout"})," message."]}),"\n",(0,s.jsx)(n.p,{children:"At this point, any head member can issue the distribution of funds on layer 1.\nYou can do this through the WebSocket API one last time:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="Websocket API"',children:'{ "tag": "Fanout" }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This will submit a transaction to layer 1. Once successful, it will be indicated by a ",(0,s.jsx)(n.code,{children:"HeadIsFinalized"})," message that includes the distributed ",(0,s.jsx)(n.code,{children:"utxo"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To confirm, you can query the funds of both ",(0,s.jsx)(n.code,{children:"alice"})," and ",(0,s.jsx)(n.code,{children:"bob"})," on layer 1:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'echo "# UTxO of alice"\ncardano-cli query utxo --address $(cat credentials/alice-funds.addr) --out-file /dev/stdout | jq\n\necho "# UTxO of bob"\ncardano-cli query utxo --address $(cat credentials/bob-funds.addr) --out-file /dev/stdout | jq\n'})}),"\n",(0,s.jsx)(n.p,{children:"That's it. That's the full life cycle of a Hydra head."}),"\n",(0,s.jsx)(n.h2,{id:"bonus-be-a-good-citizen",children:"Bonus. Be a good citizen"}),"\n",(0,s.jsxs)(n.p,{children:["As we have taken our funds from the testnet faucet and we do not need them\nanymore, we can return all the remaining test ada of ",(0,s.jsx)(n.code,{children:"alice"})," and ",(0,s.jsx)(n.code,{children:"bob"})," back to the\nfaucet (before we throw away the keys):"]}),"\n",(0,s.jsxs)(r.A,{queryString:"role",children:[(0,s.jsx)(o.A,{value:"alice",label:"Alice",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'cardano-cli query utxo \\\n  --address $(cat credentials/alice-node.addr) \\\n  --address $(cat credentials/alice-funds.addr) \\\n  --out-file alice-return-utxo.json\n\ncardano-cli latest transaction build \\\n  $(cat alice-return-utxo.json | jq -j \'to_entries[].key | "--tx-in ", ., " "\') \\\n  --change-address addr_test1qqr585tvlc7ylnqvz8pyqwauzrdu0mxag3m7q56grgmgu7sxu2hyfhlkwuxupa9d5085eunq2qywy7hvmvej456flknswgndm3 \\\n  --out-file alice-return-tx.json\n\ncardano-cli latest transaction sign \\\n  --tx-file alice-return-tx.json \\\n  --signing-key-file credentials/alice-node.sk \\\n  --signing-key-file credentials/alice-funds.sk \\\n  --out-file alice-return-tx-signed.json\n\ncardano-cli latest transaction submit --tx-file alice-return-tx-signed.json\n'})})}),(0,s.jsx)(o.A,{value:"bob",label:"Bob",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'cardano-cli query utxo \\\n  --address $(cat credentials/bob-node.addr) \\\n  --address $(cat credentials/bob-funds.addr) \\\n  --out-file bob-return-utxo.json\n\ncardano-cli latest transaction build \\\n  $(cat bob-return-utxo.json | jq -j \'to_entries[].key | "--tx-in ", ., " "\') \\\n  --change-address addr_test1qqr585tvlc7ylnqvz8pyqwauzrdu0mxag3m7q56grgmgu7sxu2hyfhlkwuxupa9d5085eunq2qywy7hvmvej456flknswgndm3 \\\n  --out-file bob-return-tx.json\n\ncardano-cli latest transaction sign \\\n  --tx-file bob-return-tx.json \\\n  --signing-key-file credentials/bob-node.sk \\\n  --signing-key-file credentials/bob-funds.sk \\\n  --out-file bob-return-tx-signed.json\n\ncardano-cli latest transaction submit --tx-file bob-return-tx-signed.json\n'})})})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},27654:(e,n,a)=>{a.d(n,{A:()=>r});a(96540);var t=a(18215);const s={tabItem:"tabItem_Ymn6"};var i=a(74848);function r(e){let{children:n,hidden:a,className:r}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,r),hidden:a,children:n})}},95658:(e,n,a)=>{a.d(n,{A:()=>k});var t=a(96540),s=a(18215),i=a(23104),r=a(56347),o=a(205),d=a(57485),l=a(31682),c=a(70679);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:s}}=e;return{value:n,label:a,attributes:t,default:s}}))}(a);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:a}=e;const s=(0,r.W6)(),i=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,d.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function m(e){const{defaultValue:n,queryString:a=!1,groupId:s}=e,i=u(e),[r,d]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[l,h]=x({queryString:a,groupId:s}),[m,b]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,c.Dv)(a);return[s,(0,t.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:s}),j=(()=>{const e=l??m;return p({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{j&&d(j)}),[j]);return{selectedValue:r,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);d(e),h(e),b(e)}),[h,b,i]),tabValues:i}}var b=a(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=a(74848);function y(e){let{className:n,block:a,selectedValue:t,selectValue:r,tabValues:o}=e;const d=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),c=e=>{const n=e.currentTarget,a=d.indexOf(n),s=o[a].value;s!==t&&(l(n),r(s))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;n=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;n=d[a]??d[d.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":a},n),children:o.map((e=>{let{value:n,label:a,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>d.push(e),onKeyDown:h,onClick:c,...i,className:(0,s.A)("tabs__item",j.tabItem,i?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function g(e){let{lazy:n,children:a,selectedValue:i}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function v(e){const n=m(e);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",j.tabList),children:[(0,f.jsx)(y,{...n,...e}),(0,f.jsx)(g,{...n,...e})]})}function k(e){const n=(0,b.A)();return(0,f.jsx)(v,{...e,children:h(e.children)},String(n))}},8116:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/basic-hydra-head-31e4fded6123899b955e2ec45ad63e78.jpg"},28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(96540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);