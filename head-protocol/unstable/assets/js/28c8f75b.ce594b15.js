"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[6888],{85393:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"how-to/deposit-with-javascript-sdk","title":"Deposit tutorial with JavaScript SDK","description":"This guide provides a walkthrough on how to deposit (incrementally commit) UTxOs into an already open Hydra Head using JavaScript SDK.","source":"@site/docs/how-to/deposit-with-javascript-sdk.md","sourceDirName":"how-to","slug":"/how-to/deposit-with-javascript-sdk","permalink":"/head-protocol/unstable/docs/how-to/deposit-with-javascript-sdk","draft":false,"unlisted":false,"editUrl":"https://github.com/cardano-scaling/hydra/tree/master/docs/docs/how-to/deposit-with-javascript-sdk.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"userDocumentation","previous":{"title":"Commit/Deposit from a dApp","permalink":"/head-protocol/unstable/docs/how-to/best-practise-dapp"},"next":{"title":"Clients","permalink":"/head-protocol/unstable/docs/clients"}}');var r=t(74848),i=t(28453);const o={sidebar_position:10},a="Deposit tutorial with JavaScript SDK",d={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project structure",id:"project-structure",level:3},{value:"Step 1: Install dependencies",id:"step-1-install-dependencies",level:2},{value:"Step 2: Create configuration file",id:"step-2-create-configuration-file",level:2},{value:"Step 3: Simple deposit (entire UTxO)",id:"step-3-simple-deposit-entire-utxo",level:2},{value:"Step 4: Partial deposit with change",id:"step-4-partial-deposit-with-change",level:2},{value:"Step 5: Deposit script UTxO (Advanced)",id:"step-5-deposit-script-utxo-advanced",level:2},{value:"Step 5.1: Lock funds to a script (preparation)",id:"step-51-lock-funds-to-a-script-preparation",level:3},{value:"Step 5.2: Deposit the script UTxO",id:"step-52-deposit-the-script-utxo",level:3},{value:"Deposit variants",id:"deposit-variants",level:2},{value:"Monitoring deposits",id:"monitoring-deposits",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"References",id:"references",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"deposit-tutorial-with-javascript-sdk",children:"Deposit tutorial with JavaScript SDK"})}),"\n",(0,r.jsx)(n.p,{children:"This guide provides a walkthrough on how to deposit (incrementally commit) UTxOs into an already open Hydra Head using JavaScript SDK."}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"Deposit"})," (also called incremental commit) allows you to add UTxOs from Cardano Layer 1 into an open Hydra Head. This is useful when you want to add more funds to an active head without closing it."]}),"\n",(0,r.jsxs)(n.p,{children:["The deposit process involves building a blueprint transaction that describes what should be deposited, sending it to the ",(0,r.jsx)(n.code,{children:"hydra-node"}),", and then signing and submitting the returned transaction to the Cardano network"]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"You will need:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Node.js 18+"}),"\n",(0,r.jsxs)(n.li,{children:["A running Hydra node in ",(0,r.jsx)(n.code,{children:"Open"})," state"]}),"\n",(0,r.jsxs)(n.li,{children:["Hydra node API at ",(0,r.jsx)(n.code,{children:"http://localhost:4001"})]}),"\n",(0,r.jsxs)(n.li,{children:["Hydra SDK >= 1.1.0 (",(0,r.jsx)(n.a,{href:"https://hydrasdk.com",children:"https://hydrasdk.com"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Blockfrost API key for preprod: ",(0,r.jsx)(n.a,{href:"https://blockfrost.io/",children:"Register here"})]}),"\n",(0,r.jsxs)(n.li,{children:["Testnet ADA from ",(0,r.jsx)(n.a,{href:"https://docs.cardano.org/cardano-testnets/tools/faucet",children:"Cardano Faucet"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"project-structure",children:"Project structure"}),"\n",(0,r.jsx)(n.p,{children:"This tutorial uses the following directory structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plaintext",children:"deposit-demo/\n\u251c\u2500\u2500 config.ts              # Configuration and API client\n\u251c\u2500\u2500 simple-deposit.ts      # Deposit entire UTxO\n\u251c\u2500\u2500 partial-deposit.ts     # Deposit with change handling\n\u251c\u2500\u2500 lock-to-contract.ts    # Lock funds to a Plutus script\n\u251c\u2500\u2500 script-deposit.ts      # Deposit script UTxO (advanced)\n\u251c\u2500\u2500 .env                   # Environment variables\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can create this structure with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir deposit-demo\ncd deposit-demo\nnpm init -y\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:".env"})," file with your configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plaintext",children:"BLOCKFROST_API_KEY=your_blockfrost_preprod_api_key\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-1-install-dependencies",children:"Step 1: Install dependencies"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @hydra-sdk/cardano-wasm @hydra-sdk/core @hydra-sdk/transaction axios dotenv\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-2-create-configuration-file",children:"Step 2: Create configuration file"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"config.ts"})," with your wallet and Hydra node settings:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { AppWallet, NETWORK_ID, ProviderUtils, UTxOObject } from '@hydra-sdk/core'\nimport axios from 'axios'\n\nconst blockfrostProvider = new ProviderUtils.BlockfrostProvider({\n  apiKey: process.env.BLOCKFROST_API_KEY || '',\n  network: 'preprod',\n})\n\nexport const wallet = new AppWallet({\n  key: {\n    type: 'mnemonic',\n    words: 'your mnemonic words here'.split(' '),\n  },\n  networkId: NETWORK_ID.PREPROD,\n  fetcher: blockfrostProvider.fetcher,\n  submitter: blockfrostProvider.submitter,\n})\n\nexport const walletAddress = wallet.getAccount().baseAddressBech32\n\nexport class HydraApi {\n  private static client = axios.create({\n    baseURL: 'http://localhost:4001',\n    headers: { 'Content-Type': 'application/json' },\n  })\n\n  static async commit(utxo: UTxOObject) {\n    try {\n      const response = await this.client.post('/commit', { ...utxo })\n      return response.data as {\n        cborHex: string\n        description: string\n        txId: string\n        type: 'Tx ConwayEra'\n      }\n    } catch (error: any) {\n      console.error('Error during commit:', error)\n      throw error\n    }\n  }\n\n  static async partialDeposit(blueprintTxCbor: string, utxo: UTxOObject, changeAddress: string) {\n    try {\n      const response = await this.client.post('/commit', {\n        blueprintTx: {\n          cborHex: blueprintTxCbor,\n          type: 'Tx ConwayEra',\n          description: 'Partial deposit'\n        },\n        utxo,\n        changeAddress\n      })\n      return response.data as {\n        cborHex: string\n        description: string\n        txId: string\n        type: 'Tx ConwayEra'\n      }\n    } catch (error: any) {\n      console.error('Error during partial deposit:', error.message)\n      throw error\n    }\n  }\n\n  static async blueprintCommit(blueprintTxCbor: string, utxo: UTxOObject) {\n    try {\n      console.log('Blueprint commit body:', {\n        blueprintTx: {\n          cborHex: blueprintTxCbor,\n          type: 'Tx ConwayEra',\n          description: 'Blueprint commit'\n        },\n        utxo\n      })\n      const response = await this.client.post('/commit', {\n        blueprintTx: {\n          cborHex: blueprintTxCbor,\n          type: 'Tx ConwayEra',\n          description: 'Blueprint commit'\n        },\n        utxo\n      })\n      return response.data as {\n        cborHex: string\n        description: string\n        txId: string\n        type: 'Tx ConwayEra'\n      }\n    } catch (error: any) {\n      console.error('Error during blueprint commit:', error.message)\n      throw error\n    }\n  }\n\n  static async submitL1(tx: { cborHex: string; description: string; type: string }) {\n    const { data } = await this.client.post('/cardano-transaction', tx)\n    return data\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-3-simple-deposit-entire-utxo",children:"Step 3: Simple deposit (entire UTxO)"}),"\n",(0,r.jsx)(n.p,{children:"This is the simplest case - deposit an entire UTxO without change."}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"simple-deposit.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Converter } from '@hydra-sdk/core'\nimport { HydraApi, wallet, walletAddress } from './config'\n\nasync function main() {\n  // 1. Query UTxOs\n  const utxos = await wallet.queryUTxOs(walletAddress)\n  console.log('Found UTxOs:', utxos.length)\n\n  // 2. Select first UTxO to deposit\n  const utxoToDeposit = Converter.convertUTxOToUTxOObject([utxos[0]])\n\n  // 3. Request deposit from Hydra node\n  const depositTx = await HydraApi.commit(utxoToDeposit)\n  console.log('Deposit TX ID:', depositTx.txId)\n\n  // 4. Sign the transaction (Partial sign)\n  const signedTx = await wallet.signTx(depositTx.cborHex, true)\n\n  // 5. Submit to Cardano\n  await HydraApi.submitL1({\n    cborHex: signedTx,\n    description: 'Simple deposit',\n    type: 'Witnesses Tx ConwayEra',\n  })\n\n  console.log('\u2705 Deposit submitted!')\n}\n\nmain().catch(console.error)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx tsx simple-deposit.ts\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-4-partial-deposit-with-change",children:"Step 4: Partial deposit with change"}),"\n",(0,r.jsx)(n.p,{children:"Deposit only part of your UTxO's value and receive change back. This uses a blueprint transaction."}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"partial-deposit.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Converter, Deserializer, UTxO } from '@hydra-sdk/core'\nimport { TxBuilder } from '@hydra-sdk/transaction'\nimport { HydraApi, wallet, walletAddress } from './config'\n\nasync function main() {\n  // 1. Query UTxOs\n  const l1UTxOs = await wallet.queryUTxOs(walletAddress)\n\n  // 2. Define deposit amount\n  const depositLovelace = 50_000_000 // 50 ADA\n\n  // 3. Build blueprint transaction\n  const txBuilder = new TxBuilder({\n    isHydra: true,\n    params: { minFeeA: 0, minFeeB: 0 },\n  })\n\n  const blueprintTx = await txBuilder\n    .setInputs(l1UTxOs)\n    .addOutput({\n      address: walletAddress,\n      amount: [{ unit: 'lovelace', quantity: String(depositLovelace) }],\n    })\n    .setFee('0')\n    .complete()\n\n  // 4. Extract UTxOs used in blueprint\n  const txInputs = Deserializer.deserializeTx(blueprintTx.to_hex()).body().inputs()\n  const utxosToUse: UTxO[] = []\n\n  for (let i = 0; i < txInputs.len(); i++) {\n    const input = txInputs.get(i)\n    const utxo = l1UTxOs.find(\n      (u) =>\n        u.input.txHash === input.transaction_id().to_hex() &&\n        u.input.outputIndex === input.index()\n    )\n    if (utxo) utxosToUse.push(utxo)\n  }\n\n  // 5. Request deposit with blueprint and change address\n  const depositTx = await HydraApi.partialDeposit(\n    blueprintTx.to_hex(),\n    Converter.convertUTxOToUTxOObject(utxosToUse),\n    walletAddress // Change returned here\n  )\n\n  console.log('Deposit TX ID:', depositTx.txId)\n\n  // 6. Sign and submit\n  const signedTx = await wallet.signTx(depositTx.cborHex, true)\n  await HydraApi.submitL1({\n    cborHex: signedTx,\n    description: 'Partial deposit',\n    type: 'Witnesses Tx ConwayEra',\n  })\n\n  console.log('\u2705 Deposit complete!')\n}\n\nmain().catch(console.error)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx tsx partial-deposit.ts\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-5-deposit-script-utxo-advanced",children:"Step 5: Deposit script UTxO (Advanced)"}),"\n",(0,r.jsx)(n.p,{children:"For depositing a UTxO locked by a Plutus script, you need to provide the script, redeemer, and datum in the blueprint transaction."}),"\n",(0,r.jsx)(n.h3,{id:"step-51-lock-funds-to-a-script-preparation",children:"Step 5.1: Lock funds to a script (preparation)"}),"\n",(0,r.jsxs)(n.p,{children:["First, create a UTxO locked by a Plutus script. Create ",(0,r.jsx)(n.code,{children:"lock-to-contract.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { TxBuilder } from '@hydra-sdk/transaction'\nimport { wallet, walletAddress } from './config'\nimport { DatumUtils, Deserializer } from '@hydra-sdk/core'\n\nasync function lock() {\n  try {\n    // Always-true contract (for demo purposes)\n    const contract = {\n      cborHex:\n        '585e585c01010029800aba2aba1aab9eaab9dab9a4888896600264653001300600198031803800cc0180092225980099b8748008c01cdd500144c8cc892898050009805180580098041baa0028b200c180300098019baa0068a4d13656400401',\n      address: 'addr_test1wrf8enqnl26m0q5cfg73lxf4xxtu5x5phcrfjs0lcqp7uagh2hm3k'\n    }\n\n    const addressUTxO = await wallet.queryUTxOs(walletAddress)\n    console.log(`Found ${addressUTxO.length} UTxOs`)\n\n    // Build datum (example for time lock)\n    const { paymentCredentialHash: pubKeyHash } = Deserializer.deserializeAddress(walletAddress)\n    const system_unlocked_at = String(Date.now() + 10 * 60 * 1000) // now + 10 minutes\n\n    const datum = DatumUtils.mkConstr(0, [\n      DatumUtils.mkBytes(pubKeyHash!),\n      DatumUtils.mkInt(BigInt(system_unlocked_at))\n    ])\n\n    // Build transaction to lock funds\n    const txBuilder = new TxBuilder()\n    const txLock = await txBuilder\n      .setInputs(addressUTxO)\n      .addOutput({\n        address: contract.address,\n        amount: [{ unit: 'lovelace', quantity: String(5_000_000) }]\n      })\n      .txOutInlineDatumValue(datum)\n      .changeAddress(walletAddress)\n      .complete()\n\n    console.log('Lock TX:', txLock.to_hex())\n\n    // Sign and submit\n    const signedCbor = await wallet.signTx(txLock.to_hex())\n    console.log('Signed TX:', signedCbor)\n\n    const txHash = await wallet.submitTx(signedCbor)\n    console.log('\u2705 Locked funds to contract:', txHash)\n    console.log('Script address:', contract.address)\n  } catch (error) {\n    console.error('Error creating lock transaction:', error)\n  }\n}\n\nlock()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run it to create a script UTxO:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx tsx lock-to-contract.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example output:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Lock-to-contract.ts",src:t(27672).A+"",width:"1932",height:"446"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": Wait for the transaction to be confirmed on-chain before proceeding to the next step."]}),"\n",(0,r.jsx)(n.h3,{id:"step-52-deposit-the-script-utxo",children:"Step 5.2: Deposit the script UTxO"}),"\n",(0,r.jsxs)(n.p,{children:["Now deposit the script UTxO into the Hydra Head. Create ",(0,r.jsx)(n.code,{children:"script-deposit.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { emptyRedeemer, TxBuilder } from '@hydra-sdk/transaction'\nimport { HydraApi, wallet, walletAddress } from './config'\nimport { Converter, Deserializer } from '@hydra-sdk/core'\n\nasync function main() {\n  // 1. Define script details (from lock-to-contract.ts)\n  const contract = {\n    cborHex:\n      '585e585c01010029800aba2aba1aab9eaab9dab9a4888896600264653001300600198031803800cc0180092225980099b8748008c01cdd500144c8cc892898050009805180580098041baa0028b200c180300098019baa0068a4d13656400401',\n    address: 'addr_test1wrf8enqnl26m0q5cfg73lxf4xxtu5x5phcrfjs0lcqp7uagh2hm3k'\n  }\n\n  // 2. Query script UTxOs\n  const l1UTxOs = await wallet.queryUTxOs(contract.address)\n  console.log('Found contract UTxOs:', l1UTxOs.length)\n\n  // 3. Query wallet UTxOs (needed for fees)\n  const walletUtxos = await wallet.queryUTxOs(walletAddress)\n  console.log('Found wallet UTxOs:', walletUtxos.length)\n\n  // 4. Find the specific UTxO to deposit (change to your locked tx hash)\n  const depositTxId = '878e06dab94c40f52ea36069540b55a38be8c03919082e25fcc333531a0fd3b5'\n  const depositUTxO = l1UTxOs.find(utxo => utxo.input.txHash === depositTxId)\n\n  if (!depositUTxO) {\n    throw new Error('Deposit UTxO not found. Run lock-to-contract.ts first!')\n  }\n\n  console.log('Found deposit UTxO:', depositUTxO.input.txHash)\n\n  // 5. Build blueprint transaction with script input\n  const txBuilder = new TxBuilder({\n    isHydra: true,\n    params: { minFeeA: 0, minFeeB: 0 }\n  })\n\n  const redeemer = emptyRedeemer()\n  const blueprintTx = await txBuilder\n    .setInputs(walletUtxos)\n    .txIn(\n      depositUTxO.input.txHash,\n      depositUTxO.input.outputIndex,\n      depositUTxO.output.amount,\n      depositUTxO.output.address\n    )\n    .txInScript(contract.cborHex, 'V3')\n    .txInRedeemerValue(redeemer)\n    .addOutput({\n      address: walletAddress,\n      amount: depositUTxO.output.amount\n    })\n    .setFee('0')\n    .changeAddress(walletAddress)\n    .complete()\n\n  console.log('Blueprint TX:', blueprintTx.to_hex())\n  console.log('Blueprint TX ID:', Deserializer.deserializeTx(blueprintTx.to_hex()).transaction_hash().to_hex())\n\n  // 6. Request deposit from Hydra node\n  try {\n    const depositTx = await HydraApi.partialDeposit(\n      blueprintTx.to_hex(),\n      Converter.convertUTxOToUTxOObject([depositUTxO]),\n      walletAddress\n    )\n\n    console.log('Script deposit TX ID:', depositTx.txId)\n\n    // 7. Sign and submit\n    const signedTx = await wallet.signTx(depositTx.cborHex, true)\n    await HydraApi.submitL1({\n      cborHex: signedTx,\n      description: 'Script deposit',\n      type: 'Witnesses Tx ConwayEra',\n    })\n\n    console.log('\u2705 Script UTxO deposited!')\n  } catch (error: any) {\n    console.error('Error during script deposit:', error.message)\n    throw error\n  }\n}\n\nmain().catch(console.error)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx tsx script-deposit.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example output:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Script-deposit.ts",src:t(99525).A+"",width:"1940",height:"1176"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important notes"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Update ",(0,r.jsx)(n.code,{children:"depositTxId"})," with your actual transaction hash from ",(0,r.jsx)(n.code,{children:"lock-to-contract.ts"})]}),"\n",(0,r.jsx)(n.li,{children:"The script UTxO must exist on-chain before you can deposit it"}),"\n",(0,r.jsx)(n.li,{children:"Wait for the lock transaction to be confirmed before running the deposit"}),"\n",(0,r.jsxs)(n.li,{children:["This example uses ",(0,r.jsx)(n.code,{children:"emptyRedeemer()"})," for always-true contracts"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"txInScript()"})," and ",(0,r.jsx)(n.code,{children:"txInRedeemerValue()"})," for proper script input handling"]}),"\n",(0,r.jsx)(n.li,{children:"For production, use proper Plutus scripts with real validation logic"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"deposit-variants",children:"Deposit variants"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"HydraApi"})," class provides three methods for deposits:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// 1. Simple commit: Entire UTxO deposited (no blueprint, no change)\nHydraApi.commit(utxo)\n\n// 2. Partial deposit: With blueprint and change address (recommended for partial deposits)\n//    - blueprintTxCbor: Blueprint transaction describing outputs to deposit\n//    - utxo: UTxO(s) to use as input\n//    - changeAddress: Address to receive change\nHydraApi.partialDeposit(blueprintTxCbor, utxo, changeAddress)\n\n// 3. Blueprint commit: With blueprint, no change address (for script UTxOs)\n//    - blueprintTxCbor: Blueprint transaction with script inputs\n//    - utxo: Script UTxO(s) to deposit\nHydraApi.blueprintCommit(blueprintTxCbor, utxo)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-deposits",children:"Monitoring deposits"}),"\n",(0,r.jsx)(n.p,{children:"You can monitor deposit status via WebSocket:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import WebSocket from 'ws'\n\nconst ws = new WebSocket('ws://localhost:4001')\n\nws.on('message', (data) => {\n  const msg = JSON.parse(data.toString())\n  \n  if (msg.tag === 'Committed') {\n    console.log('\u2705 Deposit committed')\n  } else if (msg.tag === 'DepositActivated') {\n    console.log('\ud83d\udc40 Deposit activated on hydra')\n  } else if (msg.tag === 'DepositFinalized') {\n    console.log('\ud83d\udc40 Deposit finalized on hydra')\n  }\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Head not open"}),": Ensure your Hydra Head is in ",(0,r.jsx)(n.code,{children:"Open"})," state before depositing."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Insufficient funds"}),": Keep at least 5-10 ADA in your wallet for transaction fees."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Blueprint errors"}),": Verify that outputs meet minimum UTxO requirements and addresses are valid."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Script validation failed"}),": Check that your redeemer, execution units, and script CBOR are correct."]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://hydra.family/head-protocol/docs/how-to/incremental-commit",children:"Hydra Incremental Commit"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://hydra.family/head-protocol/docs/how-to/commit-blueprint",children:"Commit Blueprint"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"./commit-script-utxo",children:"Commit Script UTxO"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://hydrawallet-sdk.vercel.app/",children:"Hydra SDK Documentation"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},27672:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/lock-fund-to-contract-34c7f7d4384833ba69db06431ea56a2c.png"},99525:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/script-utxo-deposit-8015f7439c5b4e0ecae2e328bd887d7e.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);