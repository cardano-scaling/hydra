"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[1060],{9505:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"api-behavior","title":"API behavior","description":"This page will soon move into the API reference itself.","source":"@site/docs/api-behavior.md","sourceDirName":".","slug":"/api-behavior","permalink":"/head-protocol/unstable/docs/api-behavior","draft":false,"unlisted":false,"editUrl":"https://github.com/cardano-scaling/hydra/tree/master/docs/docs/api-behavior.md","tags":[],"version":"current","frontMatter":{},"sidebar":"userDocumentation","previous":{"title":"Get involved","permalink":"/head-protocol/unstable/docs/get-involved"}}');var s=n(74848),i=n(28453);const r={},a="API behavior",d={},c=[{value:"API configuration",id:"api-configuration",level:4},{value:"Replay of past server outputs",id:"replay-of-past-server-outputs",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"api-behavior",children:"API behavior"})}),"\n",(0,s.jsx)(t.admonition,{title:"Deprecated",type:"caution",children:(0,s.jsxs)(t.p,{children:["This page will soon move into the ",(0,s.jsx)(t.a,{href:"/api-reference",children:"API reference"})," itself."]})}),"\n",(0,s.jsxs)(t.p,{children:["This page documents the behavior of a ",(0,s.jsx)(t.code,{children:"hydra-node"})," at the API layer. That is, how the system behaves given ",(0,s.jsx)(t.a,{href:"pathname:///haddock/hydra-node/Hydra-API-ClientInput.html#t:ClientInput",children:"ClientInputs"})," and what ",(0,s.jsx)(t.a,{href:"pathname:///haddock/hydra-node/Hydra-API-ServerOutput.html#t:ServerOutput",children:"ServerOutputs"})," are produced in response to it. See also the ",(0,s.jsx)(t.a,{href:"/api-reference/",children:"API reference"})," for more details about individual API messages. The only discrepancy is http ",(0,s.jsx)(t.code,{children:"POST /commit"})," action which is not a state transition but a user action that submits a commit transaction which should produce ",(0,s.jsx)(t.code,{children:"Committed"})," output."]}),"\n",(0,s.jsxs)(t.p,{children:["The formalism uses ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/UML_state_machine",children:"UML statechart"})," language where transitions are labeled: ",(0,s.jsx)(t.code,{children:"input [condition] / output"}),". When two outputs (e.g. ",(0,s.jsx)(t.code,{children:"A"})," and ",(0,s.jsx)(t.code,{children:"B"}),") are expected we write ",(0,s.jsx)(t.code,{children:"A,B"}),", while ",(0,s.jsx)(t.code,{children:"{A,B}"})," denotes mutual exclusiveness of outputs."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://www.plantuml.com/plantuml/svg/ZP71JW8n48RlVOevge5mvs0mH2CN8RBnGZWKEiWaxNJJ3hfWV7VRBIw87hnrPhvl_-vq54K7sJchjcGGqDMo1uDn7QWMygpKucO9_VujJ9Y4jAK3yIiCsn86y8pQx2i_ziwHAFK3-YrTpQRp2WRhbhvEUl44pOMPr0TYRPDpj_8X9pscf4dCrP_uj4PEz3UNIwNQvcduXEzLav2Fgdb9hkbLpOJVZgVxfgQ0vhCtPrt7hPUnvmq5XwPy9eUChOzeO5WENLXfAtKSduCTubam2feEoh-esUzavcEabSL4BuGSGgrZn0Xw8nZ09DqIu_AqxA8fTQ7tBMxaR75btDsWRTCXtxCGXV_VmuwGpSxPBm00",alt:""})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://www.plantuml.com/plantuml/uml/ZP71JW8n48RlVOevge5mvs0mH2CN8RBnGZWKEiWaxNJJ3hfWV7VRBIw87hnrPhvl_-vq54K7sJchjcGGqDMo1uDn7QWMygpKucO9_VujJ9Y4jAK3yIiCsn86y8pQx2i_ziwHAFK3-YrTpQRp2WRhbhvEUl44pOMPr0TYRPDpj_8X9pscf4dCrP_uj4PEz3UNIwNQvcduXEzLav2Fgdb9hkbLpOJVZgVxfgQ0vhCtPrt7hPUnvmq5XwPy9eUChOzeO5WENLXfAtKSduCTubam2feEoh-esUzavcEabSL4BuGSGgrZn0Xw8nZ09DqIu_AqxA8fTQ7tBMxaR75btDsWRTCXtxCGXV_VmuwGpSxPBm00",children:"Edit this diagram"})}),"\n",(0,s.jsxs)(t.p,{children:["Not pictured is the ",(0,s.jsx)(t.code,{children:"CommandFailed"})," output, which is implicit emitted whenever an input is used when no transition below applies. Also non-state-changing or life-cycle relevant inputs like ",(0,s.jsx)(t.code,{children:"Greetings"})," are not mentioned, as well as outputs like ",(0,s.jsx)(t.code,{children:"InvalidInput"}),", ",(0,s.jsx)(t.code,{children:"NetworkConnected"})," and ",(0,s.jsx)(t.code,{children:"NetworkDisconnected"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"api-configuration",children:"API configuration"}),"\n",(0,s.jsx)(t.p,{children:"There are some options for API clients to control the server outputs. Server outputs are controlled using the following query parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"history=no"})," -> Prevents historical outputs display. All server outputs are recorded and when a client re-connects these outputs are replayed unless ",(0,s.jsx)(t.code,{children:"history=no"})," query param is used."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"snapshot-utxo=no"})," -> In case of a ",(0,s.jsx)(t.code,{children:"SnapshotConfirmed"})," message the ",(0,s.jsx)(t.code,{children:"utxo"})," field in the inner ",(0,s.jsx)(t.code,{children:"Snapshot"})," will be omitted."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"address=$address"})," -> In the case of a ",(0,s.jsx)(t.code,{children:"TxValid"})," or a ",(0,s.jsx)(t.code,{children:"TxInvalid"})," message, it will be filtered if its ",(0,s.jsx)(t.code,{children:"transaction"})," address does not contain a reference to the provided. In the case of a ",(0,s.jsx)(t.code,{children:"SnapshotConfirmed"})," message, it will be filtered if its ",(0,s.jsx)(t.code,{children:"confirmed"})," transactions do not contain an address that references the one provided."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"replay-of-past-server-outputs",children:"Replay of past server outputs"}),"\n",(0,s.jsxs)(t.p,{children:["When a ",(0,s.jsx)(t.code,{children:"hydra-node"})," restarts, by default it will load its history from persistence and replay previous server outputs to enable clients to re-establish their state upon re-connection. If that happens, obviously some of these outputs are not relevant anymore. One example of this is the ",(0,s.jsx)(t.code,{children:"NetworkConnected"})," and ",(0,s.jsx)(t.code,{children:"NetworkDisconnected"}),". To make it possible to determine the end of replayed history, client applications can use the ",(0,s.jsx)(t.code,{children:"Greetings"}),", which will be emitted on every ",(0,s.jsx)(t.code,{children:"hydra-node"})," start. See the ",(0,s.jsx)(t.code,{children:"hydra-tui"})," example client for how this is handled."]}),"\n",(0,s.jsxs)(t.p,{children:["Clients can optionally decide to skip history outputs and receive only the ",(0,s.jsx)(t.code,{children:"Greetings"})," and following ones. In order to do that they can use query param ",(0,s.jsx)(t.code,{children:"history=no"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["For example if the client wants to connect to a local ",(0,s.jsx)(t.code,{children:"hydra-node"})," and doesn't want to view the server history and prevent utxo display in ",(0,s.jsx)(t.code,{children:"SnapshotConfirmed"})," messages, they would connect using default port ",(0,s.jsx)(t.code,{children:"4001"})," and the full path ",(0,s.jsx)(t.code,{children:"ws://localhost:4001/?history=no"}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(96540);const s={},i=o.createContext(s);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);