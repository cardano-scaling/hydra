"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[404],{77372:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"userDocumentation":[{"type":"link","label":"Welcome","href":"/head-protocol/unstable/docs/","docId":"index","unlisted":false},{"type":"link","label":"Protocol overview","href":"/head-protocol/unstable/docs/protocol-overview","docId":"protocol-overview","unlisted":false},{"type":"link","label":"Known issues and limitations","href":"/head-protocol/unstable/docs/known-issues","docId":"known-issues","unlisted":false},{"type":"html","value":"<small><b>Tutorials</b></small>","defaultStyle":true,"className":"sidebar-header"},{"type":"link","label":"Getting started","href":"/head-protocol/unstable/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"... without Docker","href":"/head-protocol/unstable/docs/getting-started-without-docker","docId":"getting-started-without-docker","unlisted":false},{"type":"link","label":"Open a head on testnet","href":"/head-protocol/unstable/docs/tutorial/","docId":"tutorial/index","unlisted":false},{"type":"html","value":"<small><b>Documentation</b></small>","defaultStyle":true,"className":"sidebar-header"},{"type":"link","label":"Installation","href":"/head-protocol/unstable/docs/installation","docId":"installation","unlisted":false},{"type":"link","label":"Configuration","href":"/head-protocol/unstable/docs/configuration","docId":"configuration","unlisted":false},{"type":"category","label":"How to ...","items":[{"type":"link","label":"Commit using a blueprint","href":"/head-protocol/unstable/docs/how-to/commit-blueprint","docId":"how-to/commit-blueprint","unlisted":false},{"type":"link","label":"Submit a transaction","href":"/head-protocol/unstable/docs/how-to/submit-transaction","docId":"how-to/submit-transaction","unlisted":false},{"type":"link","label":"Use withdraw zero trick","href":"/head-protocol/unstable/docs/how-to/withdraw-zero","docId":"how-to/withdraw-zero","unlisted":false},{"type":"link","label":"Commit funds to an open Head","href":"/head-protocol/unstable/docs/how-to/incremental-commit","docId":"how-to/incremental-commit","unlisted":false},{"type":"link","label":"Decommit funds","href":"/head-protocol/unstable/docs/how-to/incremental-decommit","docId":"how-to/incremental-decommit","unlisted":false},{"type":"link","label":"Operate a Hydra node","href":"/head-protocol/unstable/docs/how-to/operating-hydra","docId":"how-to/operating-hydra","unlisted":false},{"type":"link","label":"Sideload Snapshot","href":"/head-protocol/unstable/docs/how-to/sideload-snapshot","docId":"how-to/sideload-snapshot","unlisted":false}],"collapsed":false,"collapsible":false},{"type":"link","label":"Clients","href":"/head-protocol/unstable/docs/clients","docId":"clients","unlisted":false},{"type":"link","label":"FAQs","href":"/head-protocol/unstable/docs/faqs","docId":"faqs","unlisted":false},{"type":"link","label":"Get involved","href":"/head-protocol/unstable/docs/get-involved","docId":"get-involved","unlisted":false},{"type":"html","value":"<small><b>Reference</b></small>","defaultStyle":true,"className":"sidebar-header"},{"type":"link","href":"https://github.com/cardano-scaling/hydra/releases","label":"Release notes"},{"type":"link","href":"/api-reference","label":"API reference"},{"type":"link","label":"API behavior","href":"/head-protocol/unstable/docs/api-behavior","docId":"api-behavior","unlisted":false},{"type":"link","href":"/benchmarks","label":"Benchmarks"}],"developerDocumentation":[{"type":"link","label":"About Hydra","href":"/head-protocol/unstable/docs/dev/","docId":"dev/index","unlisted":false},{"type":"category","label":"Architecture","items":[{"type":"link","label":"Event sourcing","href":"/head-protocol/unstable/docs/dev/architecture/event-sourcing","docId":"dev/architecture/event-sourcing","unlisted":false},{"type":"link","label":"Networking","href":"/head-protocol/unstable/docs/dev/architecture/networking","docId":"dev/architecture/networking","unlisted":false}],"collapsed":false,"collapsible":false,"href":"/head-protocol/unstable/docs/dev/architecture/"},{"type":"link","label":"Specification","href":"/head-protocol/unstable/docs/dev/specification","docId":"dev/specification","unlisted":false},{"type":"link","label":"Protocol","href":"/head-protocol/unstable/docs/dev/protocol","docId":"dev/protocol","unlisted":false},{"type":"link","label":"Commit funds to a Head","href":"/head-protocol/unstable/docs/dev/commit","docId":"dev/commit","unlisted":false},{"type":"link","label":"Handling rollbacks","href":"/head-protocol/unstable/docs/dev/rollbacks/","docId":"dev/rollbacks/index","unlisted":false},{"type":"html","value":"<small><b>Background</b></small>","defaultStyle":true,"className":"sidebar-header"},{"type":"link","label":"Scalability","href":"/head-protocol/unstable/docs/dev/scalability","docId":"dev/scalability","unlisted":false},{"type":"link","label":"Layer 2 solutions","href":"/head-protocol/unstable/docs/dev/layer-two","docId":"dev/layer-two","unlisted":false},{"type":"html","value":"<small><b>Reference</b></small>","defaultStyle":true,"className":"sidebar-header"},{"type":"link","label":"Haskell packages","href":"/head-protocol/unstable/docs/dev/haskell-packages","docId":"dev/haskell-packages","unlisted":false},{"type":"link","href":"/adr","label":"Architecture Decision Records"}]},"docs":{"api-behavior":{"id":"api-behavior","title":"API behavior","description":"This page will soon move into the API reference itself.","sidebar":"userDocumentation"},"clients":{"id":"clients","title":"Clients","description":"While the hydra-node tracks the main chain for opening/closing heads and connects to other nodes to form an overlay network, it also offers a client API to use and administrate the Hydra head. This API can be used directly by applications integrating with Hydra through SDKs, or via third-party components.","sidebar":"userDocumentation"},"configuration":{"id":"configuration","title":"Configuration","description":"Running a Hydra head involves operating a Hydra node connected to other Hydra nodes and a Cardano node. The entire configuration of the hydra-node is managed through command-line options. Use the --help option to see a full list of available commands:","sidebar":"userDocumentation"},"dev/architecture/event-sourcing":{"id":"dev/architecture/event-sourcing","title":"Event sourcing","description":"The hydra-node is an event sourced application. This means that the main logic is processing inputs (also called commands) and produces events. These events are saved and loaded to persist application state across restarts. Also, most events are transformed to outputs and can be observed on the hydra-node API.","sidebar":"developerDocumentation"},"dev/architecture/index":{"id":"dev/architecture/index","title":"Architecture","description":"This document describes the architecture of the current implementation","sidebar":"developerDocumentation"},"dev/architecture/networking":{"id":"dev/architecture/networking","title":"Networking","description":"This page provides details about the Hydra networking layer, through which hydra nodes exchange off-chain protocol messages. The off-chain protocol relies heavily on the correct operation of the multicast abstraction (broadcast in our fully connected topology here) in the way it is specified and the following sections explain our realization in the Hydra node implementation.","sidebar":"developerDocumentation"},"dev/commit":{"id":"dev/commit","title":"Commit funds to a Head","description":"In order to transact inside of a Head on L2, users need to have some funds available to spend. In addition to public key outputs users can also directly commit script outputs to a Head in order to accommodate different use cases.","sidebar":"developerDocumentation"},"dev/haskell-packages":{"id":"dev/haskell-packages","title":"Haskell packages","description":"The Hydra project consists of several Haskell packages, each serving distinct parts of the protocol. While some packages are internal and tailored specifically to Hydra, others offer more generic functionalities that could benefit other projects tackling similar challenges. Comprehensive Haddock documentation is provided for all packages.","sidebar":"developerDocumentation"},"dev/index":{"id":"dev/index","title":"About Hydra","description":"If you\'ve read the user manual and want to learn more about the Hydra protocol, its inner workings, and its implementation, you\'re in the right place.","sidebar":"developerDocumentation"},"dev/layer-two":{"id":"dev/layer-two","title":"Layer 2 solutions","description":"This section provides an overview of various types of layer 2 solutions, along with several examples.","sidebar":"developerDocumentation"},"dev/protocol":{"id":"dev/protocol","title":"Protocol","description":"Additional implementation-specific documentation for the Hydra Head protocol and extensions like incremental decommits.","sidebar":"developerDocumentation"},"dev/rollbacks/index":{"id":"dev/rollbacks/index","title":"Handling rollbacks","description":"Rollbacks are fundamental to the operation of the Cardano chain. Any application built on Cardano, including Hydra, must anticipate occasional rollbacks, which are reversals of confirmed transactions due to chain reorganization or other consensus adjustments.","sidebar":"developerDocumentation"},"dev/scalability":{"id":"dev/scalability","title":"Scalability","description":"Decentralized systems, including blockchains, face fundamental scalability limitations due to their reliance on global transaction replication to ensure security. This constraint is commonly known as the blockchain trilemma, where decentralization, security, and scalability counteract each other. Although Cardano employs an efficient consensus algorithm, its global distribution among thousands of block-producing nodes results in block creation approximately every twenty seconds. During peak transaction times, this can lead to increased settlement times as transactions may not be included in the immediate next block.","sidebar":"developerDocumentation"},"dev/specification":{"id":"dev/specification","title":"Specification","description":"The specification is currently written in LaTeX and can be edited in the hydra-formal-specification repository. You can view the rendered version below or download it for fullscreen viewing here.","sidebar":"developerDocumentation"},"faqs":{"id":"faqs","title":"FAQs","description":"What is Hydra?","sidebar":"userDocumentation"},"get-involved":{"id":"get-involved","title":"Get involved","description":"The Hydra Head protocol implementation is an open-source project built on the principles of transparency, collaboration, and community-driven development. As part of the broader Cardano ecosystem, Hydra welcomes contributions from developers, researchers, and enthusiasts who are committed to advancing decentralized technologies. By participating in the Hydra project, you join a global community dedicated to enhancing Cardano\u2019s scalability, security, and efficiency.","sidebar":"userDocumentation"},"getting-started":{"id":"getting-started","title":"Getting started","description":"To get started quickly, we\'ll walk you through the standard demo setup, which includes:","sidebar":"userDocumentation"},"getting-started-without-docker":{"id":"getting-started-without-docker","title":"Getting started without Docker","description":"This tutorial guides you through the same setup as the docker-based one, but without using Docker containers and only using executables and scripts.","sidebar":"userDocumentation"},"how-to/commit-blueprint":{"id":"how-to/commit-blueprint","title":"Commit using a blueprint","description":"This guide provides a walkthrough on using cardano-cli to assemble the necessary components for committing funds to a head using a blueprint transaction.","sidebar":"userDocumentation"},"how-to/incremental-commit":{"id":"how-to/incremental-commit","title":"Commit funds to an open Head","description":"Assuming we already have an open Head and some funds on the L1 we would like to commit.","sidebar":"userDocumentation"},"how-to/incremental-decommit":{"id":"how-to/incremental-decommit","title":"Decommit funds","description":"To take out some UTXO present in an open head and send it back to layer 1, you need to do a so-called decommit.","sidebar":"userDocumentation"},"how-to/operating-hydra":{"id":"how-to/operating-hydra","title":"Operate a Hydra node","description":"This page guides Hydra users on troubleshooting issues when running their instances of hydra-node and participating in a Hydra head.","sidebar":"userDocumentation"},"how-to/sideload-snapshot":{"id":"how-to/sideload-snapshot","title":"Sideload Snapshot","description":"This guide provides a walkthrough on how to use POST /snapshot to adopt a given confirmed snapshot to \\"unstuck\\" an open head.","sidebar":"userDocumentation"},"how-to/submit-transaction":{"id":"how-to/submit-transaction","title":"Submit a transaction","description":"This section describes how to submit a transaction to an already open head using the NewTx command of the WebSocket API.","sidebar":"userDocumentation"},"how-to/withdraw-zero":{"id":"how-to/withdraw-zero","title":"Use withdraw zero trick","description":"In this how-to we want to show how you can use the \\"wihtdraw zero trick\\" in Hydra. Until CIP-112 is implemented, there is only one way to run a script once per transaction - the so-called withdraw zero trick. Refer to the CIP or this design pattern document for more details about the general approach.","sidebar":"userDocumentation"},"index":{"id":"index","title":"Welcome","description":"This section is a manual for users interested in running a Hydra node.","sidebar":"userDocumentation"},"installation":{"id":"installation","title":"Installation","description":"Selecting the right installation method for the hydra-node depends on your requirements and technical preferences. Below are the primary methods to get started quickly and efficiently.","sidebar":"userDocumentation"},"known-issues":{"id":"known-issues","title":"Known issues and limitations","description":"Before running a Hydra node on the Cardano mainnet, it is important to be aware of several known issues and limitations. Operating a Hydra node requires a deep understanding of the underlying infrastructure, and you may risk your funds if you are unfamiliar with the implementation and usage processes.","sidebar":"userDocumentation"},"protocol-overview":{"id":"protocol-overview","title":"Protocol overview","description":"Hydra is the layer 2 scalability solution for Cardano, designed to increase transaction speed through low latency and high throughput while minimizing transaction costs. Hydra Head is the first protocol of the Hydra family that lays the foundation for more advanced deployment scenarios using isomorphic, multi-party state channels. For an introduction to the protocol, refer to these two blog posts:","sidebar":"userDocumentation"},"tutorial/index":{"id":"tutorial/index","title":"Open a head on testnet","description":"This tutorial demonstrates how to use hydra-node on Cardano\'s preprod testing environment to open a layer 2 state channel between two participants using the Hydra Head protocol. We\'ll also use Mithril for fast node bootstrapping.","sidebar":"userDocumentation"}}}}')}}]);