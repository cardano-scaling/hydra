"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[8234],{25441:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"auctions/always-on-service-single/index","title":"Always-on delegated auction service (single head)","description":"The always-on delegated auction is a persistent service for DApps that runs multiple auctions on layer 2, using a single Hydra head. This enables an as-a-service business model.","source":"@site/use-cases/auctions/always-on-service-single/index.md","sourceDirName":"auctions/always-on-service-single","slug":"/auctions/always-on-service-single/","permalink":"/head-protocol/unstable/use-cases/auctions/always-on-service-single/","draft":false,"unlisted":false,"editUrl":"https://github.com/cardano-scaling/hydra/tree/master/docs/use-cases/auctions/always-on-service-single/index.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_label":"Auctions-as-a-service: single","sidebar_position":4},"sidebar":"defaultSidebar","previous":{"title":"SDK for delegated voucher auctions","permalink":"/head-protocol/unstable/use-cases/auctions/delegated-voucher-sdk/"},"next":{"title":"Auctions-as-a-service: multi","permalink":"/head-protocol/unstable/use-cases/auctions/always-on-service-multi/"}}');var n=i(74848),t=i(28453);const o={sidebar_label:"Auctions-as-a-service: single",sidebar_position:4},r="Always-on delegated auction service (single head)",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Features and scope",id:"features-and-scope",level:2},{value:"Remaining limitations",id:"remaining-limitations",level:2},{value:"Prerequisites from Hydra technical roadmap",id:"prerequisites-from-hydra-technical-roadmap",level:2}];function c(e){const s={h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"always-on-delegated-auction-service-single-head",children:"Always-on delegated auction service (single head)"})}),"\n",(0,n.jsx)(s.p,{children:"The always-on delegated auction is a persistent service for DApps that runs multiple auctions on layer 2, using a single Hydra head. This enables an as-a-service business model."}),"\n",(0,n.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,n.jsx)(s.p,{children:"Looking beyond a single application, our goal is to foster the development of an ecosystem of Hydra-enabled DApps on Cardano. To achieve this, we need to establish a viable business model for delegates that provides Hydra heads with the ability to host DApp processes as a service. The delegated voucher auction can be adapted to this model by transitioning from its previous single-use Hydra head to a persistent Hydra head that can host multiple auctions continuously without closing."}),"\n",(0,n.jsx)(s.h2,{id:"features-and-scope",children:"Features and scope"}),"\n",(0,n.jsx)(s.p,{children:"To be determined."}),"\n",(0,n.jsx)(s.h2,{id:"remaining-limitations",children:"Remaining limitations"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"Delegates have the ability to censor bidders from submitting bids to the auction."}),"\n",(0,n.jsx)(s.li,{children:"Delegates on layer 2 are tasked with ensuring that the standing bid of an auction can only be replaced by a new bid that exceeds it by the minimum increment specified in the auction terms. However, bidders receive multi-signed proof for every confirmed bid, providing incontrovertible evidence against delegates in cases of any foul play."}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"prerequisites-from-hydra-technical-roadmap",children:"Prerequisites from Hydra technical roadmap"}),"\n",(0,n.jsx)(s.p,{children:"To be determined."})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,s,i)=>{i.d(s,{R:()=>o,x:()=>r});var a=i(96540);const n={},t=a.createContext(n);function o(e){const s=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),a.createElement(t.Provider,{value:s},e.children)}}}]);