"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[8346],{30276:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"profiling","title":"Profiling Hydra scripts","description":"This tutorial explains how to profile Hydra scripts and is intended for contributors to the hydra-node.","source":"@site/benchmarks/profiling.md","sourceDirName":".","slug":"/profiling","permalink":"/head-protocol/unstable/benchmarks/profiling","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"defaultSidebar","previous":{"title":"End-to-end benchmarks","permalink":"/head-protocol/unstable/benchmarks/end-to-end-benchmarks"},"next":{"title":"Ledger micro-benchmarks","permalink":"/head-protocol/unstable/benchmarks/ledger"}}');var r=n(74848),s=n(28453);const o={sidebar_position:10},a="Profiling Hydra scripts",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Isolating a transaction to profile",id:"isolating-a-transaction-to-profile",level:2},{value:"Compiling a script for profiling",id:"compiling-a-script-for-profiling",level:2},{value:"Acquiring an executable script",id:"acquiring-an-executable-script",level:2},{value:"Running the script and analyzing the results",id:"running-the-script-and-analyzing-the-results",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"profiling-hydra-scripts",children:"Profiling Hydra scripts"})}),"\n",(0,r.jsxs)(t.p,{children:["This tutorial explains how to profile Hydra scripts and is intended for contributors to the ",(0,r.jsx)(t.code,{children:"hydra-node"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(t.p,{children:["For every pull request and the latest ",(0,r.jsx)(t.code,{children:"master"})," branch, we compute typical transaction costs in terms of size, memory, and CPU usage of the Hydra protocol transactions on Cardano. You can view the latest results ",(0,r.jsx)(t.a,{href:"https://hydra.family/head-protocol/benchmarks/transaction-cost/",children:"here"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Such benchmarks provide a comprehensive overview of the constraints for a given transaction, including maximum transaction size and percent of maximum memory and CPU budget. For a detailed assessment, we analyze ",(0,r.jsx)(t.em,{children:"all"})," scripts that run within a given transaction."]}),"\n",(0,r.jsxs)(t.p,{children:["To gain detailed insights into ",(0,r.jsx)(t.em,{children:"what exactly"})," results in excessive memory or CPU usage, we need to profile the scripts as they validate a transaction."]}),"\n",(0,r.jsxs)(t.p,{children:["Follow the instructions provided by the ",(0,r.jsx)(t.a,{href:"https://github.com/input-output-hk/plutus",children:(0,r.jsx)(t.code,{children:"Plutus"})})," project ",(0,r.jsx)(t.a,{href:"https://plutus.readthedocs.io/en/latest/howtos/profiling-scripts.html",children:"here"}),", adapted for the ",(0,r.jsx)(t.code,{children:"hydra"})," codebase."]}),"\n",(0,r.jsx)(t.h2,{id:"isolating-a-transaction-to-profile",children:"Isolating a transaction to profile"}),"\n",(0,r.jsxs)(t.p,{children:["First, isolate the specific Cardano transaction you want to profile. For example, let's investigate what the ",(0,r.jsx)(t.code,{children:"collectCom"})," transaction\nfor ",(0,r.jsx)(t.code,{children:"5"})," parties in the ",(0,r.jsx)(t.code,{children:"tx-cost"})," benchmark is spending most time and memory on."]}),"\n",(0,r.jsxs)(t.p,{children:["The benchmark computes many transactions with the growing number of participants in ",(0,r.jsx)(t.code,{children:"computeCollectComCost"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-haskell",children:"computeCollectComCost =\n  catMaybes <$> mapM compute [1 .. 100]\n where\n  compute numParties = do\n    (st, tx) <- generate $ genCollectComTx numParties\n    let utxo = getKnownUTxO st\n    case checkSizeAndEvaluate tx utxo of\n      -- [...]\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Here, isolate the transaction for ",(0,r.jsx)(t.code,{children:"5"})," parties by altering the function to ",(0,r.jsx)(t.code,{children:"maybe [] pure <$> compute 5"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"compiling-a-script-for-profiling",children:"Compiling a script for profiling"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"collectCom"})," transaction utilizes the ",(0,r.jsx)(t.code,{children:"vCommit"})," and ",(0,r.jsx)(t.code,{children:"vHead"})," validator scripts. To enable profiling, add the following directive to the modules ",(0,r.jsx)(t.a,{href:"pathname:///haddock/hydra-plutus/Hydra-Contract-Commit.html",children:(0,r.jsx)(t.code,{children:"Hydra.Contract.Commit"})})," and ",(0,r.jsx)(t.a,{href:"pathname:///haddock/hydra-plutus/Hydra-Contract-Head.html",children:(0,r.jsx)(t.code,{children:"Hydra.Contract.Head"})}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"{-# OPTIONS_GHC -fplugin-opt PlutusTx.Plugin:profile-all #-}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"acquiring-an-executable-script",children:"Acquiring an executable script"}),"\n",(0,r.jsxs)(t.p,{children:["You can achieve this using\n",(0,r.jsx)(t.a,{href:"pathname:///haddock/hydra-tx/Hydra-Ledger-Cardano-Evaluate.html#v:prepareTxScripts",children:(0,r.jsx)(t.code,{children:"prepareTxScripts"})}),".\nTo acquire and save the fully applied scripts from the transaction onto disk, run:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-haskell",children:'-- [...]\n(st, tx) <- generate $ genCollectComTx numParties\nlet utxo = getKnownUTxO st\nscripts <- either die pure $ prepareTxScripts tx utxo\nforM_ (zip [1 ..] scripts) $ \\(i, s) -> writeFileBS ("scripts-" <> show i <> ".flat") s\n-- [...]\n'})}),"\n",(0,r.jsxs)(t.p,{children:["After running the corresponding code (",(0,r.jsx)(t.code,{children:"tx-cost"})," in our example), you will have\n",(0,r.jsx)(t.code,{children:"scripts-{1,2,3,4,5}.flat"})," files in the current directory."]}),"\n",(0,r.jsxs)(t.p,{children:["Unfortunately, it's quite hard to distinguish them, but script sizes should help in identifying the larger ",(0,r.jsx)(t.code,{children:"vHead"})," script from the smaller ",(0,r.jsx)(t.code,{children:"vCommit"})," script. In the profile, the names of original ",(0,r.jsx)(t.code,{children:"plutus-tx"})," functions will be retained, which should make it clear at the latest."]}),"\n",(0,r.jsx)(t.h2,{id:"running-the-script-and-analyzing-the-results",children:"Running the script and analyzing the results"}),"\n",(0,r.jsx)(t.p,{children:"To perform this step, use the following tools available through Nix:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"nix shell nixpkgs#flamegraph github:input-output-hk/plutus#x86_64-linux.plutus.library.plutus-project-924.hsPkgs.plutus-core.components.exes.traceToStacks github:input-output-hk/plutus#x86_64-linux.plutus.library.plutus-project-924.hsPkgs.plutus-core.components.exes.uplc\n"})}),"\n",(0,r.jsxs)(t.p,{children:["To produce the profile log as explained above, you need to use a different input format since ",(0,r.jsx)(t.code,{children:"prepareTxScripts"})," retains the original name annotations."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"uplc evaluate -t -i scripts-1.flat --if flat-namedDeBruijn --trace-mode LogsWithBudgets -o logs\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Check for a ",(0,r.jsx)(t.code,{children:"logs"})," file output. If not present, ensure the script was compiled with profiling enabled as specified."]}),"\n",(0,r.jsx)(t.p,{children:"Finally, you can inspect the logs or generate flame graph SVGs as outlined in the original tutorial:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"cat logs | traceToStacks | flamegraph.pl > cpu.svg\ncat logs | traceToStacks --column 2 | flamegraph.pl > mem.svg\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Here's an example of a memory profile for a ",(0,r.jsx)(t.code,{children:"5"})," party ",(0,r.jsx)(t.code,{children:"collectCom"}),":"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(49257).A+"",width:"1200",height:"342"})}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:"Open the SVG in a browser to interactively search and explore the profile in detail."})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},49257:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/profile-mem-1962b88f74167af737797653b64ca737.svg"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(96540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);