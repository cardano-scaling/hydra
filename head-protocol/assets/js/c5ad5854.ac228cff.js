"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[2844],{6538:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"dev/commit","title":"Commit funds to a Head","description":"In order to transact inside of a Head on L2, users need to have some funds available to spend. In addition to public key outputs users can also directly commit script outputs to a Head in order to accommodate different use cases.","source":"@site/docs/dev/commit.md","sourceDirName":"dev","slug":"/dev/commit","permalink":"/head-protocol/docs/dev/commit","draft":false,"unlisted":false,"editUrl":"https://github.com/cardano-scaling/hydra/tree/master/docs/docs/dev/commit.md","tags":[],"version":"current","frontMatter":{},"sidebar":"developerDocumentation","previous":{"title":"Protocol","permalink":"/head-protocol/docs/dev/protocol"},"next":{"title":"Handling rollbacks","permalink":"/head-protocol/docs/dev/rollbacks/"}}');var s=o(74848),i=o(28453);const r={},c="Commit funds to a Head",d={},a=[];function l(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"commit-funds-to-a-head",children:"Commit funds to a Head"})}),"\n",(0,s.jsx)(t.p,{children:"In order to transact inside of a Head on L2, users need to have some funds available to spend. In addition to public key outputs users can also directly commit script outputs to a Head in order to accommodate different use cases."}),"\n",(0,s.jsx)(t.p,{children:"Depending on when a commit should happens we can distinguish two types of commits:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Before the head is open: ",(0,s.jsx)(t.strong,{children:"Commit"})]}),"\n",(0,s.jsxs)(t.li,{children:["When the head is already open: ",(0,s.jsx)(t.strong,{children:"Incremental commit"})]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Both types of commits share the same API of requesting a transaction via ",(0,s.jsx)(t.code,{children:"POST /commit"})," where the only difference is the returned transaction being either a ",(0,s.jsx)(t.code,{children:"commitTx"})," or ",(0,s.jsx)(t.code,{children:"depositTx"})," in the L1 protocol. See ",(0,s.jsx)(t.a,{href:"/head-protocol/docs/dev/protocol",children:"protocol"})," or ",(0,s.jsx)(t.a,{href:"/head-protocol/docs/dev/specification",children:"specification"})," for more details."]}),"\n",(0,s.jsxs)(t.p,{children:["Depending on what is to be committed, a user needs to decide between a ",(0,s.jsx)(t.em,{children:"simple"})," or ",(0,s.jsx)(t.em,{children:"blueprint"})," commit request:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Simple"})," request to commit a public key output to a Head in which case they only need to show the JSON representation of the ",(0,s.jsx)(t.code,{children:"UTxO"})," they want to spend. The returned transaction then needs to be signed by the correct private key to prove ownership."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Blueprint"})," requests allow to provide a ",(0,s.jsx)(t.em,{children:"blueprint"})," transaction together with the ",(0,s.jsx)(t.code,{children:"UTxO"})," it spends to be able to have more fine grained control over the created commit/deposit transaction. This is crucial when committing script ",(0,s.jsx)(t.code,{children:"UTxO"})," where more control over some of the transaction attributes is needed (redeemers, reference inputs, validity bounds, etc.)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"Note that blueprint transaction outputs are ignored as all the value will be locked into the Hydra L1 scripts (commit or deposit validators)."})}),"\n",(0,s.jsx)(t.admonition,{type:"danger",children:(0,s.jsxs)(t.p,{children:["TODO: Add section about ",(0,s.jsx)(t.em,{children:"why"})," the design is this way here, about how to make scripts spendable in a a Hydra head commit/deposit or link a document in the user manual, or consolidate this document further into ",(0,s.jsx)(t.a,{href:"/head-protocol/docs/dev/protocol",children:"protocol"})," and user manual. See ",(0,s.jsx)(t.a,{href:"https://github.com/cardano-scaling/hydra/issues/1655",children:"https://github.com/cardano-scaling/hydra/issues/1655"})]})}),"\n",(0,s.jsxs)(t.p,{children:["For concrete examples on how to use the commit API see the ",(0,s.jsx)(t.a,{href:"./../how-to/incremental-commit",children:"simple"})," and ",(0,s.jsx)(t.a,{href:"./../how-to/commit-blueprint",children:"blueprint"})," commit how-tos in the user manual."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>c});var n=o(96540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);