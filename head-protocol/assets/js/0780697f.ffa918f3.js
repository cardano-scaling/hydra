"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[2564],{12973:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"how-to/withdraw-zero","title":"Use withdraw zero trick","description":"In this how-to we want to show how you can use the \\"wihtdraw zero trick\\" in Hydra. Until CIP-112 is implemented, there is only one way to run a script once per transaction - the so-called withdraw zero trick. Refer to the CIP or this design pattern document for more details about the general approach.","source":"@site/docs/how-to/withdraw-zero.md","sourceDirName":"how-to","slug":"/how-to/withdraw-zero","permalink":"/head-protocol/docs/how-to/withdraw-zero","draft":false,"unlisted":false,"editUrl":"https://github.com/cardano-scaling/hydra/tree/master/docs/docs/how-to/withdraw-zero.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"userDocumentation","previous":{"title":"Submit a transaction","permalink":"/head-protocol/docs/how-to/submit-transaction"},"next":{"title":"Commit funds to an open Head","permalink":"/head-protocol/docs/how-to/incremental-commit"}}');var a=r(74848),s=r(28453);const i={sidebar_position:4},o="Use withdraw zero trick",c={},d=[{value:"Rewarding script",id:"rewarding-script",level:2},{value:"Withdraw zero transaction",id:"withdraw-zero-transaction",level:2},{value:"Registering script - not needed!",id:"registering-script---not-needed",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},{Details:r}=t;return r||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"use-withdraw-zero-trick",children:"Use withdraw zero trick"})}),"\n",(0,a.jsxs)(t.p,{children:['In this how-to we want to show how you can use the "wihtdraw zero trick" in Hydra. Until ',(0,a.jsx)(t.a,{href:"https://cips.cardano.org/cip/CIP-0112",children:"CIP-112"})," is implemented, there is only one way to run a script once per transaction - the so-called withdraw zero trick. Refer to the CIP or ",(0,a.jsx)(t.a,{href:"https://github.com/Anastasia-Labs/design-patterns/blob/main/stake-validator/STAKE-VALIDATOR.md",children:"this design pattern document"})," for more details about the general approach."]}),"\n",(0,a.jsxs)(t.p,{children:["The Hydra L2 ledger is mostly ",(0,a.jsx)(t.em,{children:"isomorphic"})," to the L1 Cardano ledger. This means that it honors all the same ledger rules and transactions use the exact same format. However, some things related to the Cardano Proof-of-Stake consensus are represented different because they would not make much sense on an L2. For example, transactions that ",(0,a.jsx)(t.a,{href:"https://docs.cardano.org/developer-resources/transaction-tutorials/stake-transaction",children:"register stake certificates"})," or ",(0,a.jsx)(t.a,{href:"https://docs.cardano.org/developer-resources/transaction-tutorials/withdraw-transaction",children:"withdraw rewards"}),' don\'t work as-is on Hydra. However, for the purpose of "transaction-level validation", the withdraw zero trick can still be used as the Hydra L2 ledger ',(0,a.jsx)(t.strong,{children:"mocks script reward accounts"})," on the fly."]}),"\n",(0,a.jsx)(t.h2,{id:"rewarding-script",children:"Rewarding script"}),"\n",(0,a.jsxs)(t.p,{children:["We are going to use the ",(0,a.jsx)(t.a,{href:"https://github.com/cardano-scaling/hydra/blob/master/hydra-plutus/src/Hydra/Contract/Dummy.hs#L42-L53",children:"dummyRewardingScript"})," as an example, which only validates the fact that we are in a ",(0,a.jsx)(t.code,{children:"RewardingScript"})," context. Using GHCI we can determine the stake address and write the ",(0,a.jsx)(t.code,{children:"rewarding.plutus"})," text envelope file for ",(0,a.jsx)(t.code,{children:"cardano-cli"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-haskell",children:'cabal repl hydra-plutus\n> import Prelude\n> import Hydra.Contract.Dummy\n> import Hydra.Cardano.Api\n> script = PlutusScript dummyRewardingScript\n> serialiseAddress $ makeStakeAddress (Testnet $ NetworkMagic 42) (StakeCredentialByScript $ hashScript script)\n"stake_test17rekjamvnjyn3c3tcjpxe7ea20g7aek9vdqkaa3jefknz3gc066pt"\n> writeFileTextEnvelope (File "../rewarding.plutus") Nothing script\nRight ()\n'})}),"\n",(0,a.jsx)(t.h2,{id:"withdraw-zero-transaction",children:"Withdraw zero transaction"}),"\n",(0,a.jsxs)(t.p,{children:['We can construct a transaction that withdraws zero lovelace from the rewarding script\'s "account". Usually, other purposes like spending a UTxO would require the reward script to run, but here we just assume there exists such a UTxO in the L2 state. You can initialize an ',(0,a.jsx)(t.a,{href:"../configuration#offline-mode",children:"offline head"})," for an easy demo set-up:"]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"Setup with offline head"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'cat > utxo.json <<EOF\n{\n  "0000000000000000000000000000000000000000000000000000000000000000#0": {\n    "address": "addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z",\n    "value": {\n      "lovelace": 100000000\n    }\n  }\n}\nEOF\n'})}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"cabal run hydra-node:exe:hydra-node -- \\\n  --offline-head-seed 0001 \\\n  --initial-utxo utxo.json \\\n  --ledger-protocol-parameters hydra-cluster/config/protocol-parameters.json \\\n  --hydra-signing-key demo/alice.sk\n"})})]}),"\n",(0,a.jsx)(t.p,{children:"Then, build, sign and submit the transaction that runs the rewarding script:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",metastring:'title="Withdraw zero transaction"',children:'cardano-cli latest transaction build-raw \\\n  --tx-in 0000000000000000000000000000000000000000000000000000000000000000#0 \\\n  --tx-in-collateral 0000000000000000000000000000000000000000000000000000000000000000#0 \\\n  --tx-out addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z+100000000 \\\n  --withdrawal stake_test17zadf9dcekqn9cxkg3q68y56f4d6ujxsv8l6kq4kz2cuduc3gm35e+0 \\\n  --withdrawal-script-file rewarding.plutus \\\n  --withdrawal-redeemer-value "{}" \\\n  --withdrawal-execution-units "(10000000000, 14000000)" \\\n  --protocol-params-file hydra-cluster/config/protocol-parameters.json \\\n  --fee 0 \\\n  --out-file tx.json\n\ncardano-cli latest transaction sign \\\n  --tx-body-file tx.json \\\n  --signing-key-file hydra-cluster/config/credentials/alice-funds.sk \\\n  --out-file tx-signed.json\n\ncat tx-signed.json | jq -c \'{tag: "NewTx", transaction: .}\' | websocat ws://localhost:4001\n'})}),"\n",(0,a.jsx)(t.h2,{id:"registering-script---not-needed",children:"Registering script - not needed!"}),"\n",(0,a.jsx)(t.p,{children:"You might have noticed that registering the stake address was not needed - this is different than on the Cardano L1!"}),"\n",(0,a.jsx)(t.p,{children:"While you don't need to do it, you can still submit a transaction that registers the stake address and the L2 ledger will just ignore it:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",metastring:'title="Register stake transaction"',children:'cardano-cli latest stake-address registration-certificate \\\n  --stake-address stake_test17zadf9dcekqn9cxkg3q68y56f4d6ujxsv8l6kq4kz2cuduc3gm35e \\\n  --key-reg-deposit-amt 2000000 \\\n  --out-file reg.cert\n\ncardano-cli latest transaction build-raw \\\n  --tx-in 0000000000000000000000000000000000000000000000000000000000000000#0 \\\n  --tx-in-collateral 0000000000000000000000000000000000000000000000000000000000000000#0 \\\n  --tx-out addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z+98000000 \\\n  --certificate reg.cert \\\n  --certificate-script-file rewarding.plutus \\\n  --certificate-redeemer-value "{}" \\\n  --certificate-execution-units "(10000000000, 14000000)" \\\n  --protocol-params-file hydra-cluster/config/protocol-parameters.json \\\n  --fee 0 \\\n  --out-file tx.json\n\ncardano-cli latest transaction sign \\\n  --tx-body-file tx.json \\\n  --signing-key-file hydra-cluster/config/credentials/alice-funds.sk \\\n  --out-file tx-signed.json\n\ncat tx-signed.json | jq -c \'{tag: "NewTx", transaction: .}\' | websocat ws://localhost:4001\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var n=r(96540);const a={},s=n.createContext(a);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);