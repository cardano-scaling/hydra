"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[7053],{65613:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"dev/architecture/event-sourcing","title":"Event sourcing","description":"The hydra-node is an event sourced application. This means that the main logic is processing inputs (also called commands) and produces events. These events are saved and loaded to persist application state across restarts. Also, most events are transformed to outputs and can be observed on the hydra-node API.","source":"@site/docs/dev/architecture/event-sourcing.md","sourceDirName":"dev/architecture","slug":"/dev/architecture/event-sourcing","permalink":"/head-protocol/docs/dev/architecture/event-sourcing","draft":false,"unlisted":false,"editUrl":"https://github.com/cardano-scaling/hydra/tree/master/docs/docs/dev/architecture/event-sourcing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"developerDocumentation","previous":{"title":"Architecture","permalink":"/head-protocol/docs/dev/architecture/"},"next":{"title":"Networking","permalink":"/head-protocol/docs/dev/architecture/networking"}}');var a=t(74848),d=t(28453);const r={},o="Event sourcing",i={},c=[{value:"Default event source and sinks",id:"default-event-source-and-sinks",level:2},{value:"Examples",id:"examples",level:2},{value:"What to test",id:"what-to-test",level:3}];function l(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",p:"p",ul:"ul",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"event-sourcing",children:"Event sourcing"})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"hydra-node"})," is an event sourced application. This means that the main logic is processing ",(0,a.jsx)(s.em,{children:"inputs"})," (also called commands) and produces ",(0,a.jsx)(s.em,{children:"events"}),". These events are saved and loaded to persist application state across restarts. Also, most events are transformed to ",(0,a.jsx)(s.em,{children:"outputs"})," and can be observed on the ",(0,a.jsx)(s.code,{children:"hydra-node"})," API."]}),"\n",(0,a.jsxs)(s.p,{children:["On application startup, the ",(0,a.jsx)(s.a,{href:"https://hydra.family/head-protocol/haddock/hydra-node/Hydra-Node.html#v:hydrate",children:(0,a.jsx)(s.code,{children:"hydrate"})})," function is called to load all events using a given ",(0,a.jsx)(s.a,{href:"https://hydra.family/head-protocol/haddock/hydra-node/Hydra-Events.html#t:EventSource",children:(0,a.jsx)(s.code,{children:"EventSource"})})," and while doing so, re-emits those events to all provided ",(0,a.jsx)(s.a,{href:"https://hydra.family/head-protocol/haddock/hydra-node/Hydra-Events.html#t:EventSink",children:(0,a.jsx)(s.code,{children:"EventSink"})})," instances. The resulting ",(0,a.jsx)(s.a,{href:"https://hydra.family/head-protocol/haddock/hydra-node/Hydra-Node.html#t:HydraNode",children:(0,a.jsx)(s.code,{children:"HydraNode"})})," will then enter the main loop of ",(0,a.jsx)(s.code,{children:"hydra-node"})," and process inputs into state changes and effects via function ",(0,a.jsx)(s.a,{href:"https://hydra.family/head-protocol/haddock/hydra-node/Hydra-Node.html#v:stepHydraNode",children:(0,a.jsx)(s.code,{children:"stepHydraNode"})}),". All state changes of a Hydra node are based on ",(0,a.jsx)(s.a,{href:"https://hydra.family/head-protocol/haddock/hydra-node/Hydra-Events.html#t:StateEvent",children:(0,a.jsx)(s.code,{children:"StateEvent"})})," values and consequently get emitted to all ",(0,a.jsx)(s.code,{children:"eventSinks"})," of the ",(0,a.jsx)(s.code,{children:"HydraNode"})," handle. Also, the ",(0,a.jsx)(s.code,{children:"eventSource"})," of the same may be used later to to load events on-demand, for example to produce a history of server outputs."]}),"\n",(0,a.jsx)(s.h2,{id:"default-event-source-and-sinks",children:"Default event source and sinks"}),"\n",(0,a.jsxs)(s.p,{children:["The default event source and sink used by the ",(0,a.jsx)(s.code,{children:"hydra-node"})," is ",(0,a.jsx)(s.code,{children:"FileBased"}),", which uses an append-only plain JSON file to persist events in a file name ",(0,a.jsx)(s.code,{children:"state"}),". This single file is located in the ",(0,a.jsx)(s.code,{children:"hydra-node"})," persistence directory, which is specified by the ",(0,a.jsx)(s.code,{children:"--persistence-dir"})," command line option."]}),"\n",(0,a.jsxs)(s.p,{children:["As explained in the consequences of ",(0,a.jsx)(s.a,{href:"https://hydra.family/head-protocol/adr/29",children:"ADR29"}),", the API server of the ",(0,a.jsx)(s.code,{children:"hydra-node"})," is also an event sink, which means that all events are sent to the API server and may be further submitted as ",(0,a.jsx)(s.a,{href:"https://hydra.family/head-protocol/haddock/hydra-node/Hydra-API-ServerOutput.html#t:ServerOutput",children:(0,a.jsx)(s.code,{children:"ServerOutput"})})," to clients of the API server. See ",(0,a.jsx)(s.a,{href:"https://hydra.family/head-protocol/haddock/hydra-node/Hydra-API-Server.html#v:mkTimedServerOutputFromStateEvent",children:(0,a.jsx)(s.code,{children:"mkTimedServerOutputFromStateEvent"})})," for which events are mapped to server outputs."]}),"\n",(0,a.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(s.p,{children:["Besides the efault event source and sinks, there are two examples in the ",(0,a.jsx)(s.code,{children:"hydra-node:examples"})," library:"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.a,{href:"https://github.com/cardano-scaling/hydra/blob/master/hydra-node/examples/Hydra/Events/UDP.hs",children:(0,a.jsx)(s.code,{children:"Hydra.Events.UDP"})}),": A simple UDP sink that sends all events to a UDP socket. This is a simple example of an event sink that can be used to send events to other applications or services."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.a,{href:"https://github.com/cardano-scaling/hydra/blob/master/hydra-node/examples/Hydra/Events/S3.hs",children:(0,a.jsx)(s.code,{children:"Hydra.Events.S3"})}),": This example shows how to use AWS S3 to create a complete event store - that is, an event source and sink. It uses the ",(0,a.jsx)(s.code,{children:"amazonka"})," to interact with S3 and store events in a bucket. This is a more complex example that demonstrates how to use an external service to store events."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"what-to-test",children:"What to test"}),"\n",(0,a.jsx)(s.p,{children:"When implementing an event source or sink, you might want to consider testing the following, as also demonstrated by the main implementations and examples above:"}),"\n",(0,a.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Event store (sink + source)"]}),"\n",(0,a.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Completeness: Any events stored by ",(0,a.jsx)(s.code,{children:"putEvent"})," are returned by ",(0,a.jsx)(s.code,{children:"getEvents"}),"/",(0,a.jsx)(s.code,{children:"sourceEvents"}),"\n",(0,a.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","For continuous, non-continuous and sequences of duplicate events"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Concurrent use of ",(0,a.jsx)(s.code,{children:"putEvent"})," and ",(0,a.jsx)(s.code,{children:"sourceEvents"})," is possible"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Event sink only"]}),"\n",(0,a.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Whether ",(0,a.jsx)(s.code,{children:"putEvent"})," results in desired effect"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Concurrent use of ",(0,a.jsx)(s.code,{children:"putEvent"})," is possible"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Event source only"]}),"\n",(0,a.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ",'Whether previously "primed" events are loaded by ',(0,a.jsx)(s.code,{children:"sourceEvents"})]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Concurrent use of ",(0,a.jsx)(s.code,{children:"sourceEvents"})," is possible"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","General: allocated resources are released (use with/bracket pattern)"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>o});var n=t(96540);const a={},d=n.createContext(a);function r(e){const s=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(d.Provider,{value:s},e.children)}}}]);