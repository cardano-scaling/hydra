<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Hydra Head protocol documentation Blog</title>
        <link>https://hydra.family/head-protocol/adr</link>
        <description>Hydra Head protocol documentation Blog</description>
        <lastBuildDate>Sat, 05 Jun 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[1. Record Architecture Decisions
]]></title>
            <link>https://hydra.family/head-protocol/adr/1</link>
            <guid>https://hydra.family/head-protocol/adr/1</guid>
            <pubDate>Sat, 05 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/1#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/1#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>We are in search for a means to describe our technical architecture.</p>
<p>We are a small team working in a very lean and agile way (XP), so we naturally prefer also light-weight documentation methods which also accommodate change easily.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/1#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>We will use <em>Architecture Decision Records</em>, as described by Michael Nygard in this <a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions" target="_blank" rel="noopener noreferrer">article</a>.</li>
<li>We will follow the convention of storing those ADRs as Markdown formatted documents stored under <code>docs/adr</code> directory, as exemplified in Nat Pryce's <a href="https://github.com/npryce/adr-tools" target="_blank" rel="noopener noreferrer">adr-tools</a>. This does not imply we will be using <code>adr-tools</code> itself.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/1#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<p>See Michael Nygard's article, linked above.</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[2. Reactive Core
]]></title>
            <link>https://hydra.family/head-protocol/adr/2</link>
            <guid>https://hydra.family/head-protocol/adr/2</guid>
            <pubDate>Sun, 06 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/2#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/2#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>We are looking for a way of expressing the Hydra Head protocol logic in a Hydra node.</p>
<p>The Hydra Head protocol is defined as a <em>State machine</em> in the paper, whose transitions are inputs that come from different sources which can emit outputs to other instances of the state machine or the mainchain. See the <a href="https://iohk.io/en/research/library/papers/hydrafast-isomorphic-state-channels/" target="_blank" rel="noopener noreferrer">FC2021</a> paper for details.</p>
<p>It should also be easy to review / give feedback to researchers.</p>
<p>We are familiar with React's <a href="https://react-redux.js.org/" target="_blank" rel="noopener noreferrer">redux</a> way of structuring applications, which is inspired by <a href="https://guide.elm-lang.org/architecture/" target="_blank" rel="noopener noreferrer">The Elm Architecture</a>, which itself is a simplification of <a href="https://en.wikipedia.org/wiki/Functional_reactive_programming" target="_blank" rel="noopener noreferrer">Functional Reactive Programming</a> principles.</p>
<p>We have experienced benefits with <em>Event Sourcing</em> in the domain of persistence in the past.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/2#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p>Implements the Hydra Head core logic as a <em>loop</em> that:</p>
<ol>
<li>Consumes <em>input events</em> from an event <em>queue</em></li>
<li>Applies each <em>event</em> to the current <em>state</em> yielding potentially an <em>updated state</em> and a sequence of <em>effects</em></li>
<li>Execute all <em>effects</em>.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/2#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<p>The internal state is only ever changed through <em>Events</em>.</p>
<p>The core state machine <em>transition</em> function <em>is pure</em> and reviewing it requires minimal Haskell knowledge.</p>
<p>Side effects are all handled at the <code>node</code> level.</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[3. Asynchronous Duplex Client API]]></title>
            <link>https://hydra.family/head-protocol/adr/3</link>
            <guid>https://hydra.family/head-protocol/adr/3</guid>
            <pubDate>Mon, 07 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/3#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/3#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>The <a href="https://hydra.family/head-protocol/adr/2"><em>reactive</em> nature of the Hydra node</a> means that
clients produce a <em>stream</em> of <em>inputs</em> to a node which in turns issues a stream
of <em>outputs</em> representing the outcome of previous inputs or resulting from
interaction with peers in the network.</p>
<p>For example, a client may send a <em>command</em> as <em>input</em>, upon which the node might
do something. When that something is finished, a <em>output</em> does indicate that.
However, there might also be an <em>output</em> emitted to the client when another peer
interacted with "our" node.</p>
<p>Queries, messages by clients which do only fetch information from the node, are
not in scope of this ADR.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/3#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>We use a single, full-duplex communication channel per client connected to a Hydra node</li>
<li>This is implemented using a simple <a href="https://datatracker.ietf.org/doc/html/rfc6455" target="_blank" rel="noopener noreferrer">Websocket</a> with messages corresponding to <code>Input</code>s and <code>Output</code>s.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/3#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>Clients needing a synchronous API need to implement it on top</li>
<li>Clients can receive <em>outputs</em> decorrelated from any <em>inputs</em> and at any time</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[4. Use Handle to model Effects
]]></title>
            <link>https://hydra.family/head-protocol/adr/4</link>
            <guid>https://hydra.family/head-protocol/adr/4</guid>
            <pubDate>Tue, 08 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/4#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/4#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>Given we are structuring Hydra node as a <a href="https://hydra.family/head-protocol/adr/2">reactive core</a> we need a way to ensure a strict separation of pure and impure (or effectful) code.</p>
<p>We want to be able to test those impure/effectful parts of the code. This requires a means for exchanging the actual implementation for e.g. the function to send messages over a network.</p>
<p>Also we want the ability to swap implementations not only for testing, but also be able
to accommodate different usage scenarios, e.g. use a different middleware
depending on peer configuration.</p>
<p>In Haskell there are various common <em>patterns</em> to model effects:</p>
<ul>
<li><a href="http://okmij.org/ftp/tagless-final/index.html" target="_blank" rel="noopener noreferrer">Tagless final encoding</a> also known as <em>MTL-style</em> although using typeclasses to implement is <a href="https://www.foxhound.systems/blog/final-tagless/" target="_blank" rel="noopener noreferrer">not necessary</a>, whereby Effect(s) are expressed as typeclass(es) which are propagated as constraints</li>
<li><a href="https://reasonablypolymorphic.com/blog/freer-monads/" target="_blank" rel="noopener noreferrer">Free monads</a>, or any variant thereof like Eff, freer, extensible-effects, whereby effect(s) are expressed as ADTs which are <em>interpreted</em> in the context of an <em>Effect stack</em></li>
<li><a href="https://jaspervdj.be/posts/2018-03-08-handle-pattern.html" target="_blank" rel="noopener noreferrer">Handle</a> pattern also known as <em>record-of-functions</em> whereby effects are grouped together in a datatype with a single record constructor</li>
</ul>
<p>(These tradeoffs also appear in other functional languages like
<a href="https://medium.com/@dogwith1eye/prefer-records-of-functions-to-interfaces-d6413af4d2c3" target="_blank" rel="noopener noreferrer">F#</a>)</p>
<p>There is not one most favored solution though and we all have various
experiences with these techniques.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/4#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p>Effectful components of the Hydra node (our code) will be defined using the <em>Handle pattern</em>.</p>
<p>There might be other techniques in use because of libraries used etc.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/4#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<p>For example, the network component is defined as:</p>
<div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">newtype</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">Network</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">Network</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token hvariable">broadcast</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">::</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">MonadThrow</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">HydraMessage</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There might be multiple <code>createNetwork :: m (Network m)</code> functions</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[5. Use io-classes
]]></title>
            <link>https://hydra.family/head-protocol/adr/5</link>
            <guid>https://hydra.family/head-protocol/adr/5</guid>
            <pubDate>Wed, 09 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/5#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/5#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>Although we try to contain the use of IO at the outskirt of the Hydra node using <a href="https://hydra.family/head-protocol/adr/4">Handle pattern</a> and <a href="https://hydra.family/head-protocol/adr/2">Reactive core</a>, low-level effects are still needed in various places, notably to define concurrently executing actions, and thus need to be tested</p>
<p>Testing asynchronous and concurrent code is notoriously painful</p>
<p>The ouroboros consensus test suite and <a href="https://github.com/cardano-scaling/hydra-sim" target="_blank" rel="noopener noreferrer">hydra-sim</a> simulation have demonstrated the effectiveness of abstracting concurrent primitives through the use of typeclasses (MTL-style pattern) and being able to run these as pure code, harvesting and analysing produced execution traces.</p>
<p>There are other such libraries, e.g. <a href="https://hackage.haskell.org/package/concurrency" target="_blank" rel="noopener noreferrer">concurrency</a> and <a href="https://hackage.haskell.org/package/dejafu" target="_blank" rel="noopener noreferrer">dejafu</a>, as well as the venerable <a href="https://hackage.haskell.org/package/exceptions" target="_blank" rel="noopener noreferrer">exceptions</a> (for abstracting exception throwing).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/5#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p>For all IO effects covered by the library, use functions from typeclasses exposed by <a href="https://github.com/input-output-hk/ouroboros-network/tree/e338f2cf8e1078fbda9555dd2b169c6737ef6774/io-classes" target="_blank" rel="noopener noreferrer">io-classes</a>. As of this writing, this covers:</p>
<ul>
<li>All STM operations through <code>MonadSTM</code></li>
<li>Time and timers through <code>MonadTime</code> and <code>MonadTimer</code></li>
<li>Concurrency through <code>MonadAsync</code>, <code>MonadFork</code></li>
<li>Exceptions through <code>MonadThrow</code>, <code>MonadCatch</code> and <code>MonadMask</code></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/5#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<p>We can use <code>io-sim</code> to evaluate IO-ish functions easily</p>
<p>Instantiation to concrete IO is pushed at the outermost layer, eg. in the <code>Main</code> or tests.</p>
<p>As some of these functions and typeclasses clash with the
<a href="https://github.com/input-output-hk/cardano-prelude" target="_blank" rel="noopener noreferrer">cardano-prelude</a> we might
want to define a custom prelude (candidate for another ADR)</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[6. Network broadcasts all messages
]]></title>
            <link>https://hydra.family/head-protocol/adr/6</link>
            <guid>https://hydra.family/head-protocol/adr/6</guid>
            <pubDate>Thu, 10 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/6#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/6#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>The simplified Head protocol in the <a href="https://iohk.io/en/research/library/papers/hydrafast-isomorphic-state-channels/" target="_blank" rel="noopener noreferrer">Hydra
paper</a>
requires <em>unicast</em> and <em>multicast</em> messaging between participants. However, this
can be simplified to only <em>multicast</em> by also sending <code>AckTx</code> messages to all
participants and removing the necessity for <code>ConfTx</code>.</p>
<p>There is already a battle-tested implementation for <em>broadcasting</em> messages over
networks with any kind of topology (mesh), namely the
<a href="https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network/src/Ouroboros/Network/TxSubmission" target="_blank" rel="noopener noreferrer">TxSubmission</a>
protocol of <code>ouroroboros-network</code>.</p>
<p>If the network connects only to interested peers, <em>broadcast</em> is essentially the
<em>multicast</em> required by the protocol. If this is not the case, some addressing
scheme is required, and <em>broadcast</em> would be a waste of resources.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/6#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>All messages emitted by a Hydra node through the network component are <em>broadcasted</em> to <em>all</em> nodes in the network</li>
<li>This implies the emitter shall itself receive the message.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/6#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>The network layer is responsible for ensuring that sent messages effectively
reach all nodes in the network. How this is achieved is left as an
implementation detail, ie, whether or not it uses relaying.</li>
<li>We need to make sure all Head participants are connected to the same network.</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[7. Use with-pattern based component interfaces
]]></title>
            <link>https://hydra.family/head-protocol/adr/7</link>
            <guid>https://hydra.family/head-protocol/adr/7</guid>
            <pubDate>Fri, 11 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/7#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/7#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>The <em>with pattern</em> or <em>bracket pattern</em> is a functional programming idiom, a
particular instance of <em>Continuation-Passing Style</em>, whereby one component that
controls some resource that is consumed by another component of the system, is
created via a function that takes as argument a function consuming the resource,
instead of returning it. This pattern allows safe reclaiming of resources when
the "wrapped" action terminates, whether normally or unexpectedly.</p>
<p>TODO "Tying the knot"</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/7#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p>We use this pattern to provide interfaces to all <em>active components</em>, which
exchange messages with other components of the system. A prototypical signature
of such a component could be:</p>
<div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">Component</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token hvariable">inmsg</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">Callback</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token hvariable">outmsg</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token hvariable">withXXX</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">::</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">Callback</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">Component</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token hvariable">a</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that <code>withXXX</code> can also allocate resources in order to provide <code>Component</code>
or use the <code>Callback</code>, e.g. fork threads which invoke <code>Callback</code>, but also make
sure they are cleaned up.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/7#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<p>Components can be layered on top of another to provide additional behavior given the same interface. This also similar to "decorating" in the object-orientation world.</p>
<p>If the <code>Component</code> is agnostic about the messages it consumes/produces, it can be defined as a <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Functor-Contravariant.html" target="_blank" rel="noopener noreferrer"><code>Contravariant</code> functor</a> and the <code>Callback</code> part as a (covariant) <code>Functor</code>. This makes it possible to use <code>map</code> and <code>contramap</code> operations to transform messages.</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[8. Custom Prelude
]]></title>
            <link>https://hydra.family/head-protocol/adr/8</link>
            <guid>https://hydra.family/head-protocol/adr/8</guid>
            <pubDate>Fri, 18 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/8#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/8#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>In a Haskell project, we often get to use and re-use the same libraries and functions. Haskell comes with a default <code>Prelude</code> package with the <code>base</code> library, which provides a good and sensible starting point. However, the base <code>Prelude</code> also comes with a few quirks:</p>
<ul>
<li>Many commonly used functions or constructors are not exported by default (e.g. <code>bracket</code>, <code>foldM</code>, <code>first</code>, <code>lift</code>, <code>forM</code>, <code>when</code>, <code>SomeException</code>, <code>Set</code>, <code>&amp;</code> ...etc).</li>
<li>Many functions in the base Prelude are partial, like <code>head</code> or <code>read</code>.</li>
<li>Many functions simply happens in plain <code>IO</code>, whereas applications usually try to push IO to the boundary as much as possible (for example, using mtl-style class constraints).</li>
<li>The interface for I/O operations in the base Prelude is <code>String</code>, which comes with quite major performance hit and often forces to convert back and forth to <code>Text</code> or <code>ByteString</code> equivalents.</li>
</ul>
<p>All-in-all, while it <em>does the job</em>, the base <code>Prelude</code> may not necessarily be the most <em>convenient</em> prelude for an active project development.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/8#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p>We'll use a custom prelude to help us get more productive and more importantly, to reduce the daily friction of our interactions with the base prelude. While <a href="https://hackage.haskell.org/package/relude" target="_blank" rel="noopener noreferrer"><code>relude</code></a> makes for a good candidate, we still chose to re-wrap it in a custom <code>Hydra.Prelude</code> module to grant us the ability to add or remove a few things specifics to Hydra and Cardano in general. In particular, we will hide from <code>relude</code> all the re-exports of the <a href="https://hackage.haskell.org/package/stm" target="_blank" rel="noopener noreferrer"><code>stm</code></a> library in favor of <a href="https://github.com/input-output-hk/ouroboros-network/tree/e338f2cf8e1078fbda9555dd2b169c6737ef6774/io-classes" target="_blank" rel="noopener noreferrer"><code>io-classes</code></a> which we already use pervasively and which provides (among other things) most of the same capabilities.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/8#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>Remove uses of 'cardano-prelude' in favor of a new 'hydra-prelude' module.</li>
<li>Cleaning up of imports from existing file modules.</li>
<li>Happier feeling day after day from using a developer-friendly prelude.</li>
<li>Stop loosing time in often re-importing the same functions over and over.</li>
<li>Have an explicit point for discouraging / blessing usage of one or the other function, as well as documenting such decisions</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[9. Simplify Logging
]]></title>
            <link>https://hydra.family/head-protocol/adr/9</link>
            <guid>https://hydra.family/head-protocol/adr/9</guid>
            <pubDate>Thu, 19 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/9#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/9#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>Logs are critical to provide <em>observability</em> to Hydra nodes' operators</li>
<li>Providing the needed components and tools to be able to configure logging and monitoring to each operator's liking should not be the responibility of the Hydra node, and requires complex machinery that will need to be maintained and evolved</li>
<li>When a problem occurs in production, if the process is not verbose enough it can be very hard to analyse the problem<!-- -->
<ul>
<li>Enabling dynamic changes of verbosity in logs is both complex to implement and comes too late</li>
<li>Deciding in the code on what's the right "severity" for a log entry leads to dropping important information on <em>how</em> some error occurred</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/9#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p><em>Therefore</em></p>
<p>Hydra node provides a very simplified logging mechanism whereby:</p>
<ul>
<li>All logs are emitted as JSON-encoded structures providing some metadata (timestamp, threadId) around well-defined data</li>
<li>Each <em>log entry</em> is written to the <code>hydra-node</code> process' <em>stdout</em> port, one line per entry</li>
</ul>
<p><strong>Note</strong>: Proper redaction of sensitive information contained in log entries should still be handled in the code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/9#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>It is the responsibility of the node operator to filter severity or otherwise post-process the logs</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[10. Use direct connection to `cardano-node`
]]></title>
            <link>https://hydra.family/head-protocol/adr/10</link>
            <guid>https://hydra.family/head-protocol/adr/10</guid>
            <pubDate>Sat, 23 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/10#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/10#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>On-chain validation is a critical part of the Hydra protocol. It requires both the ability to <em>submit</em> transactions to the <em>layer 1</em> chain, advancing the state of a head, and <em>observing</em> those transactions as the <a href="https://github.com/input-output-hk/plutus" target="_blank" rel="noopener noreferrer">Plutus</a> contracts are validated.</li>
<li>The <a href="https://github.com/input-output-hk/plutus-apps" target="_blank" rel="noopener noreferrer">Plutus Application Framework</a> is expected to provide the necessary machinery to allow 'smart contract' applications to interact with the chain, but it's still under active development and not ready for deployment on-chain.</li>
<li>We want to gather feedback as early as possible and deliver a fully functional Hydra Head node for early adopters to test on a 'real' chain (testnet).</li>
<li>Our experiment connecting directly to a Cardano node has been conclusive. We can:<!-- -->
<ul>
<li>Connect to a node using local protocols</li>
<li>Build and submit Head transactions triggering smart contracts validation</li>
<li>Observe transactions using chain-sync protocol.</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/10#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p><em>Therefore</em></p>
<p>For the time being, until <em>Plutus Application Framework</em> is released, we will implement on-chain interaction of Hydra nodes <em>directly</em>, connecting to a Cardano node through a <em>local socket</em>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/10#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>Limit Hydra dependencies to the <a href="https://github.com/input-output-hk/plutus" target="_blank" rel="noopener noreferrer">Plutus</a> repository</li>
<li>Remove all PAB-related code as well as off-chain <code>contract</code>s code and related dependencies.</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[11. Use cardano-api
]]></title>
            <link>https://hydra.family/head-protocol/adr/11</link>
            <guid>https://hydra.family/head-protocol/adr/11</guid>
            <pubDate>Thu, 18 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/11#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/11#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>To implement Hydra Head's ledger we have been working with the <a href="https://github.com/input-output-hk/cardano-ledger-specs" target="_blank" rel="noopener noreferrer">ledger-specs</a> packages which provide a low-level interface to work with transactions and ledgers<!-- -->
<ul>
<li>We also use a lightly wrapped ledger-specs API as our interface for Off-chain transaction submission. This introduced some boilerplate in order to align with cardano-api and provide JSON serialisation.</li>
</ul>
</li>
<li>In our initial experiments <a href="https://hydra.family/head-protocol/adr/10">connecting directly</a> to a cardano node we have also been using the ledger API for building transactions for want of some scripts-related features in the cardano-api</li>
<li>cardano-api is expected to be the supported entrypoint for clients to interact with Cardano chain while ledger-specs is reserved for internal use and direct interactions with ledgers</li>
<li>cardano-api now provides all the features we need to run our on-chain validators</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/11#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p><em>Therefore</em></p>
<ul>
<li>Use cardano-api types and functions instead of ledger-specs in <code>Hydra.Chain.Direct</code> component</li>
<li>Use cardano-api types instead of custom ones in <code>Hydra.Ledger.Cardano</code> component</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/11#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>Removes the boilerplate in <code>Hydra.Ledger.Cardano</code> required to map cardano-api types sent by clients to builtin and ledger-specs types</li>
<li>Simplifies the  <code>Hydra.Chain.Direct</code> component:<!-- -->
<ul>
<li>Replaces custom transaction building in <code>Tx</code></li>
<li>Replaces custom transaction fees calculation and balancing in <code>Wallet</code></li>
<li>Replace low-level connection establishment using cardano-api functions connecting to the node (keeping the chain sync subscription)</li>
</ul>
</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[12. Top-down Test-driven Design
]]></title>
            <link>https://hydra.family/head-protocol/adr/12</link>
            <guid>https://hydra.family/head-protocol/adr/12</guid>
            <pubDate>Thu, 25 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/12#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/12#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="noopener noreferrer">Test-Driven Development</a> or <em>Test-Driven Design</em> is a technique that helps team promotes simple and loosely coupled design, reduces the amount of code written, increases confidence in delivered software by providing a high level of code coverage by regression tests, and improves development speed through shorter feedback loop</li>
<li>While initially focused on <em>unit tests</em>, TDD has evolved over time to include higher-level tests like <a href="https://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank" rel="noopener noreferrer">Behaviour Driven Development</a> or <a href="https://en.wikipedia.org/wiki/Specification_by_example" target="_blank" rel="noopener noreferrer">Specification by Example</a>, leading to comprehensive strategies like the <a href="http://tpierrain.blogspot.com/2021/03/outside-in-diamond-tdd-1-style-made.html" target="_blank" rel="noopener noreferrer">Outside-In Diamond TDD</a></li>
<li>Being a foundational part of scalable applications based on Cardano blockchain, Hydra Head needs to be released early, often, and with high assurance in order to benefit from early adopters' feedback</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/12#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p><em>Therefore</em></p>
<p>We start as early as possible with <em>End-to-End</em> tests, gradually making them more complex as we develop the various components but starting with something simple (like a system-level but dummy chain and hydra network).</p>
<p>We flesh out other integration tests as needed, when we refine the technological stack used for the various bits and pieces.</p>
<p>We do most of our work in the <em>Executable Specifications</em> layer while we are developing the core domain functions, eg. the Head protocol. The rationale being this is the level at which we can test the most complex behaviours in the fastest and safest possible way as we everything runs without external dependencies or can even run as pure code using io-sim.</p>
<p>We tactically drop to <em>Unit tests</em> level when dealing with the protocol's "fine prints".</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/12#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>Development of each "feature", whether new or change to existing one, should start with a test defined at the highest level possible, but no higher</li>
<li>A detailed presentation of the various testing layers is available in the <a href="https://github.com/cardano-scaling/hydra/wiki/Testing-Strategy" target="_blank" rel="noopener noreferrer">wiki</a></li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[13. Plutus Contracts Testing Strategy
]]></title>
            <link>https://hydra.family/head-protocol/adr/13</link>
            <guid>https://hydra.family/head-protocol/adr/13</guid>
            <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/13#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/13#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>We are implementing our custom (<a href="https://hydra.family/head-protocol/adr/10">Direct</a>) interaction w/ Cardano blockchain and not using the PAB nor the <code>Contract</code> monad to define off-chain contract code</li>
<li>This implies we cannot use the <a href="https://github.com/input-output-hk/plutus-apps/blob/main/plutus-contract/src/Plutus/Contract/Test.hs" target="_blank" rel="noopener noreferrer">official</a> testing framework for Contracts which relies on <code>Contract</code> monad and emulator traces nor the <a href="https://plutus-apps.readthedocs.io/en/latest/plutus/tutorials/contract-testing.html" target="_blank" rel="noopener noreferrer">QuickCheck based framework</a></li>
<li>We want to follow our <a href="https://hydra.family/head-protocol/adr/12">Test-Driven Development</a> approach for contracts as this is a critical part of Hydra</li>
<li>On-Chain Validators need not only to be correct and functional, but also secure and hardened against malicious parties</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/13#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p><em>Therefore</em></p>
<ul>
<li>We test-drive single contracts code using <em>Mutation-Based Property Testing</em></li>
<li>Contracts are tested through the construction of actual <em>transactions</em> and running phase-2 ledger validation process</li>
<li>We start from a "healthy" transaction, that's expected to be correct and stay so</li>
<li>Contract code is initially <code>const True</code> function that validates any transaction</li>
<li>We flesh the contract's code piecemeal through the introduction of <em>Mutations</em> that turn a healthy transaction into an expectedly invalid one</li>
<li>We gradually build a set of combinators and generators that make it easier to mutate arbitrarily transactions, and combine those mutations</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/13#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>We make the contracts' <em>Threat model</em>  explicit through the tests we write, which should help future auditors' work</li>
<li>We'll need an additional layer of tests to exercise the Hydra OCV State Machine through <em>sequence of transactions</em>. This could be implemented using <a href="https://github.com/input-output-hk/plutus-apps/tree/main/quickcheck-dynamic" target="_blank" rel="noopener noreferrer">quickcheck-dynamic</a> library, or other tools that are currently being developed by the Cardano community</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[14. Token usage in Hydra Scripts
]]></title>
            <link>https://hydra.family/head-protocol/adr/14</link>
            <guid>https://hydra.family/head-protocol/adr/14</guid>
            <pubDate>Mon, 14 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/14#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/14#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>The Hydra on-chain-verification scripts are used to validate Hydra protocol transactions and ensure they are lawful.</li>
<li>At least these three properties need to be enforced:<!-- -->
<ul>
<li>Authentication: ensure that only Head participants can, for example, <code>abort</code> a Head</li>
<li>Contract continuity: ensure that a Head was <code>init</code>ialized before it can be opened by a <code>collectCom</code> tx.</li>
<li>Completeness: ensure that all Head participants had chance to <code>commit</code> funds to a Head.</li>
</ul>
</li>
<li>The Hydra Head paper introduces <strong>participation tokens (PT)</strong> and a <strong>state thread token (ST)</strong> for that matter.</li>
<li>Such tokens (a.k.a native assets) are identified by the <code>CurrencySymbol</code>, that is the hash of their <code>MintingPolicyScript</code> (a.k.a <code>PolicyID</code> in the ledger), and a <code>ByteString</code>, the socalled <code>TokenName</code> (a.k.a as <code>AssetName</code> in the ledger, see <a href="https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/specs.shelley-ma/latest/download-by-type/doc-pdf/shelley-ma#subsection.3.2" target="_blank" rel="noopener noreferrer">shelley-ma ledger spec</a>)</li>
<li>There can be multiple Hydra Heads on a network and a <code>hydra-node</code> need to distinguish individual Head instances or even (later) keep track of multiple Heads. Concretely, this means that we need to infer a Head identifier (<code>HeadId</code>) from observing each of the Hydra protocol transactions.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/14#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>We solve both challenges by defining that ST and PTs <strong>shall use the same</strong> <code>MintingPolicyScript</code> and thus have same <code>CurrencySymbol</code></li>
<li>The <code>MintingPolicyScript</code> shall be parameterized by <code>TxOutRef</code> to yield a unique <code>CurrencySymbol</code> per Head
(similar to the <a href="https://github.com/input-output-hk/plutus/tree/1efbb276ef1a10ca6961d0fd32e6141e9798bd11/plutus-use-cases/src/Plutus/Contracts/Currency.hs" target="_blank" rel="noopener noreferrer"><code>OneShotCurrency</code></a> example)</li>
<li>ST and one PT per participant are minted in the <code>initTx</code></li>
<li>The <code>TokenName</code> of the ST can be any well-known <code>ByteString</code>, e.g. <code>"HydraHeadV1"</code></li>
<li>The <code>TokenName</code> of the PTs needs to be the <code>PubKeyHash</code> of the respective participant</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/14#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>
<p>Heads can be identified by looking for the <code>ST</code> in <code>init</code>, <code>collectCom</code>, <code>close</code>, <code>contest</code> or <code>fanout</code> transactions, or the <code>PT</code> in <code>commit</code> transactions. In both cases, the <code>CurrencySymbol == HeadId</code></p>
</li>
<li>
<p>Our scripts become simpler as we only need to check that ST/PT are paid forward, instead of needing to check datums</p>
</li>
<li>
<p>The datum produced by <code>commit</code> txs (and consumed by <code>collectCom</code>) is <code>Just SerializedTxOut</code>, which is simpler than also keeping the participant which committed in the datum (compare to full life-cycle of <a href="https://github.com/cardano-scaling/hydra/tree/0.3.0/docs/images/on-chain-full.jpg" target="_blank" rel="noopener noreferrer">0.3.0</a>).</p>
</li>
<li>
<p>The <code>v_head</code> script validator does not need to be parameterized, which makes discovering new Heads (and also tracking them for metrics) easier as the address to watch for is common to all Heads (of the same <code>v_head</code> version).</p>
</li>
<li>
<p>The <code>v_head</code> script (path) for the abort life-cycle can be implemented already much safer by checking that all PTs are burned on the <code>abort</code> transaction (counting inputs in abort life-cycle of <a href="https://github.com/cardano-scaling/hydra/tree/0.3.0/docs/images/on-chain-abort.jpg" target="_blank" rel="noopener noreferrer">0.3.0</a>).</p>
</li>
<li>
<p>Updated diagrams for the <a href="https://hydra.family/head-protocol/assets/files/on-chain-full-eea3dda97376810a7bfac1848a11a84a.jpg" target="_blank">full</a> and <a href="https://hydra.family/head-protocol/assets/files/on-chain-abort-c3483946d3116662c5cabfd67e3dde4e.jpg" target="_blank">abort</a> on-chain life-cycles of a Hydra Head.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="follow-up-questions">Follow-up questions<a href="https://hydra.family/head-protocol/adr/14#follow-up-questions" class="hash-link" aria-label="Direct link to Follow-up questions" title="Direct link to Follow-up questions">​</a></h2>
<ul>
<li>What value does the <code>ST</code> actually add? We could always look for the <code>PT</code> to identify a Head and contract continuity would already be achieved by the <code>PT</code>s!</li>
<li>In discussions it turned out to be not clear where the Head's <code>CurrencySymbol</code> is coming from, and consequently how to identify that an <code>ST</code> is indeed an <code>ST</code>?</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[15. Configuration Through an Admin API
]]></title>
            <link>https://hydra.family/head-protocol/adr/15</link>
            <guid>https://hydra.family/head-protocol/adr/15</guid>
            <pubDate>Thu, 17 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/15#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Proposed</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/15#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>Hydra-node currently requires a whole slew of command-line arguments to configure properly its networking layer: <code>--peer</code> to connect to each peer, <code>--cardano-verification-key</code> and <code>--hydra-verification-key</code> to identify the peer on the L1 and L2 respectively.</li>
<li>This poses significant challenges for operating a <em>cluster</em> of Hydra nodes as one needs to know beforehand everything about the cluster, then pass a large number of arguments to some program or docker-compose file, before any node can be started<!-- -->
<ul>
<li>This is a pain that's been felt first-hand for benchmarking and testing purpose</li>
</ul>
</li>
<li>Having static network configuration is probably not sustainable in the long run, even if we don't add any fancy multihead capabilities to the node, as it would make it significantly harder to have automated creation of Heads.</li>
<li>There's been an <a href="https://github.com/cardano-scaling/hydra/pull/222" target="_blank" rel="noopener noreferrer">attempt</a> at providing a file-based network configuration but this was deemed unconvincing</li>
<li><a href="https://eprint.iacr.org/2020/299.pdf" target="_blank" rel="noopener noreferrer">Hydra paper (sec. 4, p. 13)</a> explicitly assumes the existence of a <em>setup</em> phase<!-- -->
<ul>
<li>This <em>setup</em> is currently left aside, e.g. exchange of keys for setting up multisig and identifying peers. The <a href="https://github.com/cardano-scaling/hydra/blob/abailly-iohk/admin-api-adr/hydra-node/exe/hydra-node/Main.hs#L41" target="_blank" rel="noopener noreferrer">hydra-node</a> executable is statically configured and those things are assumed to be known beforehand</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/15#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>Hydra-node exposes an <em>Administrative API</em> to enable configuration of the Hydra network using "standard" tools<!-- -->
<ul>
<li>API is exposed as a set of HTTP endpoints on some port, consuming and producing JSON data,</li>
<li>It is documented as part of the User's Guide for Hydra Head</li>
</ul>
</li>
<li>This API provides <em>commands</em> and <em>queries</em> to:<!-- -->
<ul>
<li>Add/remove <em>peers</em> providing their address and keys,</li>
<li>List currently known peers and their connectivity status,</li>
<li>Start/stop/reset the Hydra network</li>
</ul>
</li>
<li>This API is implemented by a <em>new component</em> accessible through a network port separate from current <em>Client API</em>, that <em>configures</em> the <code>Network</code> component</li>
</ul>
<p>The following picture sketches the proposed architectural change:</p>
<p><img decoding="async" loading="lazy" alt="Architecture change" src="https://hydra.family/head-protocol/assets/images/0015-architecture-change-18873d5f6fa6f8237431a6cfa83a03e3.jpg" width="5351" height="2989" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="qa">Q&amp;A<a href="https://hydra.family/head-protocol/adr/15#qa" class="hash-link" aria-label="Direct link to Q&amp;A" title="Direct link to Q&amp;A">​</a></h2>
<ul>
<li><em>Why a REST interface?</em>
<ul>
<li>This API is an interface over a specific <em>resource</em> controlled by the Hydra node, namely its knowledge of other peers with which new _Head_s can be opened. As such a proper REST interface (<em>not</em> RPC-in-disguise) seems to make sense here, rather than stream/event-based <a href="https://hydra.family/head-protocol/adr/3">duplex communication channels</a></li>
<li>We can easily extend such an API with WebSockets to provide notifications (e.g. peers connectivity, setup events...)</li>
</ul>
</li>
<li><em>Why a separate component?</em>
<ul>
<li>We could imagine extending the existing <a href="https://github.com/cardano-scaling/hydra/blob/9129c7c013fe2cdc77db048a54981e1ace0843b8/hydra-node/src/Hydra/API/Server.hs" target="_blank" rel="noopener noreferrer">APIServer</a> interface with new messages related to this network configuration, however this seems to conflate different responsibilities in a single place: Configuring and managing the Hydra node itself, and configuring, managing, and interacting with the Head itself</li>
<li>"Physical" separation of endpoints makes it easier to secure a very sensitive part of the node, namely its administration, e.g by ensuring this can only be accessed through a specific network interface, without relying on application level authentication mechanisms</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/15#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>It's easy to deploy Hydra nodes with some standard configuration, then dynamically configure them, thus reducing the hassle of defining and configuring the Hydra network</li>
<li>It makes it possible to <em>reconfigure</em> a Hydra node with different peers</li>
<li>The <em>Client API</em> should reflect the state of the network and disable <code>Init</code>ing a head if the network layer is not started<!-- -->
<ul>
<li>In the long run, it should also have its scope reduced to represent only the possible interactions with a <em>Head</em>, moving things related to network connectivity and setup to the Admin API</li>
<li>In a <em>Managed Head</em> scenario it would even make sense to have another layer of separation between the API to manage the life-cycle of the Head and the API to make transactions within the Head</li>
</ul>
</li>
<li>Operational tools could be built easily on top of the API, for command-line or Web-based configuration</li>
</ul>]]></content:encoded>
            <category>Proposed</category>
        </item>
        <item>
            <title><![CDATA[16. Keep Rejected ADRs
]]></title>
            <link>https://hydra.family/head-protocol/adr/16</link>
            <guid>https://hydra.family/head-protocol/adr/16</guid>
            <pubDate>Wed, 23 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/16#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/16#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>We have started using <em>Architecture Decision Records</em> as our primary way to document the most important design decisions we take while developing Hydra Node, and this has proved effective in fostering fruitful discussions about major architecture changes.</p>
<p>During the course of this project, we have sometimes had debates on various topics leading to rejection of <a href="https://github.com/cardano-scaling/hydra/pull/230" target="_blank" rel="noopener noreferrer">some ADRs</a>. It could be the case that  a previously rejected proposal turns out to be interesting, either because the context and situation have changed enough to reevaluate a proposal, or as background for some new proposal.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/16#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p><em>therefore</em></p>
<ul>
<li>We will keep rejected <em>Architecture Decision Records</em> alongside accepted and draft ones, in the same location and format</li>
<li>Rejected ADRs <em>must</em> have tag <code>[Rejected]</code> set</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/16#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<p>Once attributed a <em>serial number</em> an ADR keeps it "forever", whether it's rejected or accepted</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[17. Use UDP protocol for Hydra networking
]]></title>
            <link>https://hydra.family/head-protocol/adr/17</link>
            <guid>https://hydra.family/head-protocol/adr/17</guid>
            <pubDate>Mon, 28 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/17#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Superseded (as never implemented) by <a href="https://hydra.family/head-protocol/adr/32">ADR 32</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/17#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>Current Hydra networking layer is based on <a href="https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network-framework" target="_blank" rel="noopener noreferrer">Ouroboros network framework</a> networking stack which, among other features, provides:</p>
<ol>
<li>An abstraction of stream-based duplex communication channels called a <a href="https://github.com/input-output-hk/ouroboros-network/blob/6c15a8093bac34091ad96af2b8b0d1f7fe54b732/ouroboros-network-framework/src/Ouroboros/Network/Snocket.hs" target="_blank" rel="noopener noreferrer">Snocket</a>,</li>
<li>A Multiplexing connection manager that manages a set of equivalent peers, maintains connectivity, and ensures diffusion of messages to/from all peers,</li>
<li>Typed protocols for expressing the logic of message exchanges as a form of <em>state machine</em>.</li>
</ol>
<p>While it's been working mostly fine so far, the abstractions and facilities provided by this network layer are not well suited for Hydra Head networking. Some of the questions and shortcomings are discussed in a document on <a href="https://hydra.family/head-protocol/docs/dev/architecture/networking">Networking Requirements</a>, and as the Hydra Head matures it seems time is ripe for overhauling current network implementation to better suite current and future Hydra Head networks needs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/17#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>Hydra Head nodes communicate by sending messages to other nodes using <a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol" target="_blank" rel="noopener noreferrer">UDP</a> protocol</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="details">Details<a href="https://hydra.family/head-protocol/adr/17#details" class="hash-link" aria-label="Direct link to Details" title="Direct link to Details">​</a></h2>
<ul>
<li><em>How do nodes know each other?</em>: This is unspecified by this ADR and left for future work, it is assumed that a Hydra node operator knows the IP<!-- -->:Port<!-- --> address of its peers before opening a Head with them</li>
<li><em>Are messages encrypted?</em>: This should probably be the case in order to ensure Heads' privacy but is also left for future work</li>
<li><em>How are nodes identified?</em>: At the moment they are identified by their IP<!-- -->:Port<!-- --> pair. As we implement more of the setup process from section 4 of the Hydra Head paper, we should identify nodes by some public key(hash) and resolve the actual IP<!-- -->:Port<!-- --> pair using some other mechanism</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/17#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>Node's <em>HeadLogic</em> handles lost, duplicates, and out-of-order messages using <em>retry</em> and <em>timeout</em> mechanisms</li>
<li>Messages should carry a unique identifier, eg. source node and index</li>
<li>Protocol, eg. messages format, is documented</li>
</ul>]]></content:encoded>
            <category>Superseded</category>
        </item>
        <item>
            <title><![CDATA[18. Single state in Hydra.Node.
]]></title>
            <link>https://hydra.family/head-protocol/adr/18</link>
            <guid>https://hydra.family/head-protocol/adr/18</guid>
            <pubDate>Wed, 13 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/18#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Superseded by <a href="https://hydra.family/head-protocol/adr/23">ADR 23</a> and <a href="https://hydra.family/head-protocol/adr/26">ADR 26</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/18#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>Currently the <code>hydra-node</code> maintains two pieces of state during the life-cycle of a Hydra Head:<!-- -->
<ol>
<li>A <code>HeadState tx</code> provided by the <code>HydraHead tx m</code> handle interface and part of the <code>Hydra.Node</code> module. It provides the basis for the main <code>hydra-node</code> business logic in <code>Hydra.Node.processNextEvent</code> and <code>Hydra.HeadLogic.update</code>
<a href="https://github.com/cardano-scaling/hydra/blob/a98e2907c4e425de2736782793383aad63132c14/hydra-node/src/Hydra/Node.hs#L256-L257" target="_blank" rel="noopener noreferrer">Creation</a>, <a href="https://github.com/cardano-scaling/hydra/blob/a98e2907c4e425de2736782793383aad63132c14/hydra-node/src/Hydra/Node.hs#L174" target="_blank" rel="noopener noreferrer">Usage</a></li>
<li><code>SomeOnChainHeadState</code> is kept in the <code>Hydra.Chain.Direct</code> to keep track of the latest known head state, including notable transaction outputs and information how to spend it (e.g. scripts and datums)
<a href="https://github.com/cardano-scaling/hydra/blob/a98e2907c4e425de2736782793383aad63132c14/hydra-node/src/Hydra/Chain/Direct.hs#L156-L162" target="_blank" rel="noopener noreferrer">Code</a>, <a href="https://github.com/cardano-scaling/hydra/blob/a98e2907c4e425de2736782793383aad63132c14/hydra-node/src/Hydra/Chain/Direct.hs#L449" target="_blank" rel="noopener noreferrer">Usage 1</a>, <a href="https://github.com/cardano-scaling/hydra/blob/a98e2907c4e425de2736782793383aad63132c14/hydra-node/src/Hydra/Chain/Direct.hs#L414" target="_blank" rel="noopener noreferrer">Usage 2</a>, <a href="https://github.com/cardano-scaling/hydra/blob/a98e2907c4e425de2736782793383aad63132c14/hydra-node/src/Hydra/Chain/Direct.hs#L349-L352" target="_blank" rel="noopener noreferrer">Usage 3</a>
(There are other unrelated things kept in memory like the event history in the API server or a peer map in the network heartbeat component.)</li>
</ol>
</li>
<li>The interface between the <code>Hydra.Node</code> and a <code>Hydra.Chain</code> component consists of<!-- -->
<ul>
<li>constructing certain Head protocol transactions given a description of it (<code>PostChainTx tx</code>):<!-- -->
<div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token hvariable">postTx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">::</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">MonadThrow</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">PostChainTx</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>a callback function when the <code>Hydra.Chain</code> component observed a new Head protocol transaction described by <code>OnChainTx tx</code>:<!-- -->
<div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ChainCallback</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">OnChainTx</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
</li>
<li>Given by the usage sites above, the <code>Hydra.Chain.Direct</code> module requires additional info to do both, construct protocol transactions with <code>postTx</code> as well as observe potential <code>OnChainTx</code> (<a href="https://github.com/cardano-scaling/hydra/blob/a98e2907c4e425de2736782793383aad63132c14/hydra-node/src/Hydra/Chain/Direct.hs#L333-L336" target="_blank" rel="noopener noreferrer">here</a>). Hence we see that, operation of the <code>Hydra.Chain.Direct</code> component (and likely any implementing the interface fully) is <strong>inherently stateful</strong>.</li>
<li>We are looking at upcoming features to <a href="https://github.com/cardano-scaling/hydra/issues/185" target="_blank" rel="noopener noreferrer">handle rollbacks</a> and dealing with <a href="https://github.com/cardano-scaling/hydra/issues/187" target="_blank" rel="noopener noreferrer">persisting the head state</a>.<!-- -->
<ul>
<li>Both could benefit from the idea, that the <code>HeadState</code> is just a result of pure <code>Event</code> processing (a.k.a event sourcing).</li>
<li>Right now the <code>HeadState</code> kept in <code>Hydra.Node</code> alone, is not enough to fully describe the state of the <code>hydra-node</code>. Hence it would not be enough to just persist all the <code>Event</code>s and replaying them to achieve persistence, nor resetting to some previous <code>HeadState</code> in the presence of a rollback.</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/18#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>We define and keep a "blackbox" <code>ChainStateType tx</code> in the <code>HeadState tx</code>
<ul>
<li>It shall not be introspectable to the business logic in <code>HeadLogic</code></li>
<li>It shall contain chain-specific information about the current Hydra Head, which will naturally need to evolve once we have multiple Heads in our feature scope</li>
<li>For example:</li>
</ul>
<div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">data</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">HeadState</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">IdleState</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">InitialState</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token hvariable">chainState</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">::</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ChainStateType</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">-- ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">OpenState</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token hvariable">chainState</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">::</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ChainStateType</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">-- ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ClosedState</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token hvariable">chainState</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">::</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ChainStateType</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">-- ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>We provide the latest <code>ChainStateType tx</code> to <code>postTx</code>:<!-- -->
<div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token hvariable">postTx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">::</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ChainStateType</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">PostChainTx</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>We change the <code>ChainEvent tx</code> data type and callback interface of <code>Chain</code> to:<!-- -->
<div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">data</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ChainEvent</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">Observation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token hvariable">observedTx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">::</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">OnChainTx</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token hvariable">newChainState</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">::</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ChainStateType</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">Rollback</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ChainSlot</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">Tick</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">UTCTime</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ChainCallback</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">ChainStateType</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">Maybe</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">ChainEvent</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<p>with the meaning, that invocation of the callback indicates receival of a transaction which is <code>Maybe</code> observing a relevant <code>ChainEvent tx</code>, where an <code>Observation</code> may include a <code>newChainState</code>.</p>
<ul>
<li>We also decide to extend <code>OnChainEffect</code> with a <code>ChainState tx</code> to explicitly
thread the used <code>chainState</code> in the <code>Hydra.HeadLogic</code>.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/18#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>We need to change the construction of <code>Chain</code> handles and the call sites of <code>postTx</code></li>
<li>We need to extract the state handling (similar to the event queue) out of the <code>HydraNode</code> handle and shuffle the main of <code>hydra-node</code> a bit to be able to provide the latest <code>ChainState</code> to the chain callback as a continuation.</li>
<li>We need to make the <code>ChainState</code> serializable (<code>ToJSON</code>, <code>FromJSON</code>) as it will be part of the <code>HeadState</code>.</li>
<li>We can drop the <code>TVar</code> of keeping <code>OnChainHeadState</code> in the <code>Hydra.Chain.Direct</code> module.</li>
<li>We need to update <code>DirectChainSpec</code> and <code>BehaviorSpec</code> test suites to mock/implement the callback &amp; state handling.</li>
<li>We might be able to simplify the <code>ChainState tx</code> to be just a <code>UTxOType tx</code> later.</li>
<li>As <code>OnChainEffect</code> and <code>Observation</code> values will contain a <code>ChainStateType tx</code>, traces will automatically include the full <code>ChainState</code>, which might be helpful but also possible big.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="alternative">Alternative<a href="https://hydra.family/head-protocol/adr/18#alternative" class="hash-link" aria-label="Direct link to Alternative" title="Direct link to Alternative">​</a></h2>
<ul>
<li>We could extend <code>PostChainTx</code> (like <code>Observation</code>) with <code>ChainState</code> and keep the signatures:</li>
</ul>
<div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token hvariable">postTx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">::</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">MonadThrow</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">PostChainTx</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ChainCallback</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">ChainState</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">Maybe</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">ChainEvent</span><span class="token plain"> </span><span class="token hvariable">tx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token hvariable">m</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>Not implemented as it is less clear on the need for a <code>ChainState</code> in the signatures.</li>
</ul>]]></content:encoded>
            <category>Superseded</category>
        </item>
        <item>
            <title><![CDATA[19. Use of reference scripts
]]></title>
            <link>https://hydra.family/head-protocol/adr/19</link>
            <guid>https://hydra.family/head-protocol/adr/19</guid>
            <pubDate>Fri, 22 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/19#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/19#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>
<p>In the desire to make Hydra transactions smaller and cheaper (at the time of writing any abort tx was too big), we want to use the <strong>reference script</strong> and <strong>reference input</strong> features of the upcoming <code>Babbage</code> ledger era. See the <a href="https://hydra.iohk.io/build/16861604/download/1/babbage-changes.pdf" target="_blank" rel="noopener noreferrer">babbage ledger spec</a>, <a href="https://github.com/cardano-foundation/CIPs/tree/master/CIP-0031" target="_blank" rel="noopener noreferrer">CIP-31</a> and <a href="https://github.com/cardano-foundation/CIPs/tree/master/CIP-0033" target="_blank" rel="noopener noreferrer">CIP-33</a> for details.</p>
</li>
<li>
<p>With these features we do not need to (re-)include scripts in each transaction.</p>
</li>
<li>
<p>The CIPs do not specify how reference scripts are to be managed and we can see at least two options:</p>
<ol>
<li>Add them as outputs to the <code>init</code> transaction or prior that as part of each Hydra Head instance</li>
<li>Post them out-of-band, separate to individual Head instances</li>
</ol>
</li>
<li>
<p>Ownership of the outputs holding the scripts is to be considered. If these "reference outputs" are spent, they cannot be referred to anymore. This would mean all heads referring to them can be denied of service (DoS).</p>
</li>
<li>
<p>Each head will need to refer to the correct version of the hydra scripts. That is, consistent with the script hashes known to the <code>hydra-node</code>.</p>
<ul>
<li>This is also related to the problem of managing script versions &amp; updates.</li>
<li>Right now, the <code>hydra-node</code> is compiled against <code>hydra-plutus</code> to access compiled script content and hashes.</li>
</ul>
</li>
<li>
<p>The general trade-off is: instead of paying ADA fees for scripts adding to the transaction size in <em>each</em> transaction, ADA deposits will need to be put down to have scripts be part of the UTxO set in the ledger <em>once</em>.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/19#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>
<p>Publish outputs holding Hydra scripts out-of-band (option 2), because</p>
<ul>
<li>All scripts would not fit into the <code>init</code> transaction directly, we would need to post multiple.</li>
<li>Costs (deposits) would need to be paid for each head instance.</li>
</ul>
</li>
<li>
<p>The scripts are stored at outputs addressed to some <strong>unspendable</strong> <code>v_publish</code> validator.</p>
<ul>
<li>This is to avoid DoS risk and unnecessariy centralization</li>
<li>We have considered "garbage collection" by allowing spending these outputs into re-publishing new versions of the script.<!-- -->
<ul>
<li>This would make things even more complicated and we decided to not bother about "littering the chain" right now.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>We will publish scripts on release of the <code>hydra-node</code>, or more specifically of the <code>hydra-plutus</code> package.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/19#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>
<p>We need a process and/or tool to publish <code>hydra-plutus</code> scripts and need to pay the deposits.</p>
<ul>
<li>Any other party could do the same, this does not lead to centralization.</li>
</ul>
</li>
<li>
<p>The <code>hydra-node</code> would be need to know the <code>TxIn</code>s of the "right" published scripts.</p>
<ul>
<li>In the simplest case we would just make this configurable and provide configurations for the various networks after publishing scripts.</li>
</ul>
</li>
<li>
<p>If we combine the <code>v_publish</code> validator with a "tag", this allows nodes to "discover" scripts of a known version</p>
<ul>
<li>For example, we could define <code>HydraHeadV1</code>, <code>HydraInitialV1</code> and <code>HydraCommitV1</code> as such tags</li>
<li>We could parameterize the validator by the tag, yielding unique addresses per tag.</li>
<li>Alternatively, the "tag" could be stored in a canonical form as datum on the script outputs.</li>
<li>In any case, this allows for some checking consistency or easier configuration (not needing to enumerate which <code>TxIn</code> is which script)</li>
</ul>
</li>
<li>
<p>By also knowing the script hashes the <code>hydra-node</code> can verify the integrity of "found" reference scripts</p>
<ul>
<li>This would be possible right now, as they are compiled into the node</li>
<li>Might be undesirable later for easier system configuration</li>
</ul>
</li>
<li>
<p>By making <code>v_publish</code> unspendable, we "litter" the chain. However, any garbage collection scheme would mean potential to DoS again.</p>
</li>
<li>
<p>Extended diagram for the <a href="https://hydra.family/head-protocol/assets/files/on-chain-abort-reference-scripts-4fdf2aae00b80ca995690fe6f3208f4e.jpg" target="_blank">abort</a> on-chain life-cycles of a Hydra Head to include reference scripts.</p>
</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[20. Handling time
]]></title>
            <link>https://hydra.family/head-protocol/adr/20</link>
            <guid>https://hydra.family/head-protocol/adr/20</guid>
            <pubDate>Tue, 02 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://hydra.family/head-protocol/adr/20#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://hydra.family/head-protocol/adr/20#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>
<p>The Hydra Head protocol is expected to be isomorphic to the ledger it runs on. That means, it should support the same transaction formats and (if desired) use the same ledger rules as the layer 1.</p>
</li>
<li>
<p>Cardano is our layer 1 and its consensus layer separates time into discrete steps, where each step is called a <code>Slot</code>. The network is expected to evolve strictly monotonically on this time scale and so slot numbers (<code>SlotNo</code>) are always increasing.</p>
</li>
<li>
<p>The Cardano mainnet has a block scheduled every 20 seconds, although it may take longer.</p>
<ul>
<li>This is because <code>slotLength = 1.0</code> and every 20th slot is "active" with <code>f = 0.05</code>.</li>
<li>The consensus protocol requires <code>k</code> blocks to be produced within <code>3k/f</code> slots, where <code>k = 2160</code> on mainnet.</li>
</ul>
</li>
<li>
<p>Transactions on Cardano may have a validity range with a lower and upper bound given as <code>SlotNo</code>.</p>
</li>
<li>
<p>Wall-clock time can be converted to slots (and back) using an <code>EraHistory</code> or <code>EpochInterpreter</code> provided by the consensus layer of the cardano node. This is required as the slot lengths could change over time.</p>
<ul>
<li>All past points in time since the <code>SystemStart</code> can be converted.</li>
<li>Future points in time can <strong>only</strong> be converted in the "safe zone", practically being at least <code>3k/f</code> slots (TODO: cross check). Refer to chapter 17 <em>Time</em> on the <a href="https://hydra.iohk.io/build/16997794/download/1/report.pdf" target="_blank" rel="noopener noreferrer">consensus spec</a> for more details.</li>
</ul>
</li>
<li>
<p>The Hydra Head protocol allows <code>close</code> and <code>contest</code> transactions only up before a deadline <code>T_final</code>, and <code>fanout</code> transactions after the deadline.</p>
<ul>
<li>In the current implementation the deadline is upper validity of <code>closed</code> plus the contestation period.</li>
<li>We also consider protocol variants which push out the deadline by the contestation period on each <code>contest</code>.</li>
<li>Contestation periods may very well be longer than the stability window of the protocol. For example: 7 days, while the mainnet stability window is more like 36 hours.</li>
</ul>
</li>
<li>
<p>We have encountered two problems with handling time in the past</p>
<ul>
<li>Trying to convert wall-clock time to slots of the Head protocol deadline led to <code>PastHorizonException</code> (when using very low security parameter <code>k</code>)</li>
<li>Trying to <code>fanout</code> after the deadline, but before another block has been seen by the L1 ledger led to <code>OutsideValidityIntervalUTxO</code>.</li>
</ul>
</li>
<li>
<p>The second problem scenario and solution ideas are roughly visible on this whiteboard:</p>
</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://hydra.family/head-protocol/assets/images/020-timing-fanout-ab1b5156cfc3fa34b570aa3eec42d0dd.jpg" width="1005" height="1067" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://hydra.family/head-protocol/adr/20#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>
<p>The head logic uses wall-clock time to track time and only convert to/from slots when constructing/observing transactions in the chain layer.</p>
<ul>
<li>This ensures that transactions we post or see on the chain can be converted to/from slots.</li>
<li>The head logic would use <code>UTCTime</code> for points in time and <code>NominalDiffTime</code> for durations.</li>
<li>The chain layer converts these using the <code>SystemStart</code> and <code>EraHistory</code> into <code>SlotNo</code>.</li>
</ul>
</li>
<li>
<p>The chain layer informs the logic layer whenever time passed (on the chain) using a new <code>Tick</code> event.</p>
<ul>
<li>For the direct chain implementation, this is whenever we see a block in the chain sync protocol.</li>
<li>Per above decision, the <code>Tick</code> shall contain a <code>UTCTime</code> corresponding to the new "now" as seen through the block chain.</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://hydra.family/head-protocol/adr/20#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>
<p>Conversion from <code>UTCTime -&gt; SlotNo</code> and vice versa stays local to the chain layer.</p>
</li>
<li>
<p>The <code>HeadLogic</code> can track chain time in its state and condition <code>ReadyToFanout</code> upon seeing it pass the deadline.</p>
<ul>
<li>Ensures clients only see <code>ReadyToFanout</code> when a following <code>Fanout</code> would be really possible.</li>
<li>Makes the <code>Delay</code> effect redundant and we can remove it (only delay via reenqueue on the <code>Wait</code> outcome)</li>
</ul>
</li>
<li>
<p>By introducing <code>Tick</code> events, <code>IOSim</code> will not be able to detect non-progress (deadlocks).</p>
<ul>
<li>This means we cannot rely on early exit of simulations anymore and need to determine meaningful simulation endings instead of <code>waitUntilTheEndOfTime</code>.</li>
</ul>
</li>
<li>
<p>We get a first, rough notion of time for free in our L2 and can support "timed transactions" with same resolution as the L1.</p>
<ul>
<li>Tracking time in the state makes it trivial to provide it to the ledger when we <code>applyTransaction</code>.</li>
<li>Of course we could extend the fidelity of this feature using the system clock for "dead reckoning" between blocks. The conversion of wall clock to slot could even be configurable using an L2 <code>slotLength</code> analogous to L1 (although we might not want/need this).</li>
</ul>
</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
    </channel>
</rss>