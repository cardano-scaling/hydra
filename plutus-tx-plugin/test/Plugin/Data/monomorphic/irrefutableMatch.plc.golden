(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl MyMonoData (type))

        MyMonoData_match
        (vardecl Mono (fun (con integer) (fun (con integer) MyMonoData)))
        (vardecl Mono (fun (con integer) MyMonoData))
        (vardecl Mono (fun (con integer) MyMonoData))
      )
    )
    (lam
      ds
      MyMonoData
      {
        [
          [
            [
              { [ MyMonoData_match ds ] (all dead (type) (con integer)) }
              (lam
                default_arg0
                (con integer)
                (lam
                  default_arg1
                  (con integer)
                  (abs dead (type) { (abs e (type) (error e)) (con integer) })
                )
              )
            ]
            (lam a (con integer) (abs dead (type) a))
          ]
          (lam
            default_arg0
            (con integer)
            (abs dead (type) { (abs e (type) (error e)) (con integer) })
          )
        ]
        (all dead (type) dead)
      }
    )
  )
)