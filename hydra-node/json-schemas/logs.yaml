---
"$id": https://raw.githubusercontent.com/input-output-hk/hydra/master/hydra-node/json-schemas/
"$schema": http://json-schema.org/draft/2020-12/schema
"$comment": A description of the log items produced by a Hydra node
title: Hydra Log API
description: >
  This schema documents the structure of the Log items produced by a Hydra node
  via its standard output stream. Items are emitted as individual JSON objects,
  separated by a newline which makes it easy to ingest by thirdparty tools and
  services.

type: object
additionalProperties: false

properties:
  messages:
    type: array
    additionalItems: false
    items:
      type: object
      additionalProperties: false
      required:
        - namespace
        - timestamp
        - threadId
        - message
      properties:
        namespace:
          type: string
          description: >-
            An arbitrary string identifying the tracer generating this entry. For a
            node, this is always 'HydraNode'.

        timestamp:
          type: string
          format: "date-time"
          description: >-
            Timestamp denoting the wall-clock time at which this log entry was
            recorded.

        threadId:
          type: integer
          description: >-
            The id of the thread which produced the log entry.

        message:
          oneOf:
            - title: APIServer
              type: object
              additionalProperties: false
              required:
                - tag
                - api
              description: >-
                A log entry produced by the API server.
              properties:
                tag:
                  type: string
                  enum: ["APIServer"]
                api:
                  $ref: "#/definitions/APIServer"

            - title: Node
              type: object
              additionalProperties: false
              required:
                - tag
                - node
              description: >-
                A log entry denoting events and effects processed by the Node as part
                of the Head protocol.
              properties:
                tag:
                  type: string
                  enum: ["Node"]
                node:
                  $ref: "#/definitions/Node"

            - title: DirectChain
              type: object
              additionalProperties: false
              required:
                - tag
                - directChain
              description: >-
                A log entry produced by the chain component watching the chain.
              properties:
                tag:
                  type: string
                  enum: ["DirectChain"]
                directChain:
                  $ref: "#/definitions/DirectChain"

            - title: Network
              type: object
              additionalProperties: false
              required:
                - tag
                - network
              description: >-
                A log entry from the Hydra network (i.e. the layer-two network between Hydra nodes).
              properties:
                tag:
                  type: string
                  enum: ["Network"]
                network:
                  $ref: "#/definitions/Network"

            - title: NodeOptions
              description: >-
                Hydra node parsed command line arguments
              type: object
              additionalProperties: false
              required:
                - tag
                - runOptions
              properties:
                tag:
                  type: string
                  enum: ["NodeOptions"]
                runOptions:
                  <<: { "$ref": "#/definitions/RunOptions" }
                  description: >-
                    Configuration needed to run the hydra node

            - title: CreatedState
              description: >-
                Created new state in persistence (instead of loading)
              type: object
              additionalProperties: false
              required:
                - tag
              properties:
                tag:
                  type: string
                  enum: ["CreatedState"]

            - title: LoadedState
              description: >-
                Loaded state from persistence
              type: object
              additionalProperties: false
              required:
                - tag
              properties:
                tag:
                  type: string
                  enum: ["LoadedState"]

            - title: Misconfiguration
              description: >-
                Hydra node detected a difference between loaded state and the node arguments.
              type: object
              additionalProperties: false
              required:
                - tag
                - misconfigurationErrors
              properties:
                tag:
                  type: string
                  enum: ["Misconfiguration"]
                misconfigurationErrors:
                  type: array
                  items:
                    $ref: "#definitions/ParamMismatch"

definitions:
  APIServer:
    oneOf:
      - title: APIServerStarted
        description: >-
          API Server has started and is ready, listening for incoming client
          connections on given port.
        type: object
        additionalProperties: false
        required:
          - tag
          - listeningPort
        properties:
          tag:
            type: string
            enum: ["APIServerStarted"]
          listeningPort:
            type: integer
            minimum: 0
            maximum: 65535
      - title: NewAPIConnection
        description: >-
          A new client has connected to the API Server.
        additionalProperties: false
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["NewAPIConnection"]
      - title: APIOutputSent
        description: >-
          Some output has been sent to a client.
        additionalProperties: false
        required:
          - tag
          - sentOutput
        properties:
          tag:
            type: string
            enum: ["APIOutputSent"]
          sentOutput:
            type: object
      - title: APIInputReceived
        description: >-
          Some input has been received from a client.
        additionalProperties: false
        required:
          - tag
          - receivedInput
        properties:
          tag:
            type: string
            enum: ["APIInputReceived"]
          receivedInput:
            oneOf:
              - type: "null"
              - type: object
      - title: APIInvalidInput
        description: >-
          Some input sent by a client is invalid.
        additionalProperties: false
        required:
          - tag
          - reason
          - inputReceived
        properties:
          tag:
            type: string
            enum: ["APIInvalidInput"]
          reason:
            type: string
            description: >-
              A textual description of the reason why this input is invalid.
          inputReceived:
            type: string
            description: >-
              A rendering in text of the input received. This input is invalid
              hence it's potentially invalid JSON so we just encode it as a proper
              JSON string. Note that if the input contained invalid UTF-8
              characters they will be ignored.

  DirectChain:
    oneOf:
      - title: ToPost
        description: >-
          Head logic requests submission of a Head protocol transaction.
        type: object
        additionalProperties: false
        required:
          - tag
          - toPost
        properties:
          tag:
            type: string
            enum: ["ToPost"]
          toPost:
            $ref: "api.yaml#/components/schemas/PostChainTx"
      - title: PostingTx
        description: >-
          A transaction with given id is about to be submitted on-chain.
        type: object
        additionalProperties: false
        required:
          - tag
          - txId
        properties:
          tag:
            type: string
            enum: ["PostingTx"]
          txId:
            $ref: "api.yaml#/components/schemas/TxId"
      - title: PostedTx
        description: >-
          A transaction with given id has been successfully submitted to the chain.
        type: object
        additionalProperties: false
        required:
          - tag
          - txId
        properties:
          tag:
            type: string
            enum: ["PostedTx"]
          txId:
            $ref: "api.yaml#/components/schemas/TxId"
      - title: PostingFailed
        description: >-
          Submitting the transaction to the node failed
        type: object
        additionalProperties: false
        required:
          - tag
          - tx
          - postTxError
        properties:
          tag:
            type: string
            enum: ["PostingFailed"]
          tx:
            $ref: "api.yaml#/components/schemas/Transaction"
          postTxError:
            $ref: "api.yaml#/components/schemas/PostTxError"

      - title: RolledForward
        description: >-
          Chain sync rolled forward by receiving a block with transactions.
        type: object
        additionalProperties: false
        required:
          - tag
          - point
          - receivedTxIds
        properties:
          tag:
            type: string
            enum: ["RolledForward"]
          point:
            $ref: "api.yaml#/components/schemas/ChainPoint"
          receivedTxIds:
            type: array
            items:
              $ref: "api.yaml#/components/schemas/TxId"

      - title: RolledBackward
        description: >-
          Chain sync rolled backward to some point.
        type: object
        additionalProperties: false
        required:
          - tag
          - point
        properties:
          tag:
            type: string
            enum: ["RolledBackward"]
          point:
            $ref: "api.yaml#/components/schemas/ChainPoint"

      - title: Wallet
        description: >-
          Logs coming from the wallet.
        type: object
        additionalProperties: false
        required:
          - tag
          - contents
        properties:
          tag:
            type: string
            enum: ["Wallet"]
          contents:
            $ref: "#/definitions/Wallet"

  Wallet:
    oneOf:
      - title: BeginInitialize
        description: >-
          The wallet is asked to (re-)initialize and fetch latest information
          from the cardano-node.
        type: object
        additionalProperties: false
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["BeginInitialize"]
      - title: EndInitialize
        description: >-
          The wallet has been initialized with these UTxOs and will skip blocks
          until reaching the tip.
        type: object
        additionalProperties: false
        required:
          - tag
          - initialUTxO
          - tip
        properties:
          tag:
            type: string
            enum: ["EndInitialize"]
          initialUTxO:
            $ref: "api.yaml#/components/schemas/UTxO"
          tip:
            $ref: "api.yaml#/components/schemas/ChainPoint"
      - title: BeginUpdate
        description: >-
          The wallet has been given a new block to update it's state.
        additionalProperties: false
        required:
          - tag
          - point
        properties:
          tag:
            type: string
            enum: ["BeginUpdate"]
          point:
            $ref: "api.yaml#/components/schemas/ChainPoint"
      - title: EndUpdate
        description: >-
          The wallet updated it's state by applying a block resulting in given
          UTxOs.
        additionalProperties: false
        required:
          - tag
          - newUTxO
        properties:
          tag:
            type: string
            enum: ["EndUpdate"]
          newUTxO:
            $ref: "api.yaml#/components/schemas/UTxO"
      - title: SkipUpdate
        description: >-
          The wallet has been given a block behind it's last known tip and skips
          the internal update of UTxOs.
        additionalProperties: false
        required:
          - tag
          - point
        properties:
          tag:
            type: string
            enum: ["SkipUpdate"]
          point:
            $ref: "api.yaml#/components/schemas/ChainPoint"

  # NOTE: We cannot simply describe 'ServerOutput' and re-use it in api.yaml, so
  # we opted to not detail this section here. The outputs documented in api.yaml
  # are based on internal type 'TimeServerOutput', so basically just contain an
  # adtitional 'timestamp' and 'seq'.
  ServerOutput: {}

  ParamMismatch:
    oneOf:
      - title: ContestationPeriodMismatch
        description: >-
          The configured contestation period does not match with the value from the loaded state.
        type: object
        additionalProperties: false
        required:
          - tag
          - loadedCp
          - configuredCp
        properties:
          tag:
            type: string
            enum: ["ContestationPeriodMismatch"]
          loadedCp:
            <<: { "$ref": "api.yaml#/components/schemas/ContestationPeriod" }
            description: >-
              Contestation period present in the node state.
          configuredCp:
            <<: { "$ref": "api.yaml#/components/schemas/ContestationPeriod" }
            description: >-
              Contestation period configured as the node argument.
      - title: PartiesMismatch
        description: >-
          The configured parties do not match with the value from the loaded state.
        type: object
        additionalProperties: false
        required:
          - tag
          - loadedParties
          - configuredParties
        properties:
          tag:
            type: string
            enum: ["PartiesMismatch"]
          loadedParties:
            type: array
            <<: { "$ref": "api.yaml#/components/schemas/Party" }
            description: >-
              Parties present in the node state.
          configuredParties:
            type: array
            <<: { "$ref": "api.yaml#/components/schemas/Party" }
            description: >-
              Parties configured as the node argument.

  # TODO: Fill the gap!
  Network: {}

  Node:
    oneOf:
      - title: BeginEvent
        description: >-
          Head has started processing an event drawn from some pool or queue of
          events to process.
        type: object
        additionalProperties: false
        required:
          - tag
          - by
          - event
        properties:
          tag:
            type: string
            enum: ["BeginEvent"]
          by:
            <<: { "$ref": "api.yaml#/components/schemas/Party" }
            description: >-
              The Party emitting the log entry.
          event:
            <<: { "$ref": "#/definitions/Event" }
      - title: EndEvent
        description: >-
          Head has succesfully finished processing an event.
        type: object
        additionalProperties: false
        required:
          - tag
          - by
          - event
        properties:
          tag:
            type: string
            enum: ["EndEvent"]
          by:
            <<: { "$ref": "api.yaml#/components/schemas/Party" }
            description: >-
              The Party emitting the log entry.
          event:
            $ref: "#/definitions/Event"
      - title: BeginEffect
        description: >-
          Head has started processing an effect produced by some transition in the
          protocol.
        type: object
        additionalProperties: false
        required:
          - tag
          - by
          - effect
        properties:
          tag:
            type: string
            enum: ["BeginEffect"]
          by:
            <<: { "$ref": "api.yaml#/components/schemas/Party" }
            description: >-
              The Party emitting the log entry.
          effect:
            $ref: "#/definitions/Effect"
      - title: EndEffect
        description: >-
          Head has finished processing an effect produced by some transition in
          the protocol.
        type: object
        additionalProperties: false
        required:
          - tag
          - by
          - effect
        properties:
          tag:
            type: string
            enum: ["EndEffect"]
          by:
            <<: { "$ref": "api.yaml#/components/schemas/Party" }
            description: >-
              The Party emitting the log entry.
          effect:
            $ref: "#/definitions/Effect"
      - title: LogicOutcome
        description: >-
          An outcome produced is a decision the node took after processing an input event.
        type: object
        additionalProperties: false
        required:
          - tag
          - by
          - outcome
        properties:
          tag:
            type: string
            enum: ["LogicOutcome"]
          by:
            <<: { "$ref": "api.yaml#/components/schemas/Party" }
            description: >-
              The Party emitting the log entry.
          outcome:
            $ref: "#/definitions/Outcome"

  LogicError:
    oneOf:
      - title: InvalidEvent
        additionalProperties: false
        required:
          - tag
          - contents
        properties:
          tag:
            type: string
            enum: ["InvalidEvent"]
          contents:
            type: array
            prefixItems:
              - $ref: "#/definitions/Event"
              - $ref: "#/definitions/HeadState"
      - title: InvalidState
        additionalProperties: false
        required:
          - tag
          - contents
        properties:
          tag:
            type: string
            enum: ["InvalidState"]
          contents:
            $ref: "#/definitions/HeadState"
      - title: InvalidSnapshot
        additionalProperties: false
        required:
          - tag
          - expected
          - actual
        properties:
          tag:
            type: string
            enum: ["InvalidSnapshot"]
          expected:
            $ref: "api.yaml#/components/schemas/SnapshotNumber"
          actual:
            $ref: "api.yaml#/components/schemas/SnapshotNumber"
      - title: LedgerError
        additionalProperties: false
        required:
          - tag
          - contents
        properties:
          tag:
            type: string
            enum: ["LedgerError"]
          contents:
            $ref: "#/definitions/ValidationError"
      - title: RequireFailed
        additionalProperties: false
        required:
          - tag
          - contents
        properties:
          tag:
            type: string
            enum: ["RequireFailed"]
          contents:
            type: string

  ValidationError:
    type: object
    additionalProperties: false
    required:
      - reason
    properties:
      reason:
        type: string

  HeadState:
    oneOf:
      - title: "Idle"
        additionalProperties: false
        required:
          - tag
          - contents
        properties:
          tag:
            type: string
            enum: ["Idle"]
          contents:
            $ref: "#/definitions/IdleState"
      - title: "Initial"
        additionalProperties: false
        required:
          - tag
          - contents
        properties:
          tag:
            type: string
            enum: ["Initial"]
          contents:
            $ref: "#/definitions/InitialState"
      - title: "Open"
        additionalProperties: false
        required:
          - tag
          - contents
        properties:
          tag:
            type: string
            enum: ["Open"]
          contents:
            $ref: "#/definitions/OpenState"
      - title: "Closed"
        additionalProperties: false
        required:
          - tag
          - contents
        properties:
          tag:
            type: string
            enum: ["Closed"]
          contents:
            $ref: "#/definitions/ClosedState"

  IdleState:
    type: object
    additionalProperties: false
    required:
      - chainState
    properties:
      chainState:
        $ref: "api.yaml#/components/schemas/ChainState"

  InitialState:
    type: object
    additionalProperties: false
    required:
      - parameters
      - pendingCommits
      - committed
      - previousRecoverableState
      - chainState
      - headId
    properties:
      parameters:
        $ref: "api.yaml#/components/schemas/HeadParameters"
      pendingCommits:
        type: array
        items:
          $ref: "api.yaml#/components/schemas/Party"
      committed:
        type: array
        items:
          $ref: "api.yaml#/components/schemas/Party"
      previousRecoverableState:
        $ref: "#/definitions/HeadState"
      chainState:
        $ref: "api.yaml#/components/schemas/ChainState"
      headId:
        $ref: "api.yaml#/components/schemas/HeadId"

  OpenState:
    type: object
    additionalProperties: false
    required:
      - parameters
      - coordinatedHeadState
      - previousRecoverableState
      - chainState
      - headId
      - currentSlot
    properties:
      parameters:
        $ref: "api.yaml#/components/schemas/HeadParameters"
      coordinatedHeadState:
        $ref: "#/definitions/CoordinatedHeadState"
      previousRecoverableState:
        $ref: "#/definitions/HeadState"
      chainState:
        $ref: "api.yaml#/components/schemas/ChainState"
      headId:
        $ref: "api.yaml#/components/schemas/HeadId"
      currentSlot:
        $ref: "api.yaml#/components/schemas/ChainSlot"

  ClosedState:
    type: object
    additionalProperties: false
    required:
      - parameters
      - previousRecoverableState
      - confirmedSnapshot
      - contestationDeadline
      - readyToFanoutSent
      - chainState
      - headId
    properties:
      parameters:
        $ref: "api.yaml#/components/schemas/HeadParameters"
      previousRecoverableState:
        $ref: "#/definitions/HeadState"
      confirmedSnapshot:
        $ref: "api.yaml#/components/schemas/ConfirmedSnapshot"
      contestationDeadline:
        $ref: "api.yaml#/components/schemas/UTCTime"
      readyToFanoutSent:
        type: boolean
      chainState:
        $ref: "api.yaml#/components/schemas/ChainState"
      headId:
        $ref: "api.yaml#/components/schemas/HeadId"

  CoordinatedHeadState:
    type: object
    additionalProperties: false
    required:
      - seenUTxO
      - seenTxs
      - confirmedSnapshot
      - seenSnapshot
    properties:
      seenUTxO:
        $ref: "api.yaml#/components/schemas/UTxO"
      seenTxs:
        type: array
        items:
          $ref: "api.yaml#/components/schemas/Transaction"
      confirmedSnapshot:
        $ref: "api.yaml#/components/schemas/ConfirmedSnapshot"
      seenSnapshot:
        $ref: "#/definitions/SeenSnapshot"

  SeenSnapshot:
    oneOf:
    - title: NoSeenSnapshot
      type: object
      additionalProperties: false
      required:
        - tag
      properties:
        tag:
          type: string
          enum: ["NoSeenSnapshot"]
    - title: LastSeenSnapshot
      type: object
      additionalProperties: false
      required:
        - tag
        - lastSeen
      properties:
        tag:
          type: string
          enum: ["LastSeenSnapshot"]
        lastSeen:
          $ref: "api.yaml#/components/schemas/SnapshotNumber"
    - title: RequestedSnapshot
      type: object
      additionalProperties: false
      required:
        - tag
        - lastSeen
        - requested
      properties:
        tag:
          type: string
          enum: ["RequestedSnapshot"]
        lastSeen:
          $ref: "api.yaml#/components/schemas/SnapshotNumber"
        requested:
          $ref: "api.yaml#/components/schemas/SnapshotNumber"
    - title: SeenSnapshot
      type: object
      additionalProperties: false
      required:
        - tag
        - snapshot
        - signatories
      properties:
        tag:
          type: string
          enum: ["SeenSnapshot"]
        snapshot:
          $ref: "api.yaml#/components/schemas/Snapshot"
        signatories:
          type: array
          items:
            $ref: "api.yaml#/components/schemas/Party"

  Event:
    description: >-
      Events (with Effects) are the atomic elements of the Hydra Head protocol
      which is basically a state-machine consuming events and producing effects.
      Events can come from different sources representing the various components
      a Head needs to interact with: Clients, other peers through the Network,
      main Chain.
    oneOf:
      - title: ClientEvent
        type: object
        additionalProperties: false
        required:
          - tag
          - clientInput
        description: >-
          An event representing some input from a client.
        properties:
          tag:
            type: string
            enum: ["ClientEvent"]
          clientInput:
            oneOf:
              - $ref: "api.yaml#/components/messages/Init/payload"
              - $ref: "api.yaml#/components/messages/Abort/payload"
              - $ref: "api.yaml#/components/messages/Commit/payload"
              - $ref: "api.yaml#/components/messages/NewTx/payload"
              - $ref: "api.yaml#/components/messages/GetUTxO/payload"
              - $ref: "api.yaml#/components/messages/Close/payload"
              - $ref: "api.yaml#/components/messages/Contest/payload"
              - $ref: "api.yaml#/components/messages/Fanout/payload"

      - title: NetworkEvent
        type: object
        additionalProperties: false
        required:
          - tag
          - ttl
          - message
        description: >-
          An event representing some message received from peers in the network.
        properties:
          tag:
            type: string
            enum: ["NetworkEvent"]
          message:
            $ref: "#/definitions/Message"
          ttl:
            type: number
      - title: OnChainEvent
        type: object
        additionalProperties: false
        required:
          - tag
          - chainEvent
        description: >-
          An event representing the confirmation that some transaction part of the
          Head protocol has been confirmed on the main chain.
        properties:
          tag:
            type: string
            enum: ["OnChainEvent"]
          chainEvent:
            $ref: "#/definitions/OnChainEvent"
      - title: ShouldPostFanout
        type: object
        additionalProperties: false
        required:
          - tag
        description: >-
          An placeholder event denoting the Head should post a Fanout transaction
          to finalize the head.
        properties:
          tag:
            type: string
            enum: ["ShouldPostFanout"]
      - title: PostTxError
        type: object
        additionalProperties: false
        required:
          - tag
          - postChainTx
          - postTxError
        description: >-
          Event emitted when posting a transaction on the main chain failed.
        properties:
          tag:
            type: string
            enum: ["PostTxError"]
          postChainTx:
            $ref: "api.yaml#/components/schemas/PostChainTx"
          postTxError:
            $ref: "api.yaml#/components/schemas/PostTxError"

  Message:
    description: >-
      Messages exchanged by Hydra network peers over a broadcasting network.
    oneOf:
      - title: ReqTx
        type: object
        additionalProperties: false
        required:
          - tag
          - party
          - transaction
        description: >-
          Request to sign some transaction and add it to the confirmed Head
          ledger.
        properties:
          tag:
            type: string
            enum: ["ReqTx"]
          party:
            $ref: "api.yaml#/components/schemas/Party"
          transaction:
            $ref: "api.yaml#/components/schemas/Transaction"
      - title: ReqSn
        type: object
        additionalProperties: false
        required:
          - tag
          - party
          - snapshotNumber
          - transactions
        description: >-
          Request from the current snapshot leader to sign some snapshot, eg. a
          bunch of transactions.
        properties:
          tag:
            type: string
            enum: ["ReqSn"]
          party:
            $ref: "api.yaml#/components/schemas/Party"
          snapshotNumber:
            $ref: "api.yaml#/components/schemas/SnapshotNumber"
          transactions:
            type: array
            items:
              $ref: "api.yaml#/components/schemas/Transaction"
      - title: AckSn
        type: object
        additionalProperties: false
        required:
          - tag
          - party
          - signed
          - snapshotNumber
        description: >-
          Signature of a snapshot by a party.
        properties:
          tag:
            type: string
            enum: ["AckSn"]
          party:
            $ref: "api.yaml#/components/schemas/Party"
          snapshotNumber:
            type: integer
            minimum: 0
          signed:
            type: string
            contentEncoding: base16
            description: >-
              Signature from given party of the snapshot. The bytes representing
              the signature are hex-encoded.
      - title: Connected
        type: object
        additionalProperties: false
        required:
          - tag
          - nodeId
        description: >-
          Given party is known to be connected to the network.
        properties:
          tag:
            type: string
            enum: ["Connected"]
          nodeId:
            $ref: "api.yaml#/components/schemas/NodeId"
      - title: Disconnected
        type: object
        additionalProperties: false
        required:
          - tag
          - nodeId
        description: >-
          Given peer is probably disconnected from the network.
        properties:
          tag:
            type: string
            enum: ["Disconnected"]
          nodeId:
            $ref: "api.yaml#/components/schemas/NodeId"

  OnChainEvent:
    oneOf:
      - title: Observation
        type: object
        additionalProperties: false
        required:
          - tag
          - observedTx
          - newChainState
        properties:
          tag:
            type: string
            enum: ["Observation"]
          observedTx:
            $ref: "#/definitions/OnChainTx"
          newChainState:
            $ref: "api.yaml#/components/schemas/ChainState"

      - title: Rollback
        type: object
        additionalProperties: false
        required:
          - tag
          - contents
        properties:
          tag:
            type: string
            enum: ["Rollback"]
          contents:
            type: integer
            minimum: 0

      - title: Tick
        description: |
          Time has progressed on the chain.
        type: object
        additionalProperties: false
        required:
          - tag
          - chainTime
          - chainSlot
        properties:
          tag:
            type: string
            enum: ["Tick"]
          chainTime:
            $ref: "api.yaml#/components/schemas/UTCTime"
          chainSlot:
            $ref: "api.yaml#/components/schemas/ChainSlot"

  OnChainTx:
    description: >-
      On-Chain transactions for the Head protocol. These data structures
      completely abstract away the actual structure of the transaction and only
      represent the data relevant for the protocol to make some progress.
    oneOf:
      - title: OnInitTx
        type: object
        additionalProperties: false
        required:
          - tag
          - contestationPeriod
          - parties
          - headId
        description: >-
          The initial transaction of the Head, announcing various parameters and
          the parties, has been posted on-chain.
        properties:
          tag:
            type: string
            enum: ["OnInitTx"]
          contestationPeriod:
            type: number
            description: >-
              The length of the contestaion period, in seconds, represented as a
              decimal number.
          parties:
            type: array
            items:
              $ref: "api.yaml#/components/schemas/Party"
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
      - title: OnCommitTx
        type: object
        additionalProperties: false
        required:
          - tag
          - party
          - committed
        description: >-
          The commit transaction from a party, committing some UTxO set to the
          Head.
        properties:
          tag:
            type: string
            enum: ["OnCommitTx"]
          party:
            $ref: "api.yaml#/components/schemas/Party"
          committed:
            $ref: "api.yaml#/components/schemas/UTxO"
      - title: OnAbortTx
        type: object
        additionalProperties: false
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["OnAbortTx"]
      - title: OnCollectComTx
        type: object
        additionalProperties: false
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["OnCollectComTx"]
      - title: OnCloseTx
        type: object
        additionalProperties: false
        required:
          - tag
          - snapshotNumber
          - contestationDeadline
        properties:
          tag:
            type: string
            enum: ["OnCloseTx"]
          snapshotNumber:
            type: integer
            minimum: 0
          contestationDeadline:
            $ref: "api.yaml#/components/schemas/UTCTime"
      - title: OnContestTx
        type: object
        additionalProperties: false
        required:
          - tag
          - snapshotNumber
        properties:
          tag:
            type: string
            enum: ["OnContestTx"]
          snapshotNumber:
            type: integer
            minimum: 0
      - title: OnFanoutTx
        type: object
        additionalProperties: false
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["OnFanoutTx"]

  Effect:
    description: >-
      Effects are the outcome of Head protocol processing Events. Each Effect
      represents a message that needs to be sent somewhere, either to clients
      for notification purpose, to other heads, or to the chain as part of the
      protocol.
    oneOf:
      - title: ClientEffect
        type: object
        additionalProperties: false
        required:
          - tag
          - serverOutput
        description: >-
          An effect representing some output to send to the client.
        properties:
          tag:
            type: string
            enum: ["ClientEffect"]
          serverOutput:
            $ref: "#/definitions/ServerOutput"

      - title: NetworkEffect
        type: object
        additionalProperties: false
        required:
          - tag
          - message
        description: >-
          An effect representing some message to broadcast to other parties in the
          Head.
        properties:
          tag:
            type: string
            enum: ["NetworkEffect"]
          message:
            $ref: "#/definitions/Message"
      - title: OnChainEffect
        type: object
        additionalProperties: false
        required:
          - tag
          - chainState
          - postChainTx
        description: >-
          An effect representing some transaction must be posted on-chain. Note
          that incoming transactions are represented by OnChainEvent which can be
          different from outgoing transactions.
        properties:
          tag:
            type: string
            enum: ["OnChainEffect"]
          chainState:
            $ref: "api.yaml#/components/schemas/ChainState"
          postChainTx:
            $ref: "api.yaml#/components/schemas/PostChainTx"
      - title: Delay
        type: object
        additionalProperties: false
        required:
          - tag
          - delay
          - reason
          - event
        description: >-
          A special effect requesting the given event to be delayed from
          processing for some amount of time. Delays can happen in the protocol
          because messages can be received out-of-order due to the asynchronous
          nature of the network, hence an otherwise invalid event could become
          invalid in the future.
        properties:
          tag:
            type: string
            enum: ["Delay"]
          delay:
            type: number
            minimum: 0
            description: >-
              The length of the delay, in seconds.
          reason:
            $ref: "#/definitions/WaitReason"
          event:
            $ref: "#/definitions/Event"

  Outcome:
    description: >-
      The decision taken by the node logic after processing an Event.
    oneOf:
      - title: OnlyEffects
        type: object
        additionalProperties: false
        required:
          - tag
          - effects
        description: >-
          An outcome representing the list of actions to be taken by the node
          to transition the protocol.
        properties:
          tag:
            type: string
            enum: ["OnlyEffects"]
          effects:
            type: array
            items:
              type: object
              $ref: "#/definitions/Effect"
      - title: NewState
        type: object
        additionalProperties: false
        required:
          - tag
          - headState
          - effects
        description: >-
          An outcome representing the list of actions to be taken by the node
          to transition the protocol, and the new resulting state.
        properties:
          tag:
            type: string
            enum: ["NewState"]
          headState:
            type: object
            $ref: "#/definitions/HeadState"
          effects:
            type: array
            items:
              type: object
              $ref: "#/definitions/Effect"
      - title: Wait
        type: object
        additionalProperties: false
        required:
          - tag
          - reason
        description: >-
          An outcome representing the time that needs to pass before re-enqueuing
          the input event to be processed again.
        properties:
          tag:
            type: string
            enum: ["Wait"]
          reason:
            type: object
            $ref: "#/definitions/WaitReason"
      - title: Error
        type: object
        additionalProperties: false
        required:
          - tag
          - error
        description: >-
          An outcome representing an error to be logged by the node after processing
          an input event.
        properties:
          tag:
            type: string
            enum: ["Error"]
          error:
            type: object
            $ref: "#/definitions/LogicError"

  WaitReason:
    oneOf:
      - title: WaitOnNotApplicableTx
        description: >-
          A transaction failed to apply, but could apply later on.
        type: object
        additionalProperties: false
        required:
          - tag
          - validationError
        properties:
          tag:
            type: string
            enum: ["WaitOnNotApplicableTx"]
          validationError:
            <<: { "$ref": "#/definitions/ValidationError" }
            description: >-
              Description of the cause of the validation failure.
      - title: WaitOnSnapshotNumber
        description: >-
          Current observed snapshot is not the right one, waiting for some other
          number.
        type: object
        additionalProperties: false
        required:
          - tag
          - waitingFor
        properties:
          tag:
            type: string
            enum: ["WaitOnSnapshotNumber"]
          waitingFor:
            <<: { "$ref": "api.yaml#/components/schemas/SnapshotNumber" }
            description: >-
              The expected number.
      - title: WaitOnSeenSnapshot
        description: >-
          No current snapshot is available, waiting for some snapshot to start.
        type: object
        additionalProperties: false
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["WaitOnSeenSnapshot"]
      - title: WaitOnContestationDeadline
        description: >-
          Contestation period is not over yet.
        type: object
        additionalProperties: false
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["WaitOnContestationDeadline"]

  IP:
    type: object
    oneOf:
      - title: IPv4
        type: object
        properties:
          tag:
            type: string
            enum: ["IPv4"]
          ipv4:
            type: string
      - title: IPv6
        type: string
        properties:
          tag:
            type: string
            enum: ["IPv6"]
          ipv6:
            type: string

  RunOptions:
    type: object
    required:
      - verbosity
      - nodeId
      - host
      - port
      - peers
      - apiHost
      - apiPort
      - hydraSigningKey
      - hydraVerificationKeys
      - hydraScriptsTxId
      - persistenceDir
      - chainConfig
      - ledgerConfig
    properties:
      verbosity:
        oneOf:
          - title: Quiet
            properties:
              tag:
                type: string
                enum: ["Quiet"]
          - title: Verbose
            properties:
              tag:
                type: string
                enum: ["Verbose"]
              contents:
                type: string
      nodeId:
        type: string
      host:
        type: object
        $ref: "#/definitions/IP"
      port:
        type: integer
      peers:
        type: array
        items:
          $ref: "api.yaml#/components/schemas/Host"
      apiHost:
        type: object
        $ref: "#/definitions/IP"
      apiPort:
        type: integer
      monitoringPort:
        oneOf:
          - type: "null"
          - type: integer
      hydraSigningKey:
        type: string
      hydraVerificationKeys:
        type: array
        items:
          type: string
      hydraScriptsTxId:
        $ref: "api.yaml#/components/schemas/TxId"
      persistenceDir:
        type: string
      chainConfig:
        $ref: "api.yaml#/components/schemas/ChainConfig"
      ledgerConfig:
        type: object
        properties:
          cardanoLedgerGenesisFile:
            type: string
          cardanoLedgerProtocolParametersFile:
            type: string
