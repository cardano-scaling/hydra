asyncapi: '2.3.0'
info:
  title: Hydra Node API
  version: '0.15.0'
  description: |
    WebSocket/HTTP API for administrating & interacting with Hydra Heads: multi-party isomorphic state-channels for Cardano.

    Once started, a Hydra node provides an API in the forms of JSON messages over WebSocket/HTTP endpoints. An Hydra node is an event-driven application where users (a.k.a you) are one possible source of inputs. Other sources can be mainly other Hydra nodes in the network, or transactions observed on the layer 1 (e.g. a closing transaction).
    Therefore, once connected, clients receive a stream of outputs as they arrive. Clients get to decide (using query parameters) if they want to observe the history of outputs and the transaction format.
    For example if client provides a path that looks like this `/?history=no&tx-output=cbor&snapshot-utxo=no` the server will not serve prior history of server outputs, the transaction fields in the json will be encoded as CBOR (base16 encoded), and the utxo field in the json will be omitted.

    They can interact with their node by pushing events to it, some are local, and some will have consequences on the rest of the head.
    See [the documentation](https://hydra.family/head-protocol/core-concepts/behavior/) for more details on the overall API behavior.

    Users can also use the HTTP endpoint to draft a commit tx using their own utxo.

    > By default, a Hydra node listens for TCP WebSocket connections on port `tcp/4001` . This can be changed using `--port`.

  license:
    name: Apache 2.0
    url: https://raw.githubusercontent.com/input-output-hk/hydra/master/LICENSE

defaultContentType: application/json

servers:
  localhost-ws:
    url: "{host}:{port}"
    protocol: ws
    description: |
    variables:
      host:
        description: Address the Hydra node is listening for client connections.
        default: '127.0.0.1'
      port:
        description: Port the Hydra node is listening for client connections.
        default: "4001"
  localhost-http:
    url: "{host}:{port}"
    protocol: http
    description: |
    variables:
      host:
        description: Address at which the Hydra node is accepting the client requests.
        default: '127.0.0.1'
      port:
        description: Port at which the Hydra node is accepting the client requests.
        default: "4001"

channels:
  /:
    description: Main entry point for Websockets server in Hydra service.
    servers:
      - localhost-ws
    bindings:
      ws:
        query:
          history:
            required: false
            description: Specify weather the client wants to receive the full node history. Default is yes.
            schema:
              type: string
              enum: ["yes", "no"]
          tx-output:
            description: Specify weather the client wants see transactions encoded as cbor. Default is json.
            schema:
              type: string
              enum: ["json", "cbor"]
          snapshot-utxo:
            description: Specify weather the client wants see the snapshot utxo. Default is yes.
            schema:
              type: string
              enum: ["yes", "no"]

    subscribe:
      summary: Events emitted by the Hydra node.
      operationId: serverOutput
      message:
        oneOf:
          - $ref: "api.yaml#/components/messages/Greetings"
          - $ref: "api.yaml#/components/messages/PeerConnected"
          - $ref: "api.yaml#/components/messages/PeerDisconnected"
          - $ref: "api.yaml#/components/messages/HeadIsInitializing"
          - $ref: "api.yaml#/components/messages/Committed"
          - $ref: "api.yaml#/components/messages/HeadIsOpen"
          - $ref: "api.yaml#/components/messages/HeadIsClosed"
          - $ref: "api.yaml#/components/messages/HeadIsContested"
          - $ref: "api.yaml#/components/messages/ReadyToFanout"
          - $ref: "api.yaml#/components/messages/HeadIsAborted"
          - $ref: "api.yaml#/components/messages/HeadIsFinalized"
          - $ref: "api.yaml#/components/messages/TxValid"
          - $ref: "api.yaml#/components/messages/TxInvalid"
          - $ref: "api.yaml#/components/messages/SnapshotConfirmed"
          - $ref: "api.yaml#/components/messages/GetUTxOResponse"
          - $ref: "api.yaml#/components/messages/InvalidInput"
          - $ref: "api.yaml#/components/messages/PostTxOnChainFailed"
          - $ref: "api.yaml#/components/messages/CommandFailed"
          - $ref: "api.yaml#/components/messages/IgnoredHeadInitializing"
          - $ref: "api.yaml#/components/messages/DecommitRequested"
          - $ref: "api.yaml#/components/messages/DecommitApproved"
          - $ref: "api.yaml#/components/messages/DecommitProcessed"
          - $ref: "api.yaml#/components/messages/DecommitAlreadyInFlight"

    publish:
      summary: Commands sent to the Hydra node.
      operationId: clientInput
      message:
        oneOf:
          - $ref: "api.yaml#/components/messages/Init"
          - $ref: "api.yaml#/components/messages/Abort"
          - $ref: "api.yaml#/components/messages/NewTx"
          - $ref: "api.yaml#/components/messages/GetUTxO"
          - $ref: "api.yaml#/components/messages/Decommit"
          - $ref: "api.yaml#/components/messages/Close"
          - $ref: "api.yaml#/components/messages/Contest"
          - $ref: "api.yaml#/components/messages/Fanout"

  /commit:
    servers:
      - localhost-http
    publish:
      description: Draft a commit transaction, which can be completed and later submitted to the L1 network.
      operationId: draftCommitTxRequest
      message:
        $ref: "api.yaml#/components/messages/DraftCommitTxRequest"
      bindings:
        http:
          type: request
          method: POST
          bindingVersion: '0.1.0'
    subscribe:
      operationId: draftCommitTxResponse
      description: |
        Possible responses of this endpoint are:
          * DraftCommitTxResponse - 200 ok
          * CannotCommitReferenceScript - 400 bad request
          * CommittedTooMuchADAForMainnet - 400 bad request
          * UnsupportedLegacyOutput - 400 bad request
          * SpendingNodeUtxoForbidden - 400 bad request
      message:
        $ref: "api.yaml#/components/messages/DraftCommitTxResponse"
      bindings:
        http:
          type: response
          method: POST
          bindingVersion: '0.1.0'

  /decommit:
    servers:
      - localhost-http
    publish:
      description: Draft a decommit transaction, which needs to be signed by the requester and later on validated against the local ledger.
      operationId: draftDecommitTx
      message:
        $ref: "api.yaml#/components/messages/DecommitRequest"
      bindings:
        http:
          type: request
          method: POST
          bindingVersion: '0.1.0'
    subscribe:
      operationId: draftCommitTxResponse
      description: |
        Possible responses of this endpoint are:
          * 200 OK with empty body
          * 400 BadRequest on parsing errors with string as body

  /protocol-parameters:
    servers:
      - localhost-http
    subscribe:
      description: Get cardano protocol parameters.
      operationId: getProtocolParameters
      message:
        $ref: "api.yaml#/components/messages/ProtocolParameters"
      bindings:
        http:
          type: response
          method: GET
          bindingVersion: '0.1.0'
  /cardano-transaction:
    servers:
      - localhost-http
    publish:
      operationId: submitTxRequest
      message:
        summary: |
          Cardano transaction to be submitted to the L1 network.
          Accepts transactions encoded as Base16 CBOR string, TextEnvelope type or JSON.
        payload:
          oneOf:
              - $ref: "api.yaml#/components/schemas/RawTransaction"
              - $ref: "api.yaml#/components/schemas/TextEnvelopeTransaction"
              - $ref: "api.yaml#/components/schemas/Transaction"
      bindings:
        http:
          type: response
          method: POST
          bindingVersion: '0.1.0'
    subscribe:
      operationId: submitTxResponse
      message:
        oneOf:
        - name: TransactionSubmitted
          summary: 200 OK
          description: Successfully submitted a cardano transaction to the L1 network.
          payload:
            type: object
            additionalProperties: false
            properties:
              tag:
                type: string
                enum: ["TransactionSubmitted"]
        - name: PostTxError
          summary: 400 Bad Request
          payload:
            $ref: "api.yaml#/components/schemas/PostTxError"
      bindings:
        http:
          type: request
          method: POST
          bindingVersion: '0.1.0'
components:
  messages:
    ########
    #
    # Client Inputs
    #
    #######

    Init:
      title: Init
      description: |
        Initializes a new Head. This command is a no-op when a Head is already open and the server will output an `CommandFailed` message should this happen.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["Init"]

    Abort:
      title: Abort
      description: |
        Aborts a head before it is opened. This can only be done before all participants have committed. Once opened, the head can't be aborted anymore but it can be closed using: `Close`.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["Abort"]

    NewTx:
      title: NewTx
      description: |
        Submit a transaction through the head. Note that the transaction is only broadcast if well-formed and valid.
      payload:
        type: object
        required:
          - tag
          - transaction
        properties:
          tag:
            type: string
            enum: ["NewTx"]
          transaction:
            oneOf:
              - $ref: "api.yaml#/components/schemas/RawTransaction"
              - $ref: "api.yaml#/components/schemas/TextEnvelopeTransaction"
              - $ref: "api.yaml#/components/schemas/Transaction"

    Decommit:
      title: Decommit
      description: |
        Request a decommit by providing a decommit tx. Upon reaching consensus, this
        will eventually result in corresponding transaction outputs becoming
        available on the layer 1.
      payload:
        type: object
        required:
          - tag
          - decommitTx
        properties:
          tag:
            type: string
            enum: ["Decommit"]
          decommitTx:
            $ref: "api.yaml#/components/schemas/Transaction"
    Close:
      title: Close
      description: |
        Terminate a head with the latest known snapshot. This effectively moves the head from the Open state to the Close state where the contestation phase begin. As a result of closing a head, no more transactions can be submitted via NewTx.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["Close"]

    Contest:
      title: Contest
      description: |
        Challenge the latest snapshot announced as a result of a head closure from another participant. Note that this necessarily contest with the latest snapshot known of your local Hydra node. Participants can only contest once.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["Contest"]

    Fanout:
      title: Fanout
      description: |
        Finalize a head after the contestation period passed. This will distribute the final (as closed and maybe contested) head state back on the layer 1.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["Fanout"]

    GetUTxO:
      title: GetUTxO
      description: |
        Asynchronously access the current UTxO set of the Hydra node. This eventually triggers a UTxO event from the server.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["GetUTxO"]

    ########
    #
    # Server Outputs
    #
    #######

    Greetings:
      title: Greetings
      description: |
        A friendly welcome message which tells a client something about the node. Currently used for knowing what Party the server embodies. This message produced whenever the hydra-node starts and clients should take consequence of seeing this. For example, we can assume no peers connected when we see 'Greetings'.
      payload:
        type: object
        required:
          - tag
          - me
          - headStatus
          - seq
          - timestamp
          - hydraNodeVersion
        properties:
          tag:
            type: string
            enum: ["Greetings"]
          me:
            $ref: "api.yaml#/components/schemas/Party"
          headStatus:
            $ref: "api.yaml#/components/schemas/HeadStatus"
          snapshotUtxo:
            $ref: "api.yaml#/components/schemas/UTxO"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"
          hydraNodeVersion:
            $ref: "api.yaml#/components/schemas/HydraNodeVersion"

    PeerConnected:
      title: PeerConnected
      description: |
        A peer is now connected to the head network.
      payload:
        type: object
        required:
          - tag
          - peer
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["PeerConnected"]
          peer:
            $ref: "api.yaml#/components/schemas/NodeId"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    PeerDisconnected:
      title: PeerDisconnected
      description: |
        A peer has disconnected from the head network.
      payload:
        type: object
        required:
          - tag
          - peer
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["PeerDisconnected"]
          peer:
            $ref: "api.yaml#/components/schemas/NodeId"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    HeadIsInitializing:
      title: HeadIsInitializing
      description: |
        A `Init` transaction has been observed on-chain, with the given HeadId
      payload:
        type: object
        required:
          - tag
          - headId
          - parties
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsInitializing"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          parties:
            type: array
            items:
              $ref: "api.yaml#/components/schemas/Party"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    Committed:
      title: Committed
      description: |
        A `Commit` from a head participant has been observed on-chain.
      payload:
        type: object
        required:
          - tag
          - party
          - utxo
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["Committed"]
          party:
            $ref: "api.yaml#/components/schemas/Party"
          utxo:
            $ref: "api.yaml#/components/schemas/UTxO"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    DecommitRequestReceived:
      title: DecommitRequestReceived
      description: |
        Request to decommit some UTxO from the local ledger state is received.
      payload:
        type: object
        required:
          - tag
          - headId
          - utxoToDecommit
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["DecommitRequestReceived"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          utxoToDecommit:
            $ref: "api.yaml#/components/schemas/UTxO"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    DecommitTxInvalid:
      title: DecommitTxInvalid
      description: |
        Decommit tx could not be applied to local ledger state.
      payload:
        type: object
        required:
          - tag
          - headId
          - decommitTx
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["DecommitRequestReceived"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          decommitTx:
            $ref: "api.yaml#/components/schemas/Transaction"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    DecommitRequested:
      title: DecommitRequested
      description: |
        Notify client that the request for decommit was received.
      payload:
        type: object
        required:
          - tag
          - utxoToDecommit
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["DecommitRequested"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          utxoToDecommit:
            $ref: "api.yaml#/components/schemas/UTxO"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    DecommitApproved:
      title: DecommitApproved
      description: |
        Decommit request is validated by other participants and decommit tx is ready to be posted on layer 1.
      payload:
        type: object
        required:
          - tag
          - party
          - utxoToDecommit
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["DecommitApproved"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          utxoToDecommit:
            $ref: "api.yaml#/components/schemas/UTxO"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    DecommitProcessed:
      title: DecommitProcessed
      description: |
        Decommit request is fully processed and hydra-node is ready to accept another decommit request.
      payload:
        type: object
        required:
          - tag
          - headId
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["DecommitProcessed"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    DecommitAlreadyInFlight:
      title: DecommitAlreadyInFlight
      description: |
        Requested decommit was rejected since the previous decommit request has not finished processing.
      payload:
        type: object
        required:
          - tag
          - headId
          - decommitTx
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["DecommitAlreadyInFlight"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          decommitTx:
            $ref: "api.yaml#/components/schemas/Transaction"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"


    HeadIsOpen:
      title: HeadIsOpen
      description: |
        All parties have committed, and a successful `CollectCom` transaction was observed on-chain. The head is now open; transactions can flow.
      payload:
        type: object
        required:
          - tag
          - headId
          - utxo
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsOpen"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          utxo:
            $ref: "api.yaml#/components/schemas/UTxO"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    HeadIsClosed:
      title: HeadIsClosed
      description: |
        A `Close` transaction has been observed on-chain, the head is now closed and the contestation phase begins.
      payload:
        type: object
        required:
          - tag
          - headId
          - snapshotNumber
          - contestationDeadline
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsClosed"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          snapshotNumber:
            $ref: "api.yaml#/components/schemas/SnapshotNumber"
          contestationDeadline:
            $ref: "api.yaml#/components/schemas/UTCTime"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    HeadIsContested:
      title: HeadIsContested
      description: |
        A `Contest` transaction has been observed on-chain, that means the head
        state has been successfully contested and given snapshot number is now
        the latest accepted snapshot.
      payload:
        type: object
        required:
          - tag
          - headId
          - snapshotNumber
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsContested"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          snapshotNumber:
            $ref: "api.yaml#/components/schemas/SnapshotNumber"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    ReadyToFanout:
      title: ReadyToFanout
      description: |
        The contestation period has passed and the head can now be finalized by
        a fanout transaction.
      payload:
        type: object
        required:
          - tag
          - headId
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["ReadyToFanout"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    HeadIsAborted:
      title: HeadIsAborted
      description: |
        One of the participant did `Abort` the head before all commits were done or collected.
      payload:
        type: object
        required:
          - tag
          - headId
          - utxo
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsAborted"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          utxo:
            $ref: "api.yaml#/components/schemas/UTxO"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    HeadIsFinalized:
      title: HeadIsFinalized
      description: |
        The head was already closed and the contestation period is now over.
      payload:
        type: object
        required:
          - tag
          - headId
          - utxo
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsFinalized"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          utxo:
            $ref: "api.yaml#/components/schemas/UTxO"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    TxValid:
      title: TxValid
      description: |
        Observed a valid transaction inside the head. Note that a node observes
        its own transactions and it may still happen that this transaction is
        not included in a snapshot.
      payload:
        type: object
        required:
          - tag
          - headId
          - transaction
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["TxValid"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          transaction:
            description: Choose between output formats using the `tx-output` query parameter.
            oneOf:
              - $ref: "api.yaml#/components/schemas/Transaction"
              - $ref: "api.yaml#/components/schemas/RawTransaction"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    TxInvalid:
      title: TxInvalid
      description: |
        Observed an invalid transaction inside the head. Either it is not yet
        valid (because some other transactions need to be seen first), or it is
        no longer valid (because of conflicting transactions observed
        in-between. The included validation error should give an indication why
        it was not applicable to the given UTxO (the local, seen ledger state).
      payload:
        type: object
        required:
        - tag
        - headId
        - utxo
        - transaction
        - validationError
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["TxInvalid"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          utxo:
            $ref: "api.yaml#/components/schemas/UTxO"
          transaction:
            description: Choose between output formats using the `tx-output` query parameter.
            oneOf:
              - $ref: "api.yaml#/components/schemas/Transaction"
              - $ref: "api.yaml#/components/schemas/RawTransaction"
          validationError:
            type: object
            properties:
              reason:
                type: string
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    SnapshotConfirmed:
      title: SnapshotConfirmed
      description: |
        The given snapshot has been multi-signed by all head participants and is now confirmed.
      payload:
        type: object
        required:
          - tag
          - headId
          - snapshot
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["SnapshotConfirmed"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          snapshot:
            $ref: "api.yaml#/components/schemas/Snapshot"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    GetUTxOResponse:
      title: GetUTxOResponse
      description: |
        Emitted as a result of a `GetUTxO` to reflect the current UTxO of the underlying node.
      payload:
        type: object
        required:
        - tag
        - headId
        - utxo
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["GetUTxOResponse"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          utxo:
            $ref: "api.yaml#/components/schemas/UTxO"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    InvalidInput:
      title: InvalidInput
      description: |
        Emitted by the server when it has failed to parse some client input. It returns the malformed input as well as some hint about what went wrong.
      payload:
        type: object
        required:
        - tag
        - reason
        - input
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["InvalidInput"]
          reason:
            type: string
          input:
            type: string
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    PostTxOnChainFailed:
      title: PostTxOnChainFailed
      description: |
        Something wrong happened when trying to post a transaction on-chain. Provides information about what kind of transaction was tentatively posted, and the reason for failure.
      payload:
        type: object
        additionalProperties: false
        required:
        - tag
        - postChainTx
        - postTxError
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["PostTxOnChainFailed"]
          postChainTx:
            $ref: "api.yaml#/components/schemas/PostChainTx"
          postTxError:
            $ref: "api.yaml#/components/schemas/PostTxError"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    CommandFailed:
      title: CommandFailed
      description: |
        Emitted by the server when a well-formed client input was not processable. For example, if trying to close a non opened head or, when trying to commit after having already committed.
      payload:
        type: object
        required:
        - tag
        - clientInput
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["CommandFailed"]
          clientInput:
            oneOf:
              - $ref: "api.yaml#/components/messages/Init/payload"
              - $ref: "api.yaml#/components/messages/Abort/payload"
              - $ref: "api.yaml#/components/messages/NewTx/payload"
              - $ref: "api.yaml#/components/messages/GetUTxO/payload"
              - $ref: "api.yaml#/components/messages/Close/payload"
              - $ref: "api.yaml#/components/messages/Contest/payload"
              - $ref: "api.yaml#/components/messages/Fanout/payload"
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

    DraftCommitTxRequest:
      title: DraftCommitTxRequest
      description: |
        Provide utxos that will be used to draft a commit transaction that will be sent back to the user.
        Script utxos must provide a witness, regulars can omit this.
      payload:
        $ref: "api.yaml#/components/schemas/UTxOWithWitness"
        example:
          {
            "0406060506030602040508060506060306050406020207000508040704040203#89": {
              "address": "addr_test1vz66ue36465w2qq40005h2hadad6pnjht8mu6sgplsfj74q9pm4f4",
              "value": {
                "lovelace": 7620669
              }
            },
            "6f066e0f6ba373c0ea7d8b47aefd7e14d1a781698cd052d0254afe65e039b083#0": {
              "address": "addr_test1wqv4z4hc0u5e2c3sppfdu8ckn82hfegpkjagsm4t8ttvlycg9mkca",
              "datum": null,
              "datumhash": "bb30a42c1e62f0afda5f0a4e8a562f7a13a24cea00ee81917b86b89e801314aa",
              "inlineDatum": null,
              "referenceScript": null,
              "value": {
                "lovelace": 1034400
              },
              "witness": {
                "datum": "02",
                "plutusV2Script": {
                  "cborHex": "484701000022200101",
                  "description": "",
                  "type": "PlutusScriptV2"
                },
                "redeemer": "01"
              }
            },
            "87a0c1e14be2cd8c385b6fe5a40b024b7201da9df375542029d91ccaba01ac82#0": {
                "address": "addr_test1wqv4z4hc0u5e2c3sppfdu8ckn82hfegpkjagsm4t8ttvlycg9mkca",
                "datum": null,
                "inlineDatum": {
                  "int": 2
                },
                "inlineDatumhash": "bb30a42c1e62f0afda5f0a4e8a562f7a13a24cea00ee81917b86b89e801314aa",
                "referenceScript": null,
                "value": {
                  "lovelace": 905100
                },
                "witness": {
                  "datum": null,
                  "plutusV2Script": {
                    "cborHex": "484701000022200101",
                    "description": "",
                    "type": "PlutusScriptV2"
                  },
                  "redeemer": "01"
                }
              }
          }

    DraftCommitTxResponse:
      title: DraftCommitTxResponse
      description: |
          Emitted by the server after drafting a commit transaction with the user provided utxos. Transaction returned to the user is in it's cbor representation encoded as Base16.
      payload:
        $ref: "api.yaml#/components/schemas/TextEnvelopeTransaction"

    ProtocolParameters:
      title: ProtocolParameters
      payload:
        $ref: "api.yaml#/components/schemas/ProtocolParameters"

    IgnoredHeadInitializing:
      title: IgnoredHeadInitializing
      description: |
        A `Init` transaction has been observed on-chain, with the given HeadId
        and the given participant identifiers (commonly public key hashes), but
        we are not part of it. It could denote a misconfiguration, or simply
        some other group of parties opening a head.
      payload:
        type: object
        required:
          - tag
          - headId
          - contestationPeriod
          - parties
          - participants
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["IgnoredHeadInitializing"]
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          contestationPeriod:
            $ref: "api.yaml#/components/schemas/ContestationPeriod"
          parties:
            type: array
            items:
              $ref: "api.yaml#/components/schemas/Party"
          participants:
            type: array
            items:
              type: string
              contentEncoding: base16
              description: |
                A hex-encoded string identifying a participant on-chain (usually a hash of a key)
          seq:
            $ref: "api.yaml#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "api.yaml#/components/schemas/UTCTime"

  ########
  #
  # Schemas
  #
  #######

  schemas:
    Address:
      type: string
      description: |
        A bech-32 encoded Cardano address, see
        https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32s and
        https://github.com/cardano-foundation/CIPs/blob/master/CIP-0005/CIP-0005.md
      examples:
        - "addr1w9htvds89a78ex2uls5y969ttry9s3k9etww0staxzndwlgmzuul5"
        - "addr_test1gpr87kyn9d2fzpvy5r5w5fdzyhsx59znpvhfd6fcc5ar7g5yl33cdg0cq24ewdshsutgm"

    ByronAddress:
      type: string
      description: |
        A legacy Byron address.
      examples:
        - "DdzFFzCqrht2KG1vWt5WGhVC9Ezyu32RgB5M2DocdZ6BQU6zj69LSqksDmdM"

    Cbor:
      type: string
      description: |
        The base16-encoding of the CBOR encoding of some binary data
      contentEncoding: base16
      example:
        "820082582089ff4f3ff4a6052ec9d073b3be68b5e7596bd74a04e7b74504a8302fb2278cd95840f66eb3cd160372d617411408792c0ebd9791968e9948112894e2706697a55c10296b04019ed2f146f4d81e8ab17b9d14cf99569a2f85cbfa32320127831db202"

    ConfirmedSnapshot:
      oneOf:
      - title: "InitialSnapshot"
        type: object
        additionalProperties: false
        required:
          - headId
          - initialUTxO
          - tag
        properties:
          headId:
            $ref: "api.yaml#/components/schemas/HeadId"
          initialUTxO:
            $ref: "api.yaml#/components/schemas/UTxO"
          tag:
            type: string
            enum: ["InitialSnapshot"]

      - title: "ConfirmedSnapshot"
        type: object
        additionalProperties: false
        required:
          - snapshot
          - signatures
        properties:
          snapshot:
            $ref: "api.yaml#/components/schemas/Snapshot"
          signatures:
            $ref: "api.yaml#/components/schemas/MultiSignature"
          tag:
            type: string
            enum: ["ConfirmedSnapshot"]

    ContestationPeriod:
      type: number
      description: |
        A contestation duration in seconds.
      example: 60

    HeadId:
      type: string
      description: |
        A unique identifier for a Head, represented by a hex-encoded 16 bytes string.
      contentEncoding: base16
      example:
        "820082582089ff4f3ff4a6052ec9d073"

    HeadSeed:
      type: string
      description: |
        A unique seed identifier to create a 'HeadId', represented by a hex-encoded 16 bytes string.
      contentEncoding: base16
      example:
        "111206190b110f1417181e0120141e05"

    HeadParameters:
      type: object
      additionalProperties: false
      required:
        - contestationPeriod
        - parties
      properties:
        contestationPeriod:
          $ref: "api.yaml#/components/schemas/ContestationPeriod"
        parties:
          type: array
          items:
            $ref: "api.yaml#/components/schemas/Party"

    OnChainId:
      type: string
      description: |
        A on-chain identifier for a Head participant, hex-encoded as 28 bytes string.
      contentEncoding: base16

    HeadStatus:
      type: string
      enum:
        - Idle
        - Initializing
        - Open
        - Closed
        - FanoutPossible
        - Final

    MultiSignature:
      type: object
      description: |
        Aggregated signature produced by Head protocol when a Snapshot is confirmed by all parties.
      additionalProperties: false
      required:
      - multiSignature
      properties:
        multiSignature:
          type: array
          items:
            $ref: "api.yaml#/components/schemas/Signature"

    Party:
      type: object
      description: |
        The verification key for some Party in the Head protocol, uniquely identifying it.
      additionalProperties: false
      required:
        - vkey
      properties:
        vkey:
          type: string
          contentEncoding: base16
      example:
        {
            "vkey": "d0b8f28427aa7b640c636075905cbd6574a431aeaca5b3dbafd47cfe66c35043"
        }

    Peer:
      type: object
      description: |
        Information identifying a network peer.
      properties:
        hostname:
          type: string
          format: hostname
        port:
          type: number
      example:
        {
            "hostname": "10.0.0.10",
            "port": 5001
        }

    # NOTE: We are not using the cardanonical/cardano.json#ProtocolParameters as
    # we need to be compatible with what the cardano-cli provides us
    ProtocolParameters:
      description: |
        Cardano protocol parameters as provided by the cardano-cli and accepted
        by the hydra-node on the command line.
      type: object
      # Allow additional parameters to not be too strict about retired values
      # like minUTxOValue
      additionalProperties: true
      required:
        - protocolVersion
        - maxBlockHeaderSize
        - maxBlockBodySize
        - maxTxSize
        - txFeeFixed
        - txFeePerByte
        - stakeAddressDeposit
        - stakePoolDeposit
        - minPoolCost
        - poolRetireMaxEpoch
        - stakePoolTargetNum
        - poolPledgeInfluence
        - monetaryExpansion
        - treasuryCut
        - costModels # Alonzo onwards
        - executionUnitPrices # Alonzo onwards
        - maxTxExecutionUnits # Alonzo onwards
        - maxBlockExecutionUnits # Alonzo onwards
        - maxValueSize # Alonzo onwards
        - collateralPercentage # Alonzo onwards
        - maxCollateralInputs # Alonzo onwards
        - utxoCostPerByte # Babbage onwards
      properties:
        protocolVersion:
          "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/ProtocolVersion"
        maxBlockBodySize:
          # XXX: NumberOfBytes in cardanonical
          type: integer
          minimum: 0
        maxBlockHeaderSize:
          # XXX: NumberOfBytes in cardanonical
          type: integer
          minimum: 0
        maxTxSize:
          # XXX: NumberOfBytes in cardanonical
          type: integer
          minimum: 0
        txFeeFixed:
          "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/Lovelace"
        txFeePerByte:
          "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/UInt64"
        stakeAddressDeposit:
          "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/Lovelace"
        stakePoolDeposit:
          "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/Lovelace"
        minPoolCost:
          "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/Lovelace"
        poolRetireMaxEpoch:
          "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/UInt64"
        stakePoolTargetNum:
          # XXX: UInt64 in cardanonical, but Natural in cardano-api
          type: integer
          minimum: 0
        poolPledgeInfluence:
          # XXX: would be better "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/Ratio"
          type: number
        monetaryExpansion:
          # XXX: would be better "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/Ratio"
          type: number
        treasuryCut:
          # XXX: would be better "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/Ratio"
          type: number
        costModels:
          type: object
          # XXX: Different key naming scheme than in cardanonical
          propertyNames:
            title: Language
            type: string
            enum:
              - "PlutusV1"
              - "PlutusV2"
              - "PlutusV3"
          additionalProperties:
            "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/CostModel"
        executionUnitPrices:
          # XXX: Object fields different in cardanonical and using Ratio
          priceMemory:
            type: number
          priceSteps:
            type: number
        maxTxExecutionUnits:
          # XXX: Object fields different in cardanonical
          properties:
            # XXX: UInt64 in cardanonical, but Rational in cardano-api
            memory:
              type: number
            cpu:
              type: number
        maxBlockExecutionUnits:
          # XXX: Object fields different in cardanonical
          properties:
            # XXX: UInt64 in cardanonical, but Rational in cardano-api
            memory:
              type: number
            cpu:
              type: number
        maxValueSize:
          # XXX: NumberOfBytes in cardanonical
          type: integer
          minimum: 0
        collateralPercentage:
          # XXX: UInt64 in cardanonical, but Natural in cardano-api
          type: integer
          minimum: 0
        maxCollateralInputs:
          # XXX: UInt64 in cardanonical, but Natural in cardano-api
          type: integer
          minimum: 0
        utxoCostPerByte:
          # XXX: Coefficient in cardanonical is UInt64, but should be lovelace
          "$ref": "https://raw.githubusercontent.com/CardanoSolutions/cardanonical/main/cardano.json#/definitions/Lovelace"

    NodeId:
      type: string
      description: Hydra Node identifier
      example: "some hydra-node id"

    PostChainTx:
      description: |
        Description of outgoing On-Chain transactions for the Head protocol. As is
        the case for OnChainTx, these data structures completely abstract away the
        actual details of the transaction and only represent data relevant for the
        protocol to make some progress.
      oneOf:
        - title: InitTx
          type: object
          additionalProperties: false
          required:
            - tag
            - participants
            - headParameters
          description: |
            The initial transaction of the Head defining its parameters.
          properties:
            tag:
              type: string
              enum: ["InitTx"]
            participants:
              type: array
              items:
                $ref: "api.yaml#/components/schemas/OnChainId"
            headParameters:
              $ref: "api.yaml#/components/schemas/HeadParameters"
        - title: AbortTx
          type: object
          additionalProperties: false
          required:
            - tag
            - utxo
            - headSeed
          description: |
            Abort the opening of the Head process.
          properties:
            tag:
              type: string
              enum: ["AbortTx"]
            utxo:
              $ref: "api.yaml#/components/schemas/UTxO"
            headSeed:
              $ref: "api.yaml#/components/schemas/HeadSeed"
        - title: CollectComTx
          type: object
          additionalProperties: false
          required:
            - tag
            - utxo
            - headId
            - headParameters
          description: |
            Confirm the opening of the Head collecting the committed UTxO set
            combined from all individual commits.
          properties:
            tag:
              type: string
              enum: ["CollectComTx"]
            utxo:
              $ref: "api.yaml#/components/schemas/UTxO"
            headId:
              $ref: "api.yaml#/components/schemas/HeadId"
            headParameters:
              $ref: "api.yaml#/components/schemas/HeadParameters"
        - title: DecrementTx
          type: object
          additionalProperties: false
          required:
            - tag
            - headId
            - headParameters
            - decrementUTxO
            - snapshot
            - signatures
          description: |
            Post a transaction to decommit some UTxO from the Head.
          properties:
            tag:
              type: string
              enum: ["DecrementTx"]
            headId:
              $ref: "api.yaml#/components/schemas/HeadId"
            headParameters:
              $ref: "api.yaml#/components/schemas/HeadParameters"
            decrementUTxO:
              $ref: "api.yaml#/components/schemas/UTxO"
            snapshot:
              $ref: "api.yaml#/components/schemas/Snapshot"
            signatures:
              $ref: "api.yaml#/components/schemas/MultiSignature"
        - title: CloseTx
          type: object
          additionalProperties: false
          required:
            - tag
            - headId
            - headParameters
            - confirmedSnapshot
          description: |
            Close the currently open Head with the given snapshot.
          properties:
            tag:
              type: string
              enum: ["CloseTx"]
            headId:
              $ref: "api.yaml#/components/schemas/HeadId"
            headParameters:
              $ref: "api.yaml#/components/schemas/HeadParameters"
            confirmedSnapshot:
              $ref: "api.yaml#/components/schemas/ConfirmedSnapshot"
        - title: ContestTx
          type: object
          additionalProperties: false
          required:
            - tag
            - headId
            - headParameters
            - confirmedSnapshot
          description: |
            Contest a previously posted snapshot (from a Close or Contest
            transaction) with a newer snapshot.
          properties:
            tag:
              type: string
              enum: ["ContestTx"]
            headId:
              $ref: "api.yaml#/components/schemas/HeadId"
            headParameters:
              $ref: "api.yaml#/components/schemas/HeadParameters"
            confirmedSnapshot:
              $ref: "api.yaml#/components/schemas/ConfirmedSnapshot"
        - title: FanoutTx
          type: object
          additionalProperties: false
          required:
            - tag
            - utxo
            - headSeed
            - contestationDeadline
          description: |
            Finalise the Head posting all UTxO from the Head on-chain.
          properties:
            tag:
              type: string
              enum: ["FanoutTx"]
            utxo:
              $ref: "api.yaml#/components/schemas/UTxO"
            headSeed:
              $ref: "api.yaml#/components/schemas/HeadSeed"
            contestationDeadline:
              $ref: "api.yaml#/components/schemas/UTCTime"

    PostTxError:
      description: |
        Provides more details about transaction submission failure.
      oneOf:
        - title: ScriptFailedInWallet
          type: object
          additionalProperties: false
          required:
          - tag
          - redeemerPtr
          - failureReason
          description: >-
            Script execution failed when finalizing a transaction in the wallet.
            The redeemer pointer should give an indication which script failed
            while the reason is a dump of the error. Not intended to be
            machine-processable (right now).
          properties:
            tag:
              type: string
              enum: ["ScriptFailedInWallet"]
            redeemerPtr:
              type: string
            failureReason:
              type: string
        - title: InternalWalletError
          type: object
          additionalProperties: false
          required:
            - tag
            - tx
            - reason
            - headUTxO
          description: |
            Some input in a transaction cannot be resolved to a proper UTxO. This can happen either when some input
            is double-spent or the DirectChain component has not yet caught up with the chain.
          properties:
            tag:
              type: string
              enum: ["InternalWalletError"]
            tx:
              $ref: "api.yaml#/components/schemas/Transaction"
              description: |
                A representation of the faulty transaction
            reason:
              type: string
              description: >-
                The failure reason.
            headUTxO:
              $ref: "api.yaml#/components/schemas/UTxO"
              description: >-
                The Head protocol-relevant UTxO. Depending on the Head's current state, it includes the Head state thread output,
                plus the ν_initial or ν_commit outputs.
        - title: NotEnoughFuel
          description: |
            Raised if the internal wallet could not find a fuel output with
            enough lovelace to balance a transaction. See user manual how to
            fuel up the internal wallet.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["NotEnoughFuel"]
        - title: NoFuelUTXOFound
          description: |
            Raised if the internal wallet could not find a fuel output. See user
            manual how to fuel up the internal wallet.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["NoFuelUTXOFound"]
        - title: CannotFindOwnInitial
          type: object
          additionalProperties: false
          required:
          - tag
          - knownUTxO
          description: >-
            The DirectChain was unable to find the output paying to Initial script corresponding
            to this node's Party, with the relevant _Participation Token_.
          properties:
            tag:
              type: string
              enum: ["CannotFindOwnInitial"]
            knownUTxO:
              $ref: "api.yaml#/components/schemas/UTxO"
              description: >-
                The known UTxO within which the Initial script was looked up for.
        - title: UnsupportedLegacyOutput
          type: object
          additionalProperties: false
          required:
          - tag
          - byronAddress
          description: >-
            The UTxO provided to commit is locked by a (legacy) Byron address, which is not supported.
          properties:
            tag:
              type: string
              enum: ["UnsupportedLegacyOutput"]
            byronAddress:
              $ref: "api.yaml#/components/schemas/ByronAddress"
        - title: CannotCommitReferenceScript
          type: object
          additionalProperties: false
          required:
          - tag
          description: >-
            The UTxO provided to commit contains a reference script, which is currently not supported.
          properties:
            tag:
              type: string
              enum: ["CannotCommitReferenceScript"]
        - title: NoSeedInput
          type: object
          additionalProperties: false
          required:
          - tag
          description: >-
            Initialising a new Head failed because the DirectChain component was unable to find
            a "seed" UTxO to consume. This can happen if no UTxO has been assigned to the internal wallet's address
            for this purpose, or if the component is still catching up with the chain.
            This error is usually transient and clients should retry to post the transaction.
          properties:
            tag:
              type: string
              enum: ["NoSeedInput"]
        - title: InvalidStateToPost
          type: object
          additionalProperties: false
          required:
          - tag
          - chainState
          - txTried
          description: >-
            Attempted to post a transaction that's invalid given current protocol's state. This is definitely a **BUG**.
          properties:
            tag:
              type: string
              enum: ["InvalidStateToPost"]
            chainState:
              $ref: "api.yaml#/components/schemas/ChainState"
            txTried:
              $ref: "api.yaml#/components/schemas/PostChainTx"
        - title: PlutusValidationFailed
          type: object
          additionalProperties: false
          required:
          - tag
          - plutusFailure
          - plutusDebugInfo
          description: >-
            An internal transaction created by the Hydra node failed with Plutus errors. This should not happen in principle
            and may disappear in the final version but is currently useful as a debugging mean.
          properties:
            tag:
              type: string
              enum: ["PlutusValidationFailed"]
            plutusFailure:
              type: string
            plutusDebugInfo:
              type: string
        - title: FailedToPostTx
          type: object
          additionalProperties: false
          required:
          - tag
          - failureReason
          description: >-
            A generic error case. Some transaction that wasn't expected to fail still failed... somehow.
          properties:
            tag:
              type: string
              enum: ["FailedToPostTx"]
            failureReason:
              type: string
        - title: CommittedTooMuchADAForMainnet
          description: |
            Raised if the user tries to commit more than 100 ADA while on the mainnet network.
          type: object
          additionalProperties: false
          required:
          - tag
          - userCommittedLovelace
          - mainnetLimitLovelace
          properties:
            userCommittedLovelace:
              type: number
            mainnetLimitLovelace:
              type: number
            tag:
              type: string
              enum: ["CommittedTooMuchADAForMainnet"]
        - title: FailedToDraftTxNotInitializing
          description: |
            Raised if the user tried to draft a commit tx while Head is not in Initializing state.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["FailedToDraftTxNotInitializing"]
        - title: SpendingNodeUtxoForbidden
          description: |
            Raised if the user tried to draft a commit tx using internal wallet's utxo.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["SpendingNodeUtxoForbidden"]
        - title: InvalidSeed
          description: |
            Raised if the user fails to submit an abort or fanout tx using the wrong seed.
          type: object
          additionalProperties: false
          required:
          - tag
          - headSeed
          properties:
            tag:
              type: string
              enum: ["InvalidSeed"]
            headSeed:
              $ref: "api.yaml#/components/schemas/HeadSeed"
        - title: InvalidHeadId
          description: |
            Raised if the user fails to submit a commit tx using the wrong headId.
          type: object
          additionalProperties: false
          required:
          - tag
          - headId
          properties:
            tag:
              type: string
              enum: ["InvalidHeadId"]
            headId:
              $ref: "api.yaml#/components/schemas/HeadId"
        - title: FailedToConstructAbortTx
          description: |
            Raised if the user fails to submit an abort tx.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["FailedToConstructAbortTx"]
        - title: FailedToConstructCloseTx
          description: |
            Raised if the user fails to submit a close tx.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["FailedToConstructCloseTx"]
        - title: FailedToConstructContestTx
          description: |
            Raised if the user fails to submit a contest tx.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["FailedToConstructContestTx"]
        - title: FailedToConstructCollectTx
          description: |
            Raised if the user fails to submit a collect-com tx.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["FailedToConstructCollectTx"]
        - title: FailedToConstructDecrementTx
          description: |
            Raised if the user fails to submit a decrement tx.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["FailedToConstructDecrementTx"]
        - title: FailedToConstructFanoutTx
          description: |
            Raised if the user fails to submit a fanout tx.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["FailedToConstructFanoutTx"]

    Signature:
      type: string
      description: >-
        A base64-encoded signature.
      contentEncoding: base16

    Snapshot:
      type: object
      required:
      - headId
      - snapshotNumber
      - utxo
      - confirmedTransactions
      - utxoToDecommit
      properties:
        headId:
          $ref: "api.yaml#/components/schemas/HeadId"
        snapshotNumber:
          $ref: "api.yaml#/components/schemas/SnapshotNumber"
        utxo:
          description: Choose between to display or not using the `snapshot-utxo` query parameter.
          $ref: "api.yaml#/components/schemas/UTxO"
        confirmedTransactions:
          type: array
          items:
            $ref: "api.yaml#/components/schemas/TxId"
        utxoToDecommit:
          oneOf:
            - type: "null"
            - $ref: "api.yaml#/components/schemas/UTxO"

    SnapshotNumber:
      type: integer
      minimum: 0

    RawTransaction:
      title: RawTransaction
      description: |
        A CBOR-serialised signed Cardano transaction, encoded in base16.
      type: string
      contentEncoding: base16

    Script:
      type: object
      additionalProperties: false
      required:
        - scriptLanguage
        - script
      properties:
        scriptLanguage:
          type: string
        script:
          type: object
          additionalProperties: false
          required:
            - cborHex
            - description
            - type
          properties:
            cborHex:
              type: string
              contentEncoding: base16
            description:
              type: string
            type:
              type: string
              enum:
                - SimpleScript
                - PlutusScriptV1
                - PlutusScriptV2
      example:
        {
          "script": {
              "cborHex": "8303018282051927168200581c0d94e174732ef9aae73f395ab44507bfa983d65023c11a951f0c32e4",
              "description": "",
              "type": "SimpleScript"
          },
          "scriptLanguage": "SimpleScriptLanguage"
        }

    TextEnvelopeTransaction:
      title: TextEnvelopeTransaction
      description: |
        A Cardano transaction wrapped in a text-envelope, as typically generated by cardano-cli.
      type: object
      required:
        - type
        - cborHex
      properties:
        type:
          type: string
          enum:
            - "Tx BabbageEra"
        description:
          type: string
        cborHex:
          $ref: "api.yaml#/components/schemas/RawTransaction"

    Transaction:
      type: object
      required:
        - id
        - isValid
        - body
      additionalProperties: false
      properties:
        id:
          $ref: "api.yaml#/components/schemas/TxId"
        isValid:
            type: boolean
        body:
          $ref: "api.yaml#/components/schemas/TxBody"
        witnesses:
          type: object
          additionalProperties: false
          properties:
            keys:
              type: array
              items:
                $ref: "api.yaml#/components/schemas/Cbor"
            scripts:
              type: object
              patternProperties:
                "[0-9a-f]+":
                  $ref: "api.yaml#/components/schemas/Cbor"
            redeemers:
              $ref: "api.yaml#/components/schemas/Cbor"
            datums:
              type: object
              patternProperties:
                "[0-9a-f]+":
                  $ref: "api.yaml#/components/schemas/Cbor"
            bootstrap:
              type: array
              items:
                $ref: "api.yaml#/components/schemas/Cbor"
        auxiliaryData:
          $ref: "api.yaml#/components/schemas/Cbor"
      example:
        {
            "id": "7ca4e30387ec4ba0e95604fdab6e867fc3d740220386e1a63d142c71e8eac4ce",
            "isValid": true,
            "auxiliaryData": "d90103a100a30181a40401622c7166f098a89d2a7e006023600a600c66e4a99d7f6b08",
            "body": {
                "inputs": [
                    "03170a2e7597b7b7e3d84c05391d139a62b157e78786d8c082f29dcf4c111314#116",
                    "2208e439244a1d0ef238352e3693098aba9de9dd0154f9056551636c8ed15dc1#149"
                ],
                "outputs": [
                    {
                        "address": "addr1w9htvds89a78ex2uls5y969ttry9s3k9etww0staxzndwlgmzuul5",
                        "datumhash": "2208e439244a1d0ef238352e3693098aba9de9dd0154f9056551636c8ed15dc1",
                        "value": {
                            "lovelace": 12,
                            "4acf2773917c7b547c576a7ff110d2ba5733c1f1ca9cdc659aea3a56": {
                                "91c670": 7
                            }
                        }
                    }
                ],
                "fees": 0
            },
            "witnesses": {
                "redeemers": "84840000...e83fccf5",
                "keys": [
                    "8258...01ad847b",
                    "8258...7944fe3e"
                ],
                "scripts": {
                    "1be26e9d1710022443c8043b259f7b375ec8732191f3845a6aea28e5": "8200820181820519c355",
                },
                "datums": {
                    "ae85d245a3d00bfde01f59f3c4fe0b4bfae1cb37e9cf91929eadcea4985711de": "20",
                }
            }
        }

    TxBody:
      type: object
      required:
        - inputs
        - outputs
      additionalProperties: false
      properties:
        inputs:
          type: array
          description: >-
            A list of inputs for this transaction. Technically, this is actually a Set, eg. the order of elements does not matter and they must be unique.
          items:
            $ref: "api.yaml#/components/schemas/TxIn"
        referenceInputs:
          type: array
          description: >-
            A list of inputs for this transaction. Technically, this is actually a Set, eg. the order of elements does not matter and they must be unique.
          items:
            $ref: "api.yaml#/components/schemas/TxIn"
        collateral:
          type: array
          description: >-
            A list of collateral inputs for this transaction.
          items:
            $ref: "api.yaml#/components/schemas/TxIn"
        totalCollateral:
          oneOf:
            - type: integer
              minimum: 0
            - type: "null"
        collateralReturn:
          $ref: "api.yaml#/components/schemas/TxOut"
        outputs:
          type: array
          description: >-
            A list of outputs. Ordering is important here because a TxOut is referenced by its
            position in the inputs of subsequent transactions.
          items:
            $ref: "api.yaml#/components/schemas/TxOut"
        certificates:
          type: array
          description: >-
            An array of certificates, encoded as hexadecimal representation of CBOR serialisation.
          items:
            $ref: "api.yaml#/components/schemas/Cbor"
        withdrawals:
            $ref: "api.yaml#/components/schemas/Withdrawals"
        fees:
          type: integer
          minimum: 0
          description: >-
            Fees paid for this transaction, in lovelace.
        validity:
          type: object
          description: >-
            Validity interval of this transaction. Both bounds can be omitted in which case the transaction
            has unlimited validity. Each bound is a slot number.
          properties:
            notBefore:
              oneOf:
                - type: integer
                - type: "null"
            notAfter:
              oneOf:
                - type: integer
                - type: "null"
        auxiliaryDataHash:
          type: string
          contentEncoding: base16
          description: >-
            Hex-encoding of the hash of auxiliary data section of the transactions.
          example: "9b258583229a324c3021d036e83f3c1e69ca4a586a91fad0bc9e4ce79f7411e0"
        mint:
          description: >-
            Values minted by this transaction
          $ref: "api.yaml#/components/schemas/Value"
        networkId:
            type: string
            enum:
              - Mainnet
              - Testnet
        scriptIntegrityHash:
          type: string
          contentEncoding: base16
          description: >-
            Hex-encoding of the hash of script data section of the transaction.
          example: "9b258583229a324c3021d036e83f3c1e69ca4a586a91fad0bc9e4ce79f7411e0"
        requiredSignatures:
          type: array
          items:
            type: string
            contentEncoding: base16
            description: >-
              Hex-encoding of the hash of verification keys identifying extra expected signers.

    TxId:
      type: string
      description: |
        A Cardano transaction identifier. This is the hex-encoded hash of the
        transaction's body.
      pattern: "^[0-9a-f]{64}"
      example: "8df1616d4337ede40bbad2914f12977815234b83951bcce3bfcd735aed3f63e4"

    TxIn:
      type: string
      description: |
        A reference to a Cardano transaction output, commonly used as transaction
        input and thus named TxIn. Constructed from the transaction's id and
        the ouput index, separated by a '#'.
      pattern: "^[0-9a-f]{64}#[0-9]+$"
      example: "03170a2e7597b7b7e3d84c05391d139a62b157e78786d8c082f29dcf4c111314#4"

    TxOut:
      type: object
      description: |
        A single transaction output
      required:
      - address
      - value
      additionalProperties: false
      properties:
        address:
          $ref: "api.yaml#/components/schemas/Address"
        value:
          $ref: "api.yaml#/components/schemas/Value"
        referenceScript:
          oneOf:
            - $ref: "api.yaml#/components/schemas/Script"
            - type: "null"
        datumhash:
          oneOf:
            - type: string
              contentEncoding: base16
            - type: "null"
        inlineDatum:
          oneOf:
            - type: object
            - type: "null"
        inlineDatumhash:
          oneOf:
            - type: string
              contentEncoding: base16
            - type: "null"
        datum:
          oneOf:
            - type: string
              contentEncoding: base16
            - type: "null"

    TxOutWithWitness:
      type: object
      description: |
        A single transaction output with optional witness to spend it.
        Some notes related to witness field:
          - When it is present we are treating the output as a script output.
          - When `inlineDatum` is present we ignore the `witness.datum` field.
      required:
      - address
      - value
      additionalProperties: false
      properties:
        address:
          $ref: "api.yaml#/components/schemas/Address"
        value:
          $ref: "api.yaml#/components/schemas/Value"
        referenceScript:
          oneOf:
            - $ref: "api.yaml#/components/schemas/Script"
            - type: "null"
        datumhash:
          oneOf:
            - type: string
              contentEncoding: base16
            - type: "null"
        inlineDatum:
          oneOf:
            - type: object
            - type: "null"
        inlineDatumhash:
          oneOf:
            - type: string
              contentEncoding: base16
            - type: "null"
        datum:
          oneOf:
            - type: string
              contentEncoding: base16
            - type: "null"
        witness:
          oneOf:
            - $ref: "api.yaml#/components/schemas/Witness"
            - type: "null"

    Witness:
      type: object
      description: |
        A script witness
      required:
      - datum
      - plutusV2Script
      - redeemer
      additionalProperties: false
      properties:
        datum:
          type: string
        plutusV2Script:
          $ref: "api.yaml#/components/schemas/PlutusV2Script"
        redeemer:
          type: string
    HydraNodeVersion:
      type: string
      description: |
        Current hydra-node version.

    SequenceNumber:
      type: integer
      minimum: 0
      description: |
        A strictly monotonically increasing counter.
      example: 1

    UTCTime:
      type: string
      format: "date-time"
      description: |
        A data and time as measured by a clock without a time zone. It is stored as a string in ISO 8601 format.

    ChainSlot:
      type: integer
      minimum: 0
      description: |
        A number representing discrete time (slots) on the chain.

    UTxO:
      type: object
      propertyNames:
        pattern: "^[0-9a-f]{64}#[0-9]+$"
      items: # REVIEW: does this work? use additionalProperties here?
        $ref: "api.yaml#/components/schemas/TxOut"
      example:
        {
            "09d34606abdcd0b10ebc89307cbfa0b469f9144194137b45b7a04b273961add8#687": {
                "address": "addr1w9htvds89a78ex2uls5y969ttry9s3k9etww0staxzndwlgmzuul5",
                "value": {
                    "lovelace": 7620669
                }
            }
        }

    UTxOWithWitness:
      type: object
      propertyNames:
        pattern: "^[0-9a-f]{64}#[0-9]+$"
      items:
        $ref: "api.yaml#/components/schemas/TxOutWithWitness"
      example:
        {
            "09d34606abdcd0b10ebc89307cbfa0b469f9144194137b45b7a04b273961add8#687": {
                "address": "addr1w9htvds89a78ex2uls5y969ttry9s3k9etww0staxzndwlgmzuul5",
                "value": {
                    "lovelace": 7620669
                },
                "witness": {
                  "datum": "02",
                  "plutusV2Script": {
                      "cborHex": "420606",
                      "description": "",
                      "type": "PlutusScriptV2"
                  },
                  "redeemer": "21"
                }
            }
        }

    ScriptInfo:
      description: |
        Script data needed to spend user provided utxo.
        If datum field is ommitted we expect inline datum to be present.
      required:
      - redeemer
      - plutusV2Script
      payload:
        type: object
        properties:
          redeemer:
            $ref: "api.yaml#/components/schemas/Cbor"
          datum:
            $ref: "api.yaml#/components/schemas/Cbor"
          plutusV2Script:
            type: object
            $ref: "api.yaml#/components/schemas/PlutusV2Script"

    PlutusV2Script:
      type: object
      description: |
        Plutus V2 Script wrapped in a text-envelope.
      additionalProperties: false
      required:
      - cborHex
      - description
      - type
      properties:
        cborHex:
          $ref: "api.yaml#/components/schemas/Cbor"
        description:
          type: string
        type:
          type: string
          enum: ["PlutusScriptV2"]

    Value:
      type: object
      description: |
        A Cardano value. This is an object containing a number of lovelaces, and
        optional assets, mapping some monetary policy identifier to a
        mapping of coin (arbitrary strings) to some integer value.
        Assets represent native tokens available on the Cardano blockchain, including Non-Fungible Tokens.
      additionalProperties:
        type: object
        description: |
          A map of asset names to integral values. The key is the base16-encoded name of the asset.
        minProperties: 1
        patternProperties:
          "[0-9a-f]*":
            type: integer
            description: |
              A quantity of a certain asset.
      properties:
        lovelace:
          type: integer
          minimum: 0
          description: |
            A (positive) amount of lovelace

    Withdrawals:
      type: object
      description: |
        Mapping of reward addresses to rewards.
      additionalProperties: false
      patternProperties:
        "[0-9a-f]+":
          type: integer
          minimum: 0
          description: >-
            Some non-negative lovelace value.

    NetworkMagic:
      description: |
        NetworkMagic is used to differentiate between different networks during the initial handshake.
      oneOf:
        - title: Mainnet
          required:
            - tag
          properties:
            tag:
              type: string
              enum: ["Mainnet"]

        - title: Testnet
          required:
            - tag
            - magic
          properties:
            tag:
              type: string
              enum: ["Testnet"]
            magic:
              type: integer

    ChainPoint:
      oneOf:
        - title: ChainPointAtGenesis
          required:
            - tag
          properties:
            tag:
              type: string
              enum: ["ChainPointAtGenesis"]
        - title: ChainPoint
          required:
            - tag
            - slot
            - blockHash
          properties:
            tag:
              type: string
              enum: ["ChainPoint"]
            slot:
              type: integer
            blockHash:
              type: string

    # NOTE: We don't want anyone to depend on this!
    ChainState: {}
