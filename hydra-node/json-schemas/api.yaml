asyncapi: '2.3.0'
info:
  title: Hydra Node API
  version: '0.9.0'
  description: |
    WebSocket API for administrating & interacting with Hydra Heads: multi-party isomorphic state-channels for Cardano.

    Once started, a Hydra node provides an API in the forms of JSON messages over WebSocket. An Hydra node is an event-driven application where users (a.k.a you) are one possible source of inputs. Other sources can be mainly other Hydra nodes in the network, or transactions observed on the layer 1 (e.g. a closing transaction).
    Therefore, once connected, clients receive a stream of outputs as they arrive. They can interact with their node by pushing events to it, some are local, and some will have consequences on the rest of the head.
    See [the documentation](https://hydra.family/head-protocol/core-concepts/behavior/) for more details on the overall API behavior.

    > By default, a Hydra node listens for TCP WebSocket connections on port `tcp/4001` . This can be changed using `--port`.

  license:
    name: Apache 2.0
    url: https://raw.githubusercontent.com/input-output-hk/hydra/master/LICENSE

defaultContentType: application/json

servers:
  localhost:
    url: "{host}:{port}"
    protocol: ws
    description: |
    variables:
      host:
        description: Address the Hydra node is listening for client connections.
        default: '127.0.0.1'
      port:
        description: Port the Hydra node is listening for client connections.
        default: "4001"

channels:
  /:
    description: Main (and sole) entry point for the Hydra service.
    servers:
      - localhost
    subscribe:
      summary: Events emitted by the Hydra node.
      operationId: serverOutput
      message:
        oneOf:
          - $ref: "#/components/messages/Greetings"
          - $ref: "#/components/messages/PeerConnected"
          - $ref: "#/components/messages/PeerDisconnected"
          - $ref: "#/components/messages/HeadIsInitializing"
          - $ref: "#/components/messages/Committed"
          - $ref: "#/components/messages/HeadIsOpen"
          - $ref: "#/components/messages/HeadIsClosed"
          - $ref: "#/components/messages/HeadIsContested"
          - $ref: "#/components/messages/ReadyToFanout"
          - $ref: "#/components/messages/HeadIsAborted"
          - $ref: "#/components/messages/HeadIsFinalized"
          - $ref: "#/components/messages/TxValid"
          - $ref: "#/components/messages/TxInvalid"
          - $ref: "#/components/messages/SnapshotConfirmed"
          - $ref: "#/components/messages/GetUTxOResponse"
          - $ref: "#/components/messages/RolledBack"
          - $ref: "#/components/messages/InvalidInput"
          - $ref: "#/components/messages/PostTxOnChainFailed"
          - $ref: "#/components/messages/CommandFailed"

    publish:
      summary: Commands sent to the Hydra node.
      operationId: clientInput
      message:
        oneOf:
          - $ref: "#/components/messages/Init"
          - $ref: "#/components/messages/Abort"
          - $ref: "#/components/messages/Commit"
          - $ref: "#/components/messages/NewTx"
          - $ref: "#/components/messages/GetUTxO"
          - $ref: "#/components/messages/Close"
          - $ref: "#/components/messages/Contest"
          - $ref: "#/components/messages/Fanout"

components:
  messages:
    ########
    #
    # Client Inputs
    #
    #######

    Init:
      title: Init
      description: |
        Initializes a new Head. This command is a no-op when a Head is already open and the server will output an `CommandFailed` message should this happen.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["Init"]

    Abort:
      title: Abort
      description: |
        Aborts a head before it is opened. This can only be done before all participants have committed. Once opened, the head can't be aborted anymore but it can be closed using: `Close`.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["Abort"]

    Commit:
      title: Commit
      description: |
        Join an initialized head. This is how parties get to inject funds inside a head. Note however that the utxo is an object and can be empty should a participant wants to join a head without locking any funds.
      payload:
        type: object
        required:
          - tag
          - utxo
        properties:
          tag:
            type: string
            enum: ["Commit"]
          utxo:
            $ref: "#/components/schemas/UTxO"

    NewTx:
      title: NewTx
      description: |
        Submit a transaction through the head. Note that the transaction is only broadcast if well-formed and valid.
      payload:
        type: object
        required:
          - tag
          - transaction
        properties:
          tag:
            type: string
            enum: ["NewTx"]
          transaction:
            oneOf:
              - $ref: "#/components/schemas/RawTransaction"
              - $ref: "#/components/schemas/TextEnvelopeTransaction"
              - $ref: "#/components/schemas/Transaction"

    Close:
      title: Close
      description: |
        Terminate a head with the latest known snapshot. This effectively moves the head from the Open state to the Close state where the contestation phase begin. As a result of closing a head, no more transactions can be submitted via NewTx.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["Close"]

    Contest:
      title: Contest
      description: |
        Challenge the latest snapshot announced as a result of a head closure from another participant. Note that this necessarily contest with the latest snapshot known of your local Hydra node. Participants can only contest once.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["Contest"]

    Fanout:
      title: Fanout
      description: |
        Finalize a head after the contestation period passed. This will distribute the final (as closed and maybe contested) head state back on the layer 1.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["Fanout"]

    GetUTxO:
      title: GetUTxO
      description: |
        Asynchronously access the current UTxO set of the Hydra node. This eventually triggers a UTxO event from the server.
      payload:
        type: object
        required:
          - tag
        properties:
          tag:
            type: string
            enum: ["GetUTxO"]

    ########
    #
    # Server Outputs
    #
    #######

    Greetings:
      title: Greetings
      description: |
        A friendly welcome message which tells a client something about the node. Currently used for knowing what Party the server embodies. This message produced whenever the hydra-node starts and clients should take consequence of seeing this. For example, we can assume no peers connected when we see 'Greetings'.
      payload:
        type: object
        required:
          - tag
          - me
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["Greetings"]
          me:
            $ref: "#/components/schemas/Party"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    PeerConnected:
      title: PeerConnected
      description: |
        A peer is now connected to the head network.
      payload:
        type: object
        required:
          - tag
          - peer
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["PeerConnected"]
          peer:
            $ref: "#/components/schemas/NodeId"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    PeerDisconnected:
      title: PeerDisconnected
      description: |
        A peer has disconnected from the head network.
      payload:
        type: object
        required:
          - tag
          - peer
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["PeerDisconnected"]
          peer:
            $ref: "#/components/schemas/NodeId"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    HeadIsInitializing:
      title: HeadIsInitializing
      description: |
        A `Init` transaction has been observed on-chain, with the given HeadId
      payload:
        type: object
        required:
          - tag
          - headId
          - parties
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsInitializing"]
          headId:
            $ref: "#/components/schemas/HeadId"
          parties:
            type: array
            items:
              $ref: "#/components/schemas/Party"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    Committed:
      title: Committed
      description: |
        A `Commit` from a head participant has been observed on-chain.
      payload:
        type: object
        required:
          - tag
          - party
          - utxo
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["Committed"]
          party:
            $ref: "#/components/schemas/Party"
          utxo:
            $ref: "#/components/schemas/UTxO"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    HeadIsOpen:
      title: HeadIsOpen
      description: |
        All parties have committed, and a successful `CollectCom` transaction was observed on-chain. The head is now open; transactions can flow.
      payload:
        type: object
        required:
          - tag
          - headId
          - utxo
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsOpen"]
          headId:
            $ref: "#/components/schemas/HeadId"
          utxo:
            $ref: "#/components/schemas/UTxO"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    HeadIsClosed:
      title: HeadIsClosed
      description: |
        A `Close` transaction has been observed on-chain, the head is now closed and the contestation phase begins.
      payload:
        type: object
        required:
          - tag
          - headId
          - snapshotNumber
          - contestationDeadline
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsClosed"]
          headId:
            $ref: "#/components/schemas/HeadId"
          snapshotNumber:
            $ref: "#/components/schemas/SnapshotNumber"
          contestationDeadline:
            $ref: "#/components/schemas/UTCTime"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    HeadIsContested:
      title: HeadIsContested
      description: |
        A `Contest` transaction has been observed on-chain, that means the head
        state has been successfully contested and given snapshot number is now
        the latest accepted snapshot.
      payload:
        type: object
        required:
          - tag
          - headId
          - snapshotNumber
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsContested"]
          headId:
            $ref: "#/components/schemas/HeadId"
          snapshotNumber:
            $ref: "#/components/schemas/SnapshotNumber"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    ReadyToFanout:
      title: ReadyToFanout
      description: |
        The contestation period has passed and the head can now be finalized by
        a fanout transaction.
      payload:
        type: object
        required:
          - tag
          - headId
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["ReadyToFanout"]
          headId:
            $ref: "#/components/schemas/HeadId"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    HeadIsAborted:
      title: HeadIsAborted
      description: |
        One of the participant did `Abort` the head before all commits were done or collected.
      payload:
        type: object
        required:
          - tag
          - headId
          - utxo
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsAborted"]
          headId:
            $ref: "#/components/schemas/HeadId"
          utxo:
            $ref: "#/components/schemas/UTxO"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    HeadIsFinalized:
      title: HeadIsFinalized
      description: |
        The head was already closed and the contestation period is now over.
      payload:
        type: object
        required:
          - tag
          - headId
          - utxo
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["HeadIsFinalized"]
          headId:
            $ref: "#/components/schemas/HeadId"
          utxo:
            $ref: "#/components/schemas/UTxO"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    TxValid:
      title: TxValid
      description: |
        Observed a valid transaction inside the head. Note that a node observes
        its own transactions and it may still happen that this transaction is
        not included in a snapshot.
      payload:
        type: object
        required:
          - tag
          - headId
          - transaction
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["TxValid"]
          headId:
            $ref: "#/components/schemas/HeadId"
          transaction:
            $ref: "#/components/schemas/Transaction"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    TxInvalid:
      title: TxInvalid
      description: |
        Observed an invalid transaction inside the head. Either it is not yet
        valid (because some other transactions need to be seen first), or it is
        no longer valid (because of conflicting transactions observed
        in-between. The included validation error should give an indication why
        it was not applicable to the given UTxO (the local, seen ledger state).
      payload:
        type: object
        required:
        - tag
        - headId
        - utxo
        - transaction
        - validationError
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["TxInvalid"]
          headId:
            $ref: "#/components/schemas/HeadId"
          utxo:
            $ref: "#/components/schemas/UTxO"
          transaction:
            $ref: "#/components/schemas/Transaction"
          validationError:
            type: object
            properties:
              reason:
                type: string
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    SnapshotConfirmed:
      title: SnapshotConfirmed
      description: |
        The given snapshot has been multi-signed by all head participants and is now confirmed.
      payload:
        type: object
        required:
          - tag
          - headId
          - snapshot
          - seq
          - timestamp
        properties:
          tag:
            type: string
            enum: ["SnapshotConfirmed"]
          headId:
            $ref: "#/components/schemas/HeadId"
          snapshot:
            $ref: "#/components/schemas/Snapshot"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    GetUTxOResponse:
      title: GetUTxOResponse
      description: |
        Emitted as a result of a `GetUTxO` to reflect the current UTxO of the underlying node.
      payload:
        type: object
        required:
        - tag
        - headId
        - utxo
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["GetUTxOResponse"]
          headId:
            $ref: "#/components/schemas/HeadId"
          utxo:
            $ref: "#/components/schemas/UTxO"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    InvalidInput:
      title: InvalidInput
      description: |
        Emitted by the server when it has failed to parse some client input. It returns the malformed input as well as some hint about what went wrong.
      payload:
        type: object
        required:
        - tag
        - reason
        - input
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["InvalidInput"]
          reason:
            type: string
          input:
            type: string
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    PostTxOnChainFailed:
      title: PostTxOnChainFailed
      description: |
        Something wrong happened when trying to post a transaction on-chain. Provides information about what kind of transaction was tentatively posted, and the reason for failure.
      payload:
        type: object
        additionalProperties: false
        required:
        - tag
        - postChainTx
        - postTxError
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["PostTxOnChainFailed"]
          postChainTx:
            $ref: "#/components/schemas/PostChainTx"
          postTxError:
            $ref: "#/components/schemas/PostTxError"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    RolledBack:
      title: RolledBack
      description: |
        The node has adopted a different chain fork and we had to rollback the application state.
      payload:
        type: object
        additionalProperties: false
        required:
        - tag
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["RolledBack"]
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

    CommandFailed:
      title: CommandFailed
      description: |
        Emitted by the server when a well-formed client input was not processable. For example, if trying to close a non opened head or, when trying to commit after having already committed.
      payload:
        type: object
        required:
        - tag
        - clientInput
        - seq
        - timestamp
        properties:
          tag:
            type: string
            enum: ["CommandFailed"]
          clientInput:
            oneOf:
              - $ref: "#/components/messages/Init/payload"
              - $ref: "#/components/messages/Abort/payload"
              - $ref: "#/components/messages/Commit/payload"
              - $ref: "#/components/messages/NewTx/payload"
              - $ref: "#/components/messages/GetUTxO/payload"
              - $ref: "#/components/messages/Close/payload"
              - $ref: "#/components/messages/Contest/payload"
              - $ref: "#/components/messages/Fanout/payload"
          seq:
            $ref: "#/components/schemas/SequenceNumber"
          timestamp:
            $ref: "#/components/schemas/UTCTime"

  ########
  #
  # Schemas
  #
  #######

  schemas:
    Address:
      type: string
      description: |
        A bech-32 encoded Cardano address, see
        https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32s and
        https://github.com/cardano-foundation/CIPs/blob/master/CIP-0005/CIP-0005.md
      examples:
        - "addr1w9htvds89a78ex2uls5y969ttry9s3k9etww0staxzndwlgmzuul5"
        - "addr_test1gpr87kyn9d2fzpvy5r5w5fdzyhsx59znpvhfd6fcc5ar7g5yl33cdg0cq24ewdshsutgm"

    ByronAddress:
      type: string
      description: |
        A legacy Byron address.
      examples:
        - "DdzFFzCqrht2KG1vWt5WGhVC9Ezyu32RgB5M2DocdZ6BQU6zj69LSqksDmdM"

    Cbor:
      type: string
      description: |
        The base16-encoding of the CBOR encoding of some binary data
      contentEncoding: base16
      example:
        "820082582089ff4f3ff4a6052ec9d073b3be68b5e7596bd74a04e7b74504a8302fb2278cd95840f66eb3cd160372d617411408792c0ebd9791968e9948112894e2706697a55c10296b04019ed2f146f4d81e8ab17b9d14cf99569a2f85cbfa32320127831db202"

    ConfirmedSnapshot:
      oneOf:
      - title: "InitialSnapshot"
        type: object
        additionalProperties: false
        required:
          - initialUTxO
          - tag
        properties:
          initialUTxO:
            $ref: "#/components/schemas/UTxO"
          tag:
            type: string
            enum: ["InitialSnapshot"]

      - title: "ConfirmedSnapshot"
        type: object
        additionalProperties: false
        required:
          - snapshot
          - signatures
        properties:
          snapshot:
            $ref: "#/components/schemas/Snapshot"
          signatures:
            $ref: "#/components/schemas/MultiSignature"
          tag:
            type: string
            enum: ["ConfirmedSnapshot"]

    ContestationPeriod:
      type: number
      description: |
        A contestation duration in seconds.
      example: 60

    HeadId:
      type: string
      description: |
        A unique identifier for a Head, represented by a hex-encoded 16 bytes string.
      contentEncoding: base16
      example:
        "820082582089ff4f3ff4a6052ec9d073"

    HeadParameters:
      type: object
      additionalProperties: false
      required:
        - contestationPeriod
        - parties
      properties:
        contestationPeriod:
          $ref: "#/components/schemas/ContestationPeriod"
        parties:
          type: array
          items:
            $ref: "#/components/schemas/Party"

    MultiSignature:
      type: object
      description: |
        Aggregated signature produced by Head protocol when a Snapshot is confirmed by all parties.
      additionalProperties: false
      required:
      - multiSignature
      properties:
        multiSignature:
          type: array
          items:
            $ref: "#/components/schemas/Signature"

    Party:
      type: object
      description: |
        The verification key for some Party in the Head protocol, uniquely identifying it.
      additionalProperties: false
      required:
        - vkey
      properties:
        vkey:
          type: string
          contentEncoding: base16
      example:
        {
            "vkey": "d0b8f28427aa7b640c636075905cbd6574a431aeaca5b3dbafd47cfe66c35043"
        }

    Peer:
      type: object
      description: |
        Information identifying a network peer.
      properties:
        hostname:
          type: string
          format: hostname
        port:
          type: number
      example:
        {
            "hostname": "10.0.0.10",
            "port": 5001
        }

    NodeId:
      type: string
      description: Hydra Node identifier
      example: "some hydra-node id"

    PostChainTx:
      description: |
        Description of outgoing On-Chain transactions for the Head protocol. As is
        the case for OnChainTx, these data structures completely abstract away the
        actual details of the transaction and only represent data relevant for the
        protocol to make some progress.
      oneOf:
        - title: InitTx
          type: object
          additionalProperties: false
          required:
            - tag
            - headParameters
          description: |
            The initial transaction of the Head defining its parameters.
          properties:
            tag:
              type: string
              enum: ["InitTx"]
            headParameters:
              $ref: "#/components/schemas/HeadParameters"
        - title: CommitTx
          type: object
          additionalProperties: false
          required:
            - tag
            - party
            - committed
          description: |
            Commit some UTxO set to the opening Head, signed by this party.
          properties:
            tag:
              type: string
              enum: ["CommitTx"]
            party:
              $ref: "#/components/schemas/Party"
            committed:
              $ref: "#/components/schemas/UTxO"
        - title: AbortTx
          type: object
          additionalProperties: false
          required:
            - tag
            - utxo
          description: |
            Abort the opening of the Head process.
          properties:
            tag:
              type: string
              enum: ["AbortTx"]
            utxo:
              $ref: "#/components/schemas/UTxO"
        - title: CollectComTx
          type: object
          additionalProperties: false
          required:
            - tag
            - utxo
          description: |
            Confirm the opening of the Head collecting the committed UTxO set
            combined from all individual commits.
          properties:
            tag:
              type: string
              enum: ["CollectComTx"]
            utxo:
              $ref: "#/components/schemas/UTxO"
        - title: CloseTx
          type: object
          additionalProperties: false
          required:
            - tag
            - confirmedSnapshot
          description: |
            Close the currently open Head with the given snapshot.
          properties:
            tag:
              type: string
              enum: ["CloseTx"]
            confirmedSnapshot:
              $ref: "#/components/schemas/ConfirmedSnapshot"
        - title: ContestTx
          type: object
          additionalProperties: false
          required:
            - tag
            - confirmedSnapshot
          description: |
            Contest a previously posted snapshot (from a Close or Contest
            transaction) with a newer snapshot.
          properties:
            tag:
              type: string
              enum: ["ContestTx"]
            confirmedSnapshot:
              $ref: "#/components/schemas/ConfirmedSnapshot"
        - title: FanoutTx
          type: object
          additionalProperties: false
          required:
            - tag
            - utxo
            - contestationDeadline
          description: |
            Finalise the Head posting all UTxO from the Head on-chain.
          properties:
            tag:
              type: string
              enum: ["FanoutTx"]
            utxo:
              $ref: "#/components/schemas/UTxO"
            contestationDeadline:
              $ref: "#/components/schemas/UTCTime"

    PostTxError:
      description: |
        Provides more details about transaction submission failure.
      oneOf:
        - title: MoreThanOneUTxOCommitted
          type: object
          additionalProperties: false
          required:
            - tag
          description: |
            A commit transaction tried to commit more than one UTxO on-chain.
            **Note**: Due to transaction size constraints and the unbounded size of value carried in a UTxO,
            it is a current limitation in the Head protocol that each participant can only commit one UTxO.
            This restriction should be alleviated in future versions of the protocol.
          properties:
            tag:
              type: string
              enum: ["MoreThanOneUTxOCommitted"]
        - title: ScriptFailedInWallet
          type: object
          additionalProperties: false
          required:
          - tag
          - redeemerPtr
          - failureReason
          description: >-
            Script execution failed when finalizing a transaction in the wallet.
            The redeemer pointer should give an indication which script failed
            while the reason is a dump of the error. Not intended to be
            machine-processable (right now).
          properties:
            tag:
              type: string
              enum: ["ScriptFailedInWallet"]
            redeemerPtr:
              type: string
            failureReason:
              type: string
        - title: InternalWalletError
          type: object
          additionalProperties: false
          required:
            - tag
            - tx
            - reason
            - headUTxO
          description: |
            Some input in a transaction cannot be resolved to a proper UTxO. This can happen either when some input
            is double-spent or the DirectChain component has not yet caught up with the chain.
          properties:
            tag:
              type: string
              enum: ["InternalWalletError"]
            tx:
              $ref: "#/components/schemas/Transaction"
              description: |
                A representation of the faulty transaction
            reason:
              type: string
              description: >-
                The failure reason.
            headUTxO:
              $ref: "#/components/schemas/UTxO"
              description: >-
                The Head protocol-relevant UTxO. Depending on the Head's current state, it includes the Head state thread output,
                plus the ν_initial or ν_commit outputs.
        - title: NotEnoughFuel
          description: |
            Raised if the internal wallet could not find a fuel output with
            enough lovelace to balance a transaction. See user manual how to
            fuel up the internal wallet.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["NotEnoughFuel"]
        - title: NoFuelUTXOFound
          description: |
            Raised if the internal wallet could not find a fuel output. See user
            manual how to fuel up the internal wallet.
          type: object
          additionalProperties: false
          required:
          - tag
          properties:
            tag:
              type: string
              enum: ["NoFuelUTXOFound"]
        - title: CannotFindOwnInitial
          type: object
          additionalProperties: false
          required:
          - tag
          - knownUTxO
          description: >-
            The DirectChain was unable to find the output paying to Initial script corresponding
            to this node's Party, with the relevant _Participation Token_.
          properties:
            tag:
              type: string
              enum: ["CannotFindOwnInitial"]
            knownUTxO:
              $ref: "#/components/schemas/UTxO"
              description: >-
                The known UTxO within which the Initial script was looked up for.
        - title: UnsupportedLegacyOutput
          type: object
          additionalProperties: false
          required:
          - tag
          - byronAddress
          description: >-
            The UTxO provided to commit is locked by a (legacy) Byron address, which is not supported.
          properties:
            tag:
              type: string
              enum: ["UnsupportedLegacyOutput"]
            byronAddress:
              $ref: "#/components/schemas/ByronAddress"
        - title: CannotCommitReferenceScript
          type: object
          additionalProperties: false
          required:
          - tag
          description: >-
            The UTxO provided to commit contains a reference script, which is currently not supported.
          properties:
            tag:
              type: string
              enum: ["CannotCommitReferenceScript"]
        - title: NoSeedInput
          type: object
          additionalProperties: false
          required:
          - tag
          description: >-
            Initialising a new Head failed because the DirectChain component was unable to find
            a "seed" UTxO to consume. This can happen if no UTxO has been assigned to the internal wallet's address
            for this purpose, or if the component is still catching up with the chain.
            This error is usually transient and clients should retry to post the transaction.
          properties:
            tag:
              type: string
              enum: ["NoSeedInput"]
        - title: InvalidStateToPost
          type: object
          additionalProperties: false
          required:
          - tag
          - chainState
          - txTried
          description: >-
            Attempted to post a transaction that's invalid given current protocol's state. This is definitely a **BUG**.
          properties:
            tag:
              type: string
              enum: ["InvalidStateToPost"]
            chainState:
              $ref: "#/components/schemas/ChainState"
            txTried:
              $ref: "#/components/schemas/PostChainTx"
        - title: PlutusValidationFailed
          type: object
          additionalProperties: false
          required:
          - tag
          - plutusFailure
          - plutusDebugInfo
          description: >-
            An internal transaction created by the Hydra node failed with Plutus errors. This should not happen in principle
            and may disappear in the final version but is currently useful as a debugging mean.
          properties:
            tag:
              type: string
              enum: ["PlutusValidationFailed"]
            plutusFailure:
              type: string
            plutusDebugInfo:
              type: string
        - title: FailedToPostTx
          type: object
          additionalProperties: false
          required:
          - tag
          - failureReason
          description: >-
            A generic error case. Some transaction that wasn't expected to fail still failed... somehow.
          properties:
            tag:
              type: string
              enum: ["FailedToPostTx"]
            failureReason:
              type: string

        - title: CommittedTooMuchADAForMainnet
          description: |
            Raised if the user tries to commit more than 100 ADA while on the mainnet network.
          type: object
          additionalProperties: false
          required:
          - tag
          - userCommittedLovelace
          - mainnetLimitLovelace
          properties:
            userCommitted:
              type: number
            mainnetLimit:
              type: number
            tag:
              type: string
              enum: ["CommittedTooMuchADAForMainnet"]

    Signature:
      type: string
      description: >-
        A base64-encoded signature.
      contentEncoding: base16

    Snapshot:
      type: object
      required:
      - snapshotNumber
      - utxo
      - confirmedTransactions
      properties:
        snapshotNumber:
          $ref: "#/components/schemas/SnapshotNumber"
        utxo:
          $ref: "#/components/schemas/UTxO"
        confirmedTransactions:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"

    SnapshotNumber:
      type: integer
      minimum: 0

    RawTransaction:
      title: RawTransaction
      description: |
        A CBOR-serialised signed Alonzo transaction, encoded in base16.
      type: string
      contentEncoding: base16

    Script:
      type: object
      additionalProperties: false
      required:
        - scriptLanguage
        - script
      properties:
        scriptLanguage:
          type: string
        script:
          type: object
          additionalProperties: false
          required:
            - cborHex
            - description
            - type
          properties:
            cborHex:
              type: string
              contentEncoding: base16
            description:
              type: string
            type:
              type: string
              enum:
                - SimpleScriptV2
                - SimpleScriptV1
                - PlutusScriptV1
                - PlutusScriptV2
      example:
        {
          "script": {
              "cborHex": "8303018282051927168200581c0d94e174732ef9aae73f395ab44507bfa983d65023c11a951f0c32e4",
              "description": "",
              "type": "SimpleScriptV2"
          },
          "scriptLanguage": "SimpleScriptLanguage SimpleScriptV2"
        }

    TextEnvelopeTransaction:
      title: TextEnvelopeTransaction
      description: |
        An Alonzo transaction wrapped in a text-envelope, as typically generated by cardano-cli.
      type: object
      required:
        - type
        - cborHex
      properties:
        type:
          type: string
          enum:
            - "Tx AlonzoEra"
        description:
          type: string
        cborHex:
          $ref: "#/components/schemas/RawTransaction"

    Transaction:
      type: object
      required:
        - id
        - isValid
        - body
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/TxId"
        isValid:
            type: boolean
        body:
          $ref: "#/components/schemas/TxBody"
        witnesses:
          type: object
          additionalProperties: false
          properties:
            keys:
              type: array
              items:
                $ref: "#/components/schemas/Cbor"
            scripts:
              type: object
              patternProperties:
                "[0-9a-f]+":
                  $ref: "#/components/schemas/Cbor"
            redeemers:
              $ref: "#/components/schemas/Cbor"
            datums:
              type: object
              patternProperties:
                "[0-9a-f]+":
                  $ref: "#/components/schemas/Cbor"
            bootstrap:
              type: array
              items:
                $ref: "#/components/schemas/Cbor"
        auxiliaryData:
          $ref: "#/components/schemas/Cbor"
      example:
        {
            "id": "7ca4e30387ec4ba0e95604fdab6e867fc3d740220386e1a63d142c71e8eac4ce",
            "isValid": true,
            "auxiliaryData": "d90103a100a30181a40401622c7166f098a89d2a7e006023600a600c66e4a99d7f6b08",
            "body": {
                "inputs": [
                    "03170a2e7597b7b7e3d84c05391d139a62b157e78786d8c082f29dcf4c111314#116",
                    "2208e439244a1d0ef238352e3693098aba9de9dd0154f9056551636c8ed15dc1#149"
                ],
                "outputs": [
                    {
                        "address": "addr1w9htvds89a78ex2uls5y969ttry9s3k9etww0staxzndwlgmzuul5",
                        "datumhash": "2208e439244a1d0ef238352e3693098aba9de9dd0154f9056551636c8ed15dc1",
                        "value": {
                            "lovelace": 12,
                            "4acf2773917c7b547c576a7ff110d2ba5733c1f1ca9cdc659aea3a56": {
                                "91c670": 7
                            }
                        }
                    }
                ],
                "fees": 0
            },
            "witnesses": {
                "redeemers": "84840000...e83fccf5",
                "keys": [
                    "82008258...01ad847b",
                    "82008258...7944fe3e"
                ],
                "scripts": {
                    "1be26e9d1710022443c8043b259f7b375ec8732191f3845a6aea28e5": "8200820181820519c355",
                },
                "datums": {
                    "ae85d245a3d00bfde01f59f3c4fe0b4bfae1cb37e9cf91929eadcea4985711de": "20",
                }
            }
        }

    TxBody:
      type: object
      required:
        - inputs
        - outputs
      additionalProperties: false
      properties:
        inputs:
          type: array
          description: >-
            A list of inputs for this transaction. Technically, this is actually a Set, eg. the order of elements does not matter and they must be unique.
          items:
            $ref: "#/components/schemas/TxIn"
        referenceInputs:
          type: array
          description: >-
            A list of inputs for this transaction. Technically, this is actually a Set, eg. the order of elements does not matter and they must be unique.
          items:
            $ref: "#/components/schemas/TxIn"
        collateral:
          type: array
          description: >-
            A list of collateral inputs for this transaction.
          items:
            $ref: "#/components/schemas/TxIn"
        totalCollateral:
          oneOf:
            - type: integer
              minimum: 0
            - type: "null"
        collateralReturn:
          $ref: "#/components/schemas/TxOut"
        outputs:
          type: array
          description: >-
            A list of outputs. Ordering is important here because a TxOut is referenced by its
            position in the inputs of subsequent transactions.
          items:
            $ref: "#/components/schemas/TxOut"
        certificates:
          type: array
          description: >-
            An array of certificates, encoded as hexadecimal representation of CBOR serialisation.
          items:
            $ref: "#/components/schemas/Cbor"
        withdrawals:
            $ref: "#/components/schemas/Withdrawals"
        fees:
          type: integer
          minimum: 0
          description: >-
            Fees paid for this transaction, in lovelace.
        validity:
          type: object
          description: >-
            Validity interval of this transaction. Both bounds can be omitted in which case the transaction
            has unlimited validity. Each bound is a slot number.
          properties:
            notBefore:
              oneOf:
                - type: integer
                - type: "null"
            notAfter:
              oneOf:
                - type: integer
                - type: "null"
        auxiliaryDataHash:
          type: string
          contentEncoding: base16
          description: >-
            Hex-encoding of the hash of auxiliary data section of the transactions.
          example: "9b258583229a324c3021d036e83f3c1e69ca4a586a91fad0bc9e4ce79f7411e0"
        mint:
          description: >-
            Values minted by this transaction
          $ref: "#/components/schemas/Value"
        networkId:
            type: string
            enum:
              - Mainnet
              - Testnet
        scriptIntegrityHash:
          type: string
          contentEncoding: base16
          description: >-
            Hex-encoding of the hash of script data section of the transaction.
          example: "9b258583229a324c3021d036e83f3c1e69ca4a586a91fad0bc9e4ce79f7411e0"
        requiredSignatures:
          type: array
          items:
            type: string
            contentEncoding: base16
            description: >-
              Hex-encoding of the hash of verification keys identifying extra expected signers.

    TxId:
      type: string
      description: |
        A Cardano transaction identifier. This is the hex-encoded hash of the
        transaction's body.
      pattern: "^[0-9a-f]{64}"
      example: "8df1616d4337ede40bbad2914f12977815234b83951bcce3bfcd735aed3f63e4"

    TxIn:
      type: string
      description: |
        A reference to a Cardano transaction output, commonly used as transaction
        input and thus named TxIn. Constructed from the transaction's id and
        the ouput index, separated by a '#'.
      pattern: "^[0-9a-f]{64}#[0-9]+$"
      example: "03170a2e7597b7b7e3d84c05391d139a62b157e78786d8c082f29dcf4c111314#4"

    TxOut:
      type: object
      description: |
        A single transaction output
      required:
      - address
      - value
      additionalProperties: false
      properties:
        address:
          $ref: "#/components/schemas/Address"
        value:
          $ref: "#/components/schemas/Value"
        referenceScript:
          oneOf:
            - $ref: "#/components/schemas/Script"
            - type: "null"
        datumhash:
          oneOf:
            - type: string
              contentEncoding: base16
            - type: "null"
        inlineDatum:
          oneOf:
            - type: object
            - type: "null"
        inlineDatumhash:
          oneOf:
            - type: string
              contentEncoding: base16
            - type: "null"
        datum:
          oneOf:
            - type: string
              contentEncoding: base16
            - type: "null"

    SequenceNumber:
      type: integer
      minimum: 0
      description: |
        A strictly monotonically increasing counter.
      example: 1

    UTCTime:
      type: string
      format: "date-time"
      description: |
        A data and time as measured by a clock without a time zone. It is stored as a string in ISO 8601 format.

    UTxO:
      type: object
      propertyNames:
        pattern: "^[0-9a-f]{64}#[0-9]+$"
      items:
        $ref: "#/components/schemas/TxOut"
      example:
        {
            "09d34606abdcd0b10ebc89307cbfa0b469f9144194137b45b7a04b273961add8#687": {
                "address": "addr1w9htvds89a78ex2uls5y969ttry9s3k9etww0staxzndwlgmzuul5",
                "value": {
                    "lovelace": 7620669
                }
            }
        }

    Value:
      type: object
      description: |
        A Cardano value. This is an object containing a number of lovelaces, and
        optional assets, mapping some monetary policy identifier to a
        mapping of coin (arbitrary strings) to some integer value.
        Assets represent native tokens available on the Cardano blockchain, including Non-Fungible Tokens.
      additionalProperties:
        type: object
        description: |
          A map of asset names to integral values. The key is the base16-encoded name of the asset.
        minProperties: 1
        patternProperties:
          "[0-9a-f]*":
            type: integer
            description: |
              A quantity of a certain asset.
      properties:
        lovelace:
          type: integer
          minimum: 0
          description: |
            A (positive) amount of lovelace

    Withdrawals:
      type: object
      description: |
        Mapping of reward addresses to rewards.
      additionalProperties: false
      patternProperties:
        "[0-9a-f]+":
          type: integer
          minimum: 0
          description: >-
            Some non-negative lovelace value.

    NetworkMagic:
      description: |
        NetworkMagic is used to differentiate between different networks during the initial handshake.
      oneOf:
        - title: Mainnet
          required:
            - tag
          properties:
            tag:
              type: string
              enum: ["Mainnet"]

        - title: Testnet
          required:
            - tag
            - magic
          properties:
            tag:
              type: string
              enum: ["Testnet"]
            magic:
              type: integer

    ChainPoint:
      oneOf:
        - title: ChainPointAtGenesis
          required:
            - tag
          properties:
            tag:
              type: string
              enum: ["ChainPointAtGenesis"]
        - title: ChainPoint
          required:
            - tag
            - slot
            - blockHash
          properties:
            tag:
              type: string
              enum: ["ChainPoint"]
            slot:
              type: integer
            blockHash:
              type: string

    ChainConfig:
      type: object
      description: |
        Configuration for the cardano side of things in the hydra-node config
      required:
        - networkId
        - nodeSocket
        - cardanoSigningKey
        - cardanoVerificationKeys
      properties:
        networkId:
          $ref: "#/components/schemas/NetworkMagic"
        nodeSocket:
          type: string
        cardanoSigningKey:
          type: string
        cardanoVerificationKeys:
          type: array
          items:
            type: string
        startChainFrom:
          oneOf:
            - type: "null"
            - type: object
              $ref: "#/components/schemas/ChainPoint"

    # NOTE: We don't want anyone to depend on this!
    ChainState: {}
